/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.imcuttle.foo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class RecordingTask implements org.apache.thrift.TBase<RecordingTask, RecordingTask._Fields>, java.io.Serializable, Cloneable, Comparable<RecordingTask> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecordingTask");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PHASE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("phaseId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SUBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subjectId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField ESTIMATED_QUESTION_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("estimatedQuestionNum", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField RECORDING_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("recordingMode", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField STAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("stage", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField SUBMIT_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("submitTimes", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField RECORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("recorder", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField AUDITOR_FIELD_DESC = new org.apache.thrift.protocol.TField("auditor", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField TAGGER_FIELD_DESC = new org.apache.thrift.protocol.TField("tagger", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField APPLICATION_SUBMIT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationSubmitTime", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField TASK_AUDIT_SUBMIT_DETAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("taskAuditSubmitDetails", org.apache.thrift.protocol.TType.LIST, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RecordingTaskStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RecordingTaskTupleSchemeFactory());
  }

  private long id; // required
  private int phaseId; // required
  private int subjectId; // required
  private long applicationId; // required
  private int estimatedQuestionNum; // required
  private int recordingMode; // required
  private int stage; // required
  private int submitTimes; // required
  private int recorder; // optional
  private int auditor; // optional
  private int tagger; // optional
  private long applicationSubmitTime; // optional
  private List<TaskAuditSubmitDetail> taskAuditSubmitDetails; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PHASE_ID((short)2, "phaseId"),
    SUBJECT_ID((short)3, "subjectId"),
    APPLICATION_ID((short)4, "applicationId"),
    ESTIMATED_QUESTION_NUM((short)5, "estimatedQuestionNum"),
    RECORDING_MODE((short)6, "recordingMode"),
    STAGE((short)7, "stage"),
    SUBMIT_TIMES((short)8, "submitTimes"),
    RECORDER((short)9, "recorder"),
    AUDITOR((short)10, "auditor"),
    TAGGER((short)11, "tagger"),
    APPLICATION_SUBMIT_TIME((short)12, "applicationSubmitTime"),
    TASK_AUDIT_SUBMIT_DETAILS((short)13, "taskAuditSubmitDetails");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PHASE_ID
          return PHASE_ID;
        case 3: // SUBJECT_ID
          return SUBJECT_ID;
        case 4: // APPLICATION_ID
          return APPLICATION_ID;
        case 5: // ESTIMATED_QUESTION_NUM
          return ESTIMATED_QUESTION_NUM;
        case 6: // RECORDING_MODE
          return RECORDING_MODE;
        case 7: // STAGE
          return STAGE;
        case 8: // SUBMIT_TIMES
          return SUBMIT_TIMES;
        case 9: // RECORDER
          return RECORDER;
        case 10: // AUDITOR
          return AUDITOR;
        case 11: // TAGGER
          return TAGGER;
        case 12: // APPLICATION_SUBMIT_TIME
          return APPLICATION_SUBMIT_TIME;
        case 13: // TASK_AUDIT_SUBMIT_DETAILS
          return TASK_AUDIT_SUBMIT_DETAILS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PHASEID_ISSET_ID = 1;
  private static final int __SUBJECTID_ISSET_ID = 2;
  private static final int __APPLICATIONID_ISSET_ID = 3;
  private static final int __ESTIMATEDQUESTIONNUM_ISSET_ID = 4;
  private static final int __RECORDINGMODE_ISSET_ID = 5;
  private static final int __STAGE_ISSET_ID = 6;
  private static final int __SUBMITTIMES_ISSET_ID = 7;
  private static final int __RECORDER_ISSET_ID = 8;
  private static final int __AUDITOR_ISSET_ID = 9;
  private static final int __TAGGER_ISSET_ID = 10;
  private static final int __APPLICATIONSUBMITTIME_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RECORDER,_Fields.AUDITOR,_Fields.TAGGER,_Fields.APPLICATION_SUBMIT_TIME,_Fields.TASK_AUDIT_SUBMIT_DETAILS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PHASE_ID, new org.apache.thrift.meta_data.FieldMetaData("phaseId", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("subjectId", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ESTIMATED_QUESTION_NUM, new org.apache.thrift.meta_data.FieldMetaData("estimatedQuestionNum", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECORDING_MODE, new org.apache.thrift.meta_data.FieldMetaData("recordingMode", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STAGE, new org.apache.thrift.meta_data.FieldMetaData("stage", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUBMIT_TIMES, new org.apache.thrift.meta_data.FieldMetaData("submitTimes", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECORDER, new org.apache.thrift.meta_data.FieldMetaData("recorder", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AUDITOR, new org.apache.thrift.meta_data.FieldMetaData("auditor", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TAGGER, new org.apache.thrift.meta_data.FieldMetaData("tagger", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPLICATION_SUBMIT_TIME, new org.apache.thrift.meta_data.FieldMetaData("applicationSubmitTime", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TASK_AUDIT_SUBMIT_DETAILS, new org.apache.thrift.meta_data.FieldMetaData("taskAuditSubmitDetails", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "TaskAuditSubmitDetail"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecordingTask.class, metaDataMap);
  }

  public RecordingTask() {
  }

  public RecordingTask(
    long id,
    int phaseId,
    int subjectId,
    long applicationId,
    int estimatedQuestionNum,
    int recordingMode,
    int stage,
    int submitTimes)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.phaseId = phaseId;
    setPhaseIdIsSet(true);
    this.subjectId = subjectId;
    setSubjectIdIsSet(true);
    this.applicationId = applicationId;
    setApplicationIdIsSet(true);
    this.estimatedQuestionNum = estimatedQuestionNum;
    setEstimatedQuestionNumIsSet(true);
    this.recordingMode = recordingMode;
    setRecordingModeIsSet(true);
    this.stage = stage;
    setStageIsSet(true);
    this.submitTimes = submitTimes;
    setSubmitTimesIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RecordingTask(RecordingTask other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.phaseId = other.phaseId;
    this.subjectId = other.subjectId;
    this.applicationId = other.applicationId;
    this.estimatedQuestionNum = other.estimatedQuestionNum;
    this.recordingMode = other.recordingMode;
    this.stage = other.stage;
    this.submitTimes = other.submitTimes;
    this.recorder = other.recorder;
    this.auditor = other.auditor;
    this.tagger = other.tagger;
    this.applicationSubmitTime = other.applicationSubmitTime;
    if (other.isSetTaskAuditSubmitDetails()) {
      List<TaskAuditSubmitDetail> __this__taskAuditSubmitDetails = new ArrayList<TaskAuditSubmitDetail>(other.taskAuditSubmitDetails.size());
      for (TaskAuditSubmitDetail other_element : other.taskAuditSubmitDetails) {
        __this__taskAuditSubmitDetails.add(other_element);
      }
      this.taskAuditSubmitDetails = __this__taskAuditSubmitDetails;
    }
  }

  public RecordingTask deepCopy() {
    return new RecordingTask(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setPhaseIdIsSet(false);
    this.phaseId = 0;
    setSubjectIdIsSet(false);
    this.subjectId = 0;
    setApplicationIdIsSet(false);
    this.applicationId = 0;
    setEstimatedQuestionNumIsSet(false);
    this.estimatedQuestionNum = 0;
    setRecordingModeIsSet(false);
    this.recordingMode = 0;
    setStageIsSet(false);
    this.stage = 0;
    setSubmitTimesIsSet(false);
    this.submitTimes = 0;
    setRecorderIsSet(false);
    this.recorder = 0;
    setAuditorIsSet(false);
    this.auditor = 0;
    setTaggerIsSet(false);
    this.tagger = 0;
    setApplicationSubmitTimeIsSet(false);
    this.applicationSubmitTime = 0;
    this.taskAuditSubmitDetails = null;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getPhaseId() {
    return this.phaseId;
  }

  public void setPhaseId(int phaseId) {
    this.phaseId = phaseId;
    setPhaseIdIsSet(true);
  }

  public void unsetPhaseId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PHASEID_ISSET_ID);
  }

  /** Returns true if field phaseId is set (has been assigned a value) and false otherwise */
  public boolean isSetPhaseId() {
    return EncodingUtils.testBit(__isset_bitfield, __PHASEID_ISSET_ID);
  }

  public void setPhaseIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PHASEID_ISSET_ID, value);
  }

  public int getSubjectId() {
    return this.subjectId;
  }

  public void setSubjectId(int subjectId) {
    this.subjectId = subjectId;
    setSubjectIdIsSet(true);
  }

  public void unsetSubjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBJECTID_ISSET_ID);
  }

  /** Returns true if field subjectId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBJECTID_ISSET_ID);
  }

  public void setSubjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBJECTID_ISSET_ID, value);
  }

  public long getApplicationId() {
    return this.applicationId;
  }

  public void setApplicationId(long applicationId) {
    this.applicationId = applicationId;
    setApplicationIdIsSet(true);
  }

  public void unsetApplicationId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLICATIONID_ISSET_ID);
  }

  /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationId() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLICATIONID_ISSET_ID);
  }

  public void setApplicationIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLICATIONID_ISSET_ID, value);
  }

  public int getEstimatedQuestionNum() {
    return this.estimatedQuestionNum;
  }

  public void setEstimatedQuestionNum(int estimatedQuestionNum) {
    this.estimatedQuestionNum = estimatedQuestionNum;
    setEstimatedQuestionNumIsSet(true);
  }

  public void unsetEstimatedQuestionNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ESTIMATEDQUESTIONNUM_ISSET_ID);
  }

  /** Returns true if field estimatedQuestionNum is set (has been assigned a value) and false otherwise */
  public boolean isSetEstimatedQuestionNum() {
    return EncodingUtils.testBit(__isset_bitfield, __ESTIMATEDQUESTIONNUM_ISSET_ID);
  }

  public void setEstimatedQuestionNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ESTIMATEDQUESTIONNUM_ISSET_ID, value);
  }

  public int getRecordingMode() {
    return this.recordingMode;
  }

  public void setRecordingMode(int recordingMode) {
    this.recordingMode = recordingMode;
    setRecordingModeIsSet(true);
  }

  public void unsetRecordingMode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECORDINGMODE_ISSET_ID);
  }

  /** Returns true if field recordingMode is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordingMode() {
    return EncodingUtils.testBit(__isset_bitfield, __RECORDINGMODE_ISSET_ID);
  }

  public void setRecordingModeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECORDINGMODE_ISSET_ID, value);
  }

  public int getStage() {
    return this.stage;
  }

  public void setStage(int stage) {
    this.stage = stage;
    setStageIsSet(true);
  }

  public void unsetStage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STAGE_ISSET_ID);
  }

  /** Returns true if field stage is set (has been assigned a value) and false otherwise */
  public boolean isSetStage() {
    return EncodingUtils.testBit(__isset_bitfield, __STAGE_ISSET_ID);
  }

  public void setStageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STAGE_ISSET_ID, value);
  }

  public int getSubmitTimes() {
    return this.submitTimes;
  }

  public void setSubmitTimes(int submitTimes) {
    this.submitTimes = submitTimes;
    setSubmitTimesIsSet(true);
  }

  public void unsetSubmitTimes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBMITTIMES_ISSET_ID);
  }

  /** Returns true if field submitTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetSubmitTimes() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBMITTIMES_ISSET_ID);
  }

  public void setSubmitTimesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBMITTIMES_ISSET_ID, value);
  }

  public int getRecorder() {
    return this.recorder;
  }

  public void setRecorder(int recorder) {
    this.recorder = recorder;
    setRecorderIsSet(true);
  }

  public void unsetRecorder() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECORDER_ISSET_ID);
  }

  /** Returns true if field recorder is set (has been assigned a value) and false otherwise */
  public boolean isSetRecorder() {
    return EncodingUtils.testBit(__isset_bitfield, __RECORDER_ISSET_ID);
  }

  public void setRecorderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECORDER_ISSET_ID, value);
  }

  public int getAuditor() {
    return this.auditor;
  }

  public void setAuditor(int auditor) {
    this.auditor = auditor;
    setAuditorIsSet(true);
  }

  public void unsetAuditor() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AUDITOR_ISSET_ID);
  }

  /** Returns true if field auditor is set (has been assigned a value) and false otherwise */
  public boolean isSetAuditor() {
    return EncodingUtils.testBit(__isset_bitfield, __AUDITOR_ISSET_ID);
  }

  public void setAuditorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AUDITOR_ISSET_ID, value);
  }

  public int getTagger() {
    return this.tagger;
  }

  public void setTagger(int tagger) {
    this.tagger = tagger;
    setTaggerIsSet(true);
  }

  public void unsetTagger() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TAGGER_ISSET_ID);
  }

  /** Returns true if field tagger is set (has been assigned a value) and false otherwise */
  public boolean isSetTagger() {
    return EncodingUtils.testBit(__isset_bitfield, __TAGGER_ISSET_ID);
  }

  public void setTaggerIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TAGGER_ISSET_ID, value);
  }

  public long getApplicationSubmitTime() {
    return this.applicationSubmitTime;
  }

  public void setApplicationSubmitTime(long applicationSubmitTime) {
    this.applicationSubmitTime = applicationSubmitTime;
    setApplicationSubmitTimeIsSet(true);
  }

  public void unsetApplicationSubmitTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLICATIONSUBMITTIME_ISSET_ID);
  }

  /** Returns true if field applicationSubmitTime is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationSubmitTime() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLICATIONSUBMITTIME_ISSET_ID);
  }

  public void setApplicationSubmitTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLICATIONSUBMITTIME_ISSET_ID, value);
  }

  public int getTaskAuditSubmitDetailsSize() {
    return (this.taskAuditSubmitDetails == null) ? 0 : this.taskAuditSubmitDetails.size();
  }

  public java.util.Iterator<TaskAuditSubmitDetail> getTaskAuditSubmitDetailsIterator() {
    return (this.taskAuditSubmitDetails == null) ? null : this.taskAuditSubmitDetails.iterator();
  }

  public void addToTaskAuditSubmitDetails(TaskAuditSubmitDetail elem) {
    if (this.taskAuditSubmitDetails == null) {
      this.taskAuditSubmitDetails = new ArrayList<TaskAuditSubmitDetail>();
    }
    this.taskAuditSubmitDetails.add(elem);
  }

  public List<TaskAuditSubmitDetail> getTaskAuditSubmitDetails() {
    return this.taskAuditSubmitDetails;
  }

  public void setTaskAuditSubmitDetails(List<TaskAuditSubmitDetail> taskAuditSubmitDetails) {
    this.taskAuditSubmitDetails = taskAuditSubmitDetails;
  }

  public void unsetTaskAuditSubmitDetails() {
    this.taskAuditSubmitDetails = null;
  }

  /** Returns true if field taskAuditSubmitDetails is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskAuditSubmitDetails() {
    return this.taskAuditSubmitDetails != null;
  }

  public void setTaskAuditSubmitDetailsIsSet(boolean value) {
    if (!value) {
      this.taskAuditSubmitDetails = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case PHASE_ID:
      if (value == null) {
        unsetPhaseId();
      } else {
        setPhaseId((Integer)value);
      }
      break;

    case SUBJECT_ID:
      if (value == null) {
        unsetSubjectId();
      } else {
        setSubjectId((Integer)value);
      }
      break;

    case APPLICATION_ID:
      if (value == null) {
        unsetApplicationId();
      } else {
        setApplicationId((Long)value);
      }
      break;

    case ESTIMATED_QUESTION_NUM:
      if (value == null) {
        unsetEstimatedQuestionNum();
      } else {
        setEstimatedQuestionNum((Integer)value);
      }
      break;

    case RECORDING_MODE:
      if (value == null) {
        unsetRecordingMode();
      } else {
        setRecordingMode((Integer)value);
      }
      break;

    case STAGE:
      if (value == null) {
        unsetStage();
      } else {
        setStage((Integer)value);
      }
      break;

    case SUBMIT_TIMES:
      if (value == null) {
        unsetSubmitTimes();
      } else {
        setSubmitTimes((Integer)value);
      }
      break;

    case RECORDER:
      if (value == null) {
        unsetRecorder();
      } else {
        setRecorder((Integer)value);
      }
      break;

    case AUDITOR:
      if (value == null) {
        unsetAuditor();
      } else {
        setAuditor((Integer)value);
      }
      break;

    case TAGGER:
      if (value == null) {
        unsetTagger();
      } else {
        setTagger((Integer)value);
      }
      break;

    case APPLICATION_SUBMIT_TIME:
      if (value == null) {
        unsetApplicationSubmitTime();
      } else {
        setApplicationSubmitTime((Long)value);
      }
      break;

    case TASK_AUDIT_SUBMIT_DETAILS:
      if (value == null) {
        unsetTaskAuditSubmitDetails();
      } else {
        setTaskAuditSubmitDetails((List<TaskAuditSubmitDetail>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case PHASE_ID:
      return getPhaseId();

    case SUBJECT_ID:
      return getSubjectId();

    case APPLICATION_ID:
      return getApplicationId();

    case ESTIMATED_QUESTION_NUM:
      return getEstimatedQuestionNum();

    case RECORDING_MODE:
      return getRecordingMode();

    case STAGE:
      return getStage();

    case SUBMIT_TIMES:
      return getSubmitTimes();

    case RECORDER:
      return getRecorder();

    case AUDITOR:
      return getAuditor();

    case TAGGER:
      return getTagger();

    case APPLICATION_SUBMIT_TIME:
      return getApplicationSubmitTime();

    case TASK_AUDIT_SUBMIT_DETAILS:
      return getTaskAuditSubmitDetails();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PHASE_ID:
      return isSetPhaseId();
    case SUBJECT_ID:
      return isSetSubjectId();
    case APPLICATION_ID:
      return isSetApplicationId();
    case ESTIMATED_QUESTION_NUM:
      return isSetEstimatedQuestionNum();
    case RECORDING_MODE:
      return isSetRecordingMode();
    case STAGE:
      return isSetStage();
    case SUBMIT_TIMES:
      return isSetSubmitTimes();
    case RECORDER:
      return isSetRecorder();
    case AUDITOR:
      return isSetAuditor();
    case TAGGER:
      return isSetTagger();
    case APPLICATION_SUBMIT_TIME:
      return isSetApplicationSubmitTime();
    case TASK_AUDIT_SUBMIT_DETAILS:
      return isSetTaskAuditSubmitDetails();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RecordingTask)
      return this.equals((RecordingTask)that);
    return false;
  }

  public boolean equals(RecordingTask that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_phaseId = true;
    boolean that_present_phaseId = true;
    if (this_present_phaseId || that_present_phaseId) {
      if (!(this_present_phaseId && that_present_phaseId))
        return false;
      if (this.phaseId != that.phaseId)
        return false;
    }

    boolean this_present_subjectId = true;
    boolean that_present_subjectId = true;
    if (this_present_subjectId || that_present_subjectId) {
      if (!(this_present_subjectId && that_present_subjectId))
        return false;
      if (this.subjectId != that.subjectId)
        return false;
    }

    boolean this_present_applicationId = true;
    boolean that_present_applicationId = true;
    if (this_present_applicationId || that_present_applicationId) {
      if (!(this_present_applicationId && that_present_applicationId))
        return false;
      if (this.applicationId != that.applicationId)
        return false;
    }

    boolean this_present_estimatedQuestionNum = true;
    boolean that_present_estimatedQuestionNum = true;
    if (this_present_estimatedQuestionNum || that_present_estimatedQuestionNum) {
      if (!(this_present_estimatedQuestionNum && that_present_estimatedQuestionNum))
        return false;
      if (this.estimatedQuestionNum != that.estimatedQuestionNum)
        return false;
    }

    boolean this_present_recordingMode = true;
    boolean that_present_recordingMode = true;
    if (this_present_recordingMode || that_present_recordingMode) {
      if (!(this_present_recordingMode && that_present_recordingMode))
        return false;
      if (this.recordingMode != that.recordingMode)
        return false;
    }

    boolean this_present_stage = true;
    boolean that_present_stage = true;
    if (this_present_stage || that_present_stage) {
      if (!(this_present_stage && that_present_stage))
        return false;
      if (this.stage != that.stage)
        return false;
    }

    boolean this_present_submitTimes = true;
    boolean that_present_submitTimes = true;
    if (this_present_submitTimes || that_present_submitTimes) {
      if (!(this_present_submitTimes && that_present_submitTimes))
        return false;
      if (this.submitTimes != that.submitTimes)
        return false;
    }

    boolean this_present_recorder = true && this.isSetRecorder();
    boolean that_present_recorder = true && that.isSetRecorder();
    if (this_present_recorder || that_present_recorder) {
      if (!(this_present_recorder && that_present_recorder))
        return false;
      if (this.recorder != that.recorder)
        return false;
    }

    boolean this_present_auditor = true && this.isSetAuditor();
    boolean that_present_auditor = true && that.isSetAuditor();
    if (this_present_auditor || that_present_auditor) {
      if (!(this_present_auditor && that_present_auditor))
        return false;
      if (this.auditor != that.auditor)
        return false;
    }

    boolean this_present_tagger = true && this.isSetTagger();
    boolean that_present_tagger = true && that.isSetTagger();
    if (this_present_tagger || that_present_tagger) {
      if (!(this_present_tagger && that_present_tagger))
        return false;
      if (this.tagger != that.tagger)
        return false;
    }

    boolean this_present_applicationSubmitTime = true && this.isSetApplicationSubmitTime();
    boolean that_present_applicationSubmitTime = true && that.isSetApplicationSubmitTime();
    if (this_present_applicationSubmitTime || that_present_applicationSubmitTime) {
      if (!(this_present_applicationSubmitTime && that_present_applicationSubmitTime))
        return false;
      if (this.applicationSubmitTime != that.applicationSubmitTime)
        return false;
    }

    boolean this_present_taskAuditSubmitDetails = true && this.isSetTaskAuditSubmitDetails();
    boolean that_present_taskAuditSubmitDetails = true && that.isSetTaskAuditSubmitDetails();
    if (this_present_taskAuditSubmitDetails || that_present_taskAuditSubmitDetails) {
      if (!(this_present_taskAuditSubmitDetails && that_present_taskAuditSubmitDetails))
        return false;
      if (!this.taskAuditSubmitDetails.equals(that.taskAuditSubmitDetails))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_phaseId = true;
    list.add(present_phaseId);
    if (present_phaseId)
      list.add(phaseId);

    boolean present_subjectId = true;
    list.add(present_subjectId);
    if (present_subjectId)
      list.add(subjectId);

    boolean present_applicationId = true;
    list.add(present_applicationId);
    if (present_applicationId)
      list.add(applicationId);

    boolean present_estimatedQuestionNum = true;
    list.add(present_estimatedQuestionNum);
    if (present_estimatedQuestionNum)
      list.add(estimatedQuestionNum);

    boolean present_recordingMode = true;
    list.add(present_recordingMode);
    if (present_recordingMode)
      list.add(recordingMode);

    boolean present_stage = true;
    list.add(present_stage);
    if (present_stage)
      list.add(stage);

    boolean present_submitTimes = true;
    list.add(present_submitTimes);
    if (present_submitTimes)
      list.add(submitTimes);

    boolean present_recorder = true && (isSetRecorder());
    list.add(present_recorder);
    if (present_recorder)
      list.add(recorder);

    boolean present_auditor = true && (isSetAuditor());
    list.add(present_auditor);
    if (present_auditor)
      list.add(auditor);

    boolean present_tagger = true && (isSetTagger());
    list.add(present_tagger);
    if (present_tagger)
      list.add(tagger);

    boolean present_applicationSubmitTime = true && (isSetApplicationSubmitTime());
    list.add(present_applicationSubmitTime);
    if (present_applicationSubmitTime)
      list.add(applicationSubmitTime);

    boolean present_taskAuditSubmitDetails = true && (isSetTaskAuditSubmitDetails());
    list.add(present_taskAuditSubmitDetails);
    if (present_taskAuditSubmitDetails)
      list.add(taskAuditSubmitDetails);

    return list.hashCode();
  }

  @Override
  public int compareTo(RecordingTask other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhaseId()).compareTo(other.isSetPhaseId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhaseId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phaseId, other.phaseId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubjectId()).compareTo(other.isSetSubjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subjectId, other.subjectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEstimatedQuestionNum()).compareTo(other.isSetEstimatedQuestionNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEstimatedQuestionNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.estimatedQuestionNum, other.estimatedQuestionNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordingMode()).compareTo(other.isSetRecordingMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordingMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordingMode, other.recordingMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStage()).compareTo(other.isSetStage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stage, other.stage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubmitTimes()).compareTo(other.isSetSubmitTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubmitTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.submitTimes, other.submitTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecorder()).compareTo(other.isSetRecorder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecorder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recorder, other.recorder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuditor()).compareTo(other.isSetAuditor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuditor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditor, other.auditor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTagger()).compareTo(other.isSetTagger());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagger()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagger, other.tagger);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplicationSubmitTime()).compareTo(other.isSetApplicationSubmitTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationSubmitTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationSubmitTime, other.applicationSubmitTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskAuditSubmitDetails()).compareTo(other.isSetTaskAuditSubmitDetails());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskAuditSubmitDetails()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskAuditSubmitDetails, other.taskAuditSubmitDetails);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RecordingTask(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("phaseId:");
    sb.append(this.phaseId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("subjectId:");
    sb.append(this.subjectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("applicationId:");
    sb.append(this.applicationId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("estimatedQuestionNum:");
    sb.append(this.estimatedQuestionNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordingMode:");
    sb.append(this.recordingMode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stage:");
    sb.append(this.stage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("submitTimes:");
    sb.append(this.submitTimes);
    first = false;
    if (isSetRecorder()) {
      if (!first) sb.append(", ");
      sb.append("recorder:");
      sb.append(this.recorder);
      first = false;
    }
    if (isSetAuditor()) {
      if (!first) sb.append(", ");
      sb.append("auditor:");
      sb.append(this.auditor);
      first = false;
    }
    if (isSetTagger()) {
      if (!first) sb.append(", ");
      sb.append("tagger:");
      sb.append(this.tagger);
      first = false;
    }
    if (isSetApplicationSubmitTime()) {
      if (!first) sb.append(", ");
      sb.append("applicationSubmitTime:");
      sb.append(this.applicationSubmitTime);
      first = false;
    }
    if (isSetTaskAuditSubmitDetails()) {
      if (!first) sb.append(", ");
      sb.append("taskAuditSubmitDetails:");
      if (this.taskAuditSubmitDetails == null) {
        sb.append("null");
      } else {
        sb.append(this.taskAuditSubmitDetails);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' is unset! Struct:" + toString());
    }

    if (!isSetPhaseId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'phaseId' is unset! Struct:" + toString());
    }

    if (!isSetSubjectId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'subjectId' is unset! Struct:" + toString());
    }

    if (!isSetApplicationId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'applicationId' is unset! Struct:" + toString());
    }

    if (!isSetEstimatedQuestionNum()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'estimatedQuestionNum' is unset! Struct:" + toString());
    }

    if (!isSetRecordingMode()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'recordingMode' is unset! Struct:" + toString());
    }

    if (!isSetStage()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stage' is unset! Struct:" + toString());
    }

    if (!isSetSubmitTimes()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'submitTimes' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RecordingTaskStandardSchemeFactory implements SchemeFactory {
    public RecordingTaskStandardScheme getScheme() {
      return new RecordingTaskStandardScheme();
    }
  }

  private static class RecordingTaskStandardScheme extends StandardScheme<RecordingTask> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RecordingTask struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PHASE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.phaseId = iprot.readI32();
              struct.setPhaseIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SUBJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.subjectId = iprot.readI32();
              struct.setSubjectIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // APPLICATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.applicationId = iprot.readI64();
              struct.setApplicationIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ESTIMATED_QUESTION_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.estimatedQuestionNum = iprot.readI32();
              struct.setEstimatedQuestionNumIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RECORDING_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recordingMode = iprot.readI32();
              struct.setRecordingModeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stage = iprot.readI32();
              struct.setStageIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SUBMIT_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.submitTimes = iprot.readI32();
              struct.setSubmitTimesIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RECORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recorder = iprot.readI32();
              struct.setRecorderIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // AUDITOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.auditor = iprot.readI32();
              struct.setAuditorIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TAGGER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tagger = iprot.readI32();
              struct.setTaggerIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // APPLICATION_SUBMIT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.applicationSubmitTime = iprot.readI64();
              struct.setApplicationSubmitTimeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TASK_AUDIT_SUBMIT_DETAILS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.taskAuditSubmitDetails = new ArrayList<TaskAuditSubmitDetail>(_list0.size);
                TaskAuditSubmitDetail _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new TaskAuditSubmitDetail();
                  _elem1.read(iprot);
                  struct.taskAuditSubmitDetails.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setTaskAuditSubmitDetailsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RecordingTask struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PHASE_ID_FIELD_DESC);
      oprot.writeI32(struct.phaseId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUBJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.subjectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
      oprot.writeI64(struct.applicationId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ESTIMATED_QUESTION_NUM_FIELD_DESC);
      oprot.writeI32(struct.estimatedQuestionNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECORDING_MODE_FIELD_DESC);
      oprot.writeI32(struct.recordingMode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STAGE_FIELD_DESC);
      oprot.writeI32(struct.stage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUBMIT_TIMES_FIELD_DESC);
      oprot.writeI32(struct.submitTimes);
      oprot.writeFieldEnd();
      if (struct.isSetRecorder()) {
        oprot.writeFieldBegin(RECORDER_FIELD_DESC);
        oprot.writeI32(struct.recorder);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAuditor()) {
        oprot.writeFieldBegin(AUDITOR_FIELD_DESC);
        oprot.writeI32(struct.auditor);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTagger()) {
        oprot.writeFieldBegin(TAGGER_FIELD_DESC);
        oprot.writeI32(struct.tagger);
        oprot.writeFieldEnd();
      }
      if (struct.isSetApplicationSubmitTime()) {
        oprot.writeFieldBegin(APPLICATION_SUBMIT_TIME_FIELD_DESC);
        oprot.writeI64(struct.applicationSubmitTime);
        oprot.writeFieldEnd();
      }
      if (struct.taskAuditSubmitDetails != null) {
        if (struct.isSetTaskAuditSubmitDetails()) {
          oprot.writeFieldBegin(TASK_AUDIT_SUBMIT_DETAILS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.taskAuditSubmitDetails.size()));
            for (TaskAuditSubmitDetail _iter3 : struct.taskAuditSubmitDetails)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RecordingTaskTupleSchemeFactory implements SchemeFactory {
    public RecordingTaskTupleScheme getScheme() {
      return new RecordingTaskTupleScheme();
    }
  }

  private static class RecordingTaskTupleScheme extends TupleScheme<RecordingTask> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RecordingTask struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.id);
      oprot.writeI32(struct.phaseId);
      oprot.writeI32(struct.subjectId);
      oprot.writeI64(struct.applicationId);
      oprot.writeI32(struct.estimatedQuestionNum);
      oprot.writeI32(struct.recordingMode);
      oprot.writeI32(struct.stage);
      oprot.writeI32(struct.submitTimes);
      BitSet optionals = new BitSet();
      if (struct.isSetRecorder()) {
        optionals.set(0);
      }
      if (struct.isSetAuditor()) {
        optionals.set(1);
      }
      if (struct.isSetTagger()) {
        optionals.set(2);
      }
      if (struct.isSetApplicationSubmitTime()) {
        optionals.set(3);
      }
      if (struct.isSetTaskAuditSubmitDetails()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetRecorder()) {
        oprot.writeI32(struct.recorder);
      }
      if (struct.isSetAuditor()) {
        oprot.writeI32(struct.auditor);
      }
      if (struct.isSetTagger()) {
        oprot.writeI32(struct.tagger);
      }
      if (struct.isSetApplicationSubmitTime()) {
        oprot.writeI64(struct.applicationSubmitTime);
      }
      if (struct.isSetTaskAuditSubmitDetails()) {
        {
          oprot.writeI32(struct.taskAuditSubmitDetails.size());
          for (TaskAuditSubmitDetail _iter4 : struct.taskAuditSubmitDetails)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RecordingTask struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readI64();
      struct.setIdIsSet(true);
      struct.phaseId = iprot.readI32();
      struct.setPhaseIdIsSet(true);
      struct.subjectId = iprot.readI32();
      struct.setSubjectIdIsSet(true);
      struct.applicationId = iprot.readI64();
      struct.setApplicationIdIsSet(true);
      struct.estimatedQuestionNum = iprot.readI32();
      struct.setEstimatedQuestionNumIsSet(true);
      struct.recordingMode = iprot.readI32();
      struct.setRecordingModeIsSet(true);
      struct.stage = iprot.readI32();
      struct.setStageIsSet(true);
      struct.submitTimes = iprot.readI32();
      struct.setSubmitTimesIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.recorder = iprot.readI32();
        struct.setRecorderIsSet(true);
      }
      if (incoming.get(1)) {
        struct.auditor = iprot.readI32();
        struct.setAuditorIsSet(true);
      }
      if (incoming.get(2)) {
        struct.tagger = iprot.readI32();
        struct.setTaggerIsSet(true);
      }
      if (incoming.get(3)) {
        struct.applicationSubmitTime = iprot.readI64();
        struct.setApplicationSubmitTimeIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.taskAuditSubmitDetails = new ArrayList<TaskAuditSubmitDetail>(_list5.size);
          TaskAuditSubmitDetail _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new TaskAuditSubmitDetail();
            _elem6.read(iprot);
            struct.taskAuditSubmitDetails.add(_elem6);
          }
        }
        struct.setTaskAuditSubmitDetailsIsSet(true);
      }
    }
  }

}

