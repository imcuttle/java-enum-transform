/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.imcuttle.foo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TutorArmoryThrift {

  public interface Iface {

    public boolean saveExamPaperRecordingTask(long taskId, long examPaperId) throws org.apache.thrift.TException;

    public boolean removeExamPaperRecordingTask(long taskId, long examPaperId) throws org.apache.thrift.TException;

    public boolean saveExamPaperOfRecordingTask(BindExamPaperReq request) throws ArmoryUnAuthorizedException, org.apache.thrift.TException;

    public boolean removeExamPaperFromRecordingTask(UnbindExamPaperReq request) throws ArmoryUnAuthorizedException, org.apache.thrift.TException;

    public Map<Long,RecordingApplicationDetail> getRecordingApplicationDetails(List<Long> ids) throws org.apache.thrift.TException;

    public boolean bindQuestion2RecordingTask(BindQuestionReq req) throws ArmoryBadRequestException, org.apache.thrift.TException;

    public boolean updateQuestionRecordingTaskSnapshots(long taskId, long examPaperId, int questionId, List<String> snapshots) throws org.apache.thrift.TException;

    public List<Long> scanRecordingApplicationId(long cursorIdExclusive, int batchSize) throws org.apache.thrift.TException;

    public boolean updateQuestionTagStatus(long taskId, int questionId) throws org.apache.thrift.TException;

    public boolean updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId(long taskId, int questionId, long examPaperId) throws org.apache.thrift.TException;

    public long getRecordingApplicationIdByTaskId(long taskId) throws org.apache.thrift.TException;

    public Map<Long,RecordingApplication> getRecordingApplicationByTaskIds(List<Long> taskIds) throws org.apache.thrift.TException;

    public boolean replaceQuestionAndFeedback(long taskId, long examPaperId, int needReplaceId, int replacedId) throws org.apache.thrift.TException;

    public Map<Long,RecordingApplicationDetail> getRecordingApplicationDetailsIncludeAllRelations(List<Long> ids) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void saveExamPaperRecordingTask(long taskId, long examPaperId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeExamPaperRecordingTask(long taskId, long examPaperId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveExamPaperOfRecordingTask(BindExamPaperReq request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeExamPaperFromRecordingTask(UnbindExamPaperReq request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRecordingApplicationDetails(List<Long> ids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bindQuestion2RecordingTask(BindQuestionReq req, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateQuestionRecordingTaskSnapshots(long taskId, long examPaperId, int questionId, List<String> snapshots, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void scanRecordingApplicationId(long cursorIdExclusive, int batchSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateQuestionTagStatus(long taskId, int questionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId(long taskId, int questionId, long examPaperId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRecordingApplicationIdByTaskId(long taskId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRecordingApplicationByTaskIds(List<Long> taskIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void replaceQuestionAndFeedback(long taskId, long examPaperId, int needReplaceId, int replacedId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRecordingApplicationDetailsIncludeAllRelations(List<Long> ids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean saveExamPaperRecordingTask(long taskId, long examPaperId) throws org.apache.thrift.TException
    {
      send_saveExamPaperRecordingTask(taskId, examPaperId);
      return recv_saveExamPaperRecordingTask();
    }

    public void send_saveExamPaperRecordingTask(long taskId, long examPaperId) throws org.apache.thrift.TException
    {
      saveExamPaperRecordingTask_args args = new saveExamPaperRecordingTask_args();
      args.setTaskId(taskId);
      args.setExamPaperId(examPaperId);
      sendBase("saveExamPaperRecordingTask", args);
    }

    public boolean recv_saveExamPaperRecordingTask() throws org.apache.thrift.TException
    {
      saveExamPaperRecordingTask_result result = new saveExamPaperRecordingTask_result();
      receiveBase(result, "saveExamPaperRecordingTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveExamPaperRecordingTask failed: unknown result");
    }

    public boolean removeExamPaperRecordingTask(long taskId, long examPaperId) throws org.apache.thrift.TException
    {
      send_removeExamPaperRecordingTask(taskId, examPaperId);
      return recv_removeExamPaperRecordingTask();
    }

    public void send_removeExamPaperRecordingTask(long taskId, long examPaperId) throws org.apache.thrift.TException
    {
      removeExamPaperRecordingTask_args args = new removeExamPaperRecordingTask_args();
      args.setTaskId(taskId);
      args.setExamPaperId(examPaperId);
      sendBase("removeExamPaperRecordingTask", args);
    }

    public boolean recv_removeExamPaperRecordingTask() throws org.apache.thrift.TException
    {
      removeExamPaperRecordingTask_result result = new removeExamPaperRecordingTask_result();
      receiveBase(result, "removeExamPaperRecordingTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeExamPaperRecordingTask failed: unknown result");
    }

    public boolean saveExamPaperOfRecordingTask(BindExamPaperReq request) throws ArmoryUnAuthorizedException, org.apache.thrift.TException
    {
      send_saveExamPaperOfRecordingTask(request);
      return recv_saveExamPaperOfRecordingTask();
    }

    public void send_saveExamPaperOfRecordingTask(BindExamPaperReq request) throws org.apache.thrift.TException
    {
      saveExamPaperOfRecordingTask_args args = new saveExamPaperOfRecordingTask_args();
      args.setRequest(request);
      sendBase("saveExamPaperOfRecordingTask", args);
    }

    public boolean recv_saveExamPaperOfRecordingTask() throws ArmoryUnAuthorizedException, org.apache.thrift.TException
    {
      saveExamPaperOfRecordingTask_result result = new saveExamPaperOfRecordingTask_result();
      receiveBase(result, "saveExamPaperOfRecordingTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveExamPaperOfRecordingTask failed: unknown result");
    }

    public boolean removeExamPaperFromRecordingTask(UnbindExamPaperReq request) throws ArmoryUnAuthorizedException, org.apache.thrift.TException
    {
      send_removeExamPaperFromRecordingTask(request);
      return recv_removeExamPaperFromRecordingTask();
    }

    public void send_removeExamPaperFromRecordingTask(UnbindExamPaperReq request) throws org.apache.thrift.TException
    {
      removeExamPaperFromRecordingTask_args args = new removeExamPaperFromRecordingTask_args();
      args.setRequest(request);
      sendBase("removeExamPaperFromRecordingTask", args);
    }

    public boolean recv_removeExamPaperFromRecordingTask() throws ArmoryUnAuthorizedException, org.apache.thrift.TException
    {
      removeExamPaperFromRecordingTask_result result = new removeExamPaperFromRecordingTask_result();
      receiveBase(result, "removeExamPaperFromRecordingTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeExamPaperFromRecordingTask failed: unknown result");
    }

    public Map<Long,RecordingApplicationDetail> getRecordingApplicationDetails(List<Long> ids) throws org.apache.thrift.TException
    {
      send_getRecordingApplicationDetails(ids);
      return recv_getRecordingApplicationDetails();
    }

    public void send_getRecordingApplicationDetails(List<Long> ids) throws org.apache.thrift.TException
    {
      getRecordingApplicationDetails_args args = new getRecordingApplicationDetails_args();
      args.setIds(ids);
      sendBase("getRecordingApplicationDetails", args);
    }

    public Map<Long,RecordingApplicationDetail> recv_getRecordingApplicationDetails() throws org.apache.thrift.TException
    {
      getRecordingApplicationDetails_result result = new getRecordingApplicationDetails_result();
      receiveBase(result, "getRecordingApplicationDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRecordingApplicationDetails failed: unknown result");
    }

    public boolean bindQuestion2RecordingTask(BindQuestionReq req) throws ArmoryBadRequestException, org.apache.thrift.TException
    {
      send_bindQuestion2RecordingTask(req);
      return recv_bindQuestion2RecordingTask();
    }

    public void send_bindQuestion2RecordingTask(BindQuestionReq req) throws org.apache.thrift.TException
    {
      bindQuestion2RecordingTask_args args = new bindQuestion2RecordingTask_args();
      args.setReq(req);
      sendBase("bindQuestion2RecordingTask", args);
    }

    public boolean recv_bindQuestion2RecordingTask() throws ArmoryBadRequestException, org.apache.thrift.TException
    {
      bindQuestion2RecordingTask_result result = new bindQuestion2RecordingTask_result();
      receiveBase(result, "bindQuestion2RecordingTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bindQuestion2RecordingTask failed: unknown result");
    }

    public boolean updateQuestionRecordingTaskSnapshots(long taskId, long examPaperId, int questionId, List<String> snapshots) throws org.apache.thrift.TException
    {
      send_updateQuestionRecordingTaskSnapshots(taskId, examPaperId, questionId, snapshots);
      return recv_updateQuestionRecordingTaskSnapshots();
    }

    public void send_updateQuestionRecordingTaskSnapshots(long taskId, long examPaperId, int questionId, List<String> snapshots) throws org.apache.thrift.TException
    {
      updateQuestionRecordingTaskSnapshots_args args = new updateQuestionRecordingTaskSnapshots_args();
      args.setTaskId(taskId);
      args.setExamPaperId(examPaperId);
      args.setQuestionId(questionId);
      args.setSnapshots(snapshots);
      sendBase("updateQuestionRecordingTaskSnapshots", args);
    }

    public boolean recv_updateQuestionRecordingTaskSnapshots() throws org.apache.thrift.TException
    {
      updateQuestionRecordingTaskSnapshots_result result = new updateQuestionRecordingTaskSnapshots_result();
      receiveBase(result, "updateQuestionRecordingTaskSnapshots");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateQuestionRecordingTaskSnapshots failed: unknown result");
    }

    public List<Long> scanRecordingApplicationId(long cursorIdExclusive, int batchSize) throws org.apache.thrift.TException
    {
      send_scanRecordingApplicationId(cursorIdExclusive, batchSize);
      return recv_scanRecordingApplicationId();
    }

    public void send_scanRecordingApplicationId(long cursorIdExclusive, int batchSize) throws org.apache.thrift.TException
    {
      scanRecordingApplicationId_args args = new scanRecordingApplicationId_args();
      args.setCursorIdExclusive(cursorIdExclusive);
      args.setBatchSize(batchSize);
      sendBase("scanRecordingApplicationId", args);
    }

    public List<Long> recv_scanRecordingApplicationId() throws org.apache.thrift.TException
    {
      scanRecordingApplicationId_result result = new scanRecordingApplicationId_result();
      receiveBase(result, "scanRecordingApplicationId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "scanRecordingApplicationId failed: unknown result");
    }

    public boolean updateQuestionTagStatus(long taskId, int questionId) throws org.apache.thrift.TException
    {
      send_updateQuestionTagStatus(taskId, questionId);
      return recv_updateQuestionTagStatus();
    }

    public void send_updateQuestionTagStatus(long taskId, int questionId) throws org.apache.thrift.TException
    {
      updateQuestionTagStatus_args args = new updateQuestionTagStatus_args();
      args.setTaskId(taskId);
      args.setQuestionId(questionId);
      sendBase("updateQuestionTagStatus", args);
    }

    public boolean recv_updateQuestionTagStatus() throws org.apache.thrift.TException
    {
      updateQuestionTagStatus_result result = new updateQuestionTagStatus_result();
      receiveBase(result, "updateQuestionTagStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateQuestionTagStatus failed: unknown result");
    }

    public boolean updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId(long taskId, int questionId, long examPaperId) throws org.apache.thrift.TException
    {
      send_updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId(taskId, questionId, examPaperId);
      return recv_updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId();
    }

    public void send_updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId(long taskId, int questionId, long examPaperId) throws org.apache.thrift.TException
    {
      updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args args = new updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args();
      args.setTaskId(taskId);
      args.setQuestionId(questionId);
      args.setExamPaperId(examPaperId);
      sendBase("updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId", args);
    }

    public boolean recv_updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId() throws org.apache.thrift.TException
    {
      updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_result result = new updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_result();
      receiveBase(result, "updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId failed: unknown result");
    }

    public long getRecordingApplicationIdByTaskId(long taskId) throws org.apache.thrift.TException
    {
      send_getRecordingApplicationIdByTaskId(taskId);
      return recv_getRecordingApplicationIdByTaskId();
    }

    public void send_getRecordingApplicationIdByTaskId(long taskId) throws org.apache.thrift.TException
    {
      getRecordingApplicationIdByTaskId_args args = new getRecordingApplicationIdByTaskId_args();
      args.setTaskId(taskId);
      sendBase("getRecordingApplicationIdByTaskId", args);
    }

    public long recv_getRecordingApplicationIdByTaskId() throws org.apache.thrift.TException
    {
      getRecordingApplicationIdByTaskId_result result = new getRecordingApplicationIdByTaskId_result();
      receiveBase(result, "getRecordingApplicationIdByTaskId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRecordingApplicationIdByTaskId failed: unknown result");
    }

    public Map<Long,RecordingApplication> getRecordingApplicationByTaskIds(List<Long> taskIds) throws org.apache.thrift.TException
    {
      send_getRecordingApplicationByTaskIds(taskIds);
      return recv_getRecordingApplicationByTaskIds();
    }

    public void send_getRecordingApplicationByTaskIds(List<Long> taskIds) throws org.apache.thrift.TException
    {
      getRecordingApplicationByTaskIds_args args = new getRecordingApplicationByTaskIds_args();
      args.setTaskIds(taskIds);
      sendBase("getRecordingApplicationByTaskIds", args);
    }

    public Map<Long,RecordingApplication> recv_getRecordingApplicationByTaskIds() throws org.apache.thrift.TException
    {
      getRecordingApplicationByTaskIds_result result = new getRecordingApplicationByTaskIds_result();
      receiveBase(result, "getRecordingApplicationByTaskIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRecordingApplicationByTaskIds failed: unknown result");
    }

    public boolean replaceQuestionAndFeedback(long taskId, long examPaperId, int needReplaceId, int replacedId) throws org.apache.thrift.TException
    {
      send_replaceQuestionAndFeedback(taskId, examPaperId, needReplaceId, replacedId);
      return recv_replaceQuestionAndFeedback();
    }

    public void send_replaceQuestionAndFeedback(long taskId, long examPaperId, int needReplaceId, int replacedId) throws org.apache.thrift.TException
    {
      replaceQuestionAndFeedback_args args = new replaceQuestionAndFeedback_args();
      args.setTaskId(taskId);
      args.setExamPaperId(examPaperId);
      args.setNeedReplaceId(needReplaceId);
      args.setReplacedId(replacedId);
      sendBase("replaceQuestionAndFeedback", args);
    }

    public boolean recv_replaceQuestionAndFeedback() throws org.apache.thrift.TException
    {
      replaceQuestionAndFeedback_result result = new replaceQuestionAndFeedback_result();
      receiveBase(result, "replaceQuestionAndFeedback");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "replaceQuestionAndFeedback failed: unknown result");
    }

    public Map<Long,RecordingApplicationDetail> getRecordingApplicationDetailsIncludeAllRelations(List<Long> ids) throws org.apache.thrift.TException
    {
      send_getRecordingApplicationDetailsIncludeAllRelations(ids);
      return recv_getRecordingApplicationDetailsIncludeAllRelations();
    }

    public void send_getRecordingApplicationDetailsIncludeAllRelations(List<Long> ids) throws org.apache.thrift.TException
    {
      getRecordingApplicationDetailsIncludeAllRelations_args args = new getRecordingApplicationDetailsIncludeAllRelations_args();
      args.setIds(ids);
      sendBase("getRecordingApplicationDetailsIncludeAllRelations", args);
    }

    public Map<Long,RecordingApplicationDetail> recv_getRecordingApplicationDetailsIncludeAllRelations() throws org.apache.thrift.TException
    {
      getRecordingApplicationDetailsIncludeAllRelations_result result = new getRecordingApplicationDetailsIncludeAllRelations_result();
      receiveBase(result, "getRecordingApplicationDetailsIncludeAllRelations");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRecordingApplicationDetailsIncludeAllRelations failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void saveExamPaperRecordingTask(long taskId, long examPaperId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveExamPaperRecordingTask_call method_call = new saveExamPaperRecordingTask_call(taskId, examPaperId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveExamPaperRecordingTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long taskId;
      private long examPaperId;
      public saveExamPaperRecordingTask_call(long taskId, long examPaperId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.taskId = taskId;
        this.examPaperId = examPaperId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveExamPaperRecordingTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveExamPaperRecordingTask_args args = new saveExamPaperRecordingTask_args();
        args.setTaskId(taskId);
        args.setExamPaperId(examPaperId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveExamPaperRecordingTask();
      }
    }

    public void removeExamPaperRecordingTask(long taskId, long examPaperId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeExamPaperRecordingTask_call method_call = new removeExamPaperRecordingTask_call(taskId, examPaperId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeExamPaperRecordingTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long taskId;
      private long examPaperId;
      public removeExamPaperRecordingTask_call(long taskId, long examPaperId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.taskId = taskId;
        this.examPaperId = examPaperId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeExamPaperRecordingTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeExamPaperRecordingTask_args args = new removeExamPaperRecordingTask_args();
        args.setTaskId(taskId);
        args.setExamPaperId(examPaperId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeExamPaperRecordingTask();
      }
    }

    public void saveExamPaperOfRecordingTask(BindExamPaperReq request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveExamPaperOfRecordingTask_call method_call = new saveExamPaperOfRecordingTask_call(request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveExamPaperOfRecordingTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BindExamPaperReq request;
      public saveExamPaperOfRecordingTask_call(BindExamPaperReq request, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveExamPaperOfRecordingTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveExamPaperOfRecordingTask_args args = new saveExamPaperOfRecordingTask_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws ArmoryUnAuthorizedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveExamPaperOfRecordingTask();
      }
    }

    public void removeExamPaperFromRecordingTask(UnbindExamPaperReq request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeExamPaperFromRecordingTask_call method_call = new removeExamPaperFromRecordingTask_call(request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeExamPaperFromRecordingTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UnbindExamPaperReq request;
      public removeExamPaperFromRecordingTask_call(UnbindExamPaperReq request, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeExamPaperFromRecordingTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeExamPaperFromRecordingTask_args args = new removeExamPaperFromRecordingTask_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws ArmoryUnAuthorizedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeExamPaperFromRecordingTask();
      }
    }

    public void getRecordingApplicationDetails(List<Long> ids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRecordingApplicationDetails_call method_call = new getRecordingApplicationDetails_call(ids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRecordingApplicationDetails_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> ids;
      public getRecordingApplicationDetails_call(List<Long> ids, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRecordingApplicationDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRecordingApplicationDetails_args args = new getRecordingApplicationDetails_args();
        args.setIds(ids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<Long,RecordingApplicationDetail> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRecordingApplicationDetails();
      }
    }

    public void bindQuestion2RecordingTask(BindQuestionReq req, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bindQuestion2RecordingTask_call method_call = new bindQuestion2RecordingTask_call(req, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bindQuestion2RecordingTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BindQuestionReq req;
      public bindQuestion2RecordingTask_call(BindQuestionReq req, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.req = req;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bindQuestion2RecordingTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bindQuestion2RecordingTask_args args = new bindQuestion2RecordingTask_args();
        args.setReq(req);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws ArmoryBadRequestException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bindQuestion2RecordingTask();
      }
    }

    public void updateQuestionRecordingTaskSnapshots(long taskId, long examPaperId, int questionId, List<String> snapshots, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateQuestionRecordingTaskSnapshots_call method_call = new updateQuestionRecordingTaskSnapshots_call(taskId, examPaperId, questionId, snapshots, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateQuestionRecordingTaskSnapshots_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long taskId;
      private long examPaperId;
      private int questionId;
      private List<String> snapshots;
      public updateQuestionRecordingTaskSnapshots_call(long taskId, long examPaperId, int questionId, List<String> snapshots, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.taskId = taskId;
        this.examPaperId = examPaperId;
        this.questionId = questionId;
        this.snapshots = snapshots;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateQuestionRecordingTaskSnapshots", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateQuestionRecordingTaskSnapshots_args args = new updateQuestionRecordingTaskSnapshots_args();
        args.setTaskId(taskId);
        args.setExamPaperId(examPaperId);
        args.setQuestionId(questionId);
        args.setSnapshots(snapshots);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateQuestionRecordingTaskSnapshots();
      }
    }

    public void scanRecordingApplicationId(long cursorIdExclusive, int batchSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      scanRecordingApplicationId_call method_call = new scanRecordingApplicationId_call(cursorIdExclusive, batchSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class scanRecordingApplicationId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long cursorIdExclusive;
      private int batchSize;
      public scanRecordingApplicationId_call(long cursorIdExclusive, int batchSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cursorIdExclusive = cursorIdExclusive;
        this.batchSize = batchSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("scanRecordingApplicationId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        scanRecordingApplicationId_args args = new scanRecordingApplicationId_args();
        args.setCursorIdExclusive(cursorIdExclusive);
        args.setBatchSize(batchSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_scanRecordingApplicationId();
      }
    }

    public void updateQuestionTagStatus(long taskId, int questionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateQuestionTagStatus_call method_call = new updateQuestionTagStatus_call(taskId, questionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateQuestionTagStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long taskId;
      private int questionId;
      public updateQuestionTagStatus_call(long taskId, int questionId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.taskId = taskId;
        this.questionId = questionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateQuestionTagStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateQuestionTagStatus_args args = new updateQuestionTagStatus_args();
        args.setTaskId(taskId);
        args.setQuestionId(questionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateQuestionTagStatus();
      }
    }

    public void updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId(long taskId, int questionId, long examPaperId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_call method_call = new updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_call(taskId, questionId, examPaperId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long taskId;
      private int questionId;
      private long examPaperId;
      public updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_call(long taskId, int questionId, long examPaperId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.taskId = taskId;
        this.questionId = questionId;
        this.examPaperId = examPaperId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args args = new updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args();
        args.setTaskId(taskId);
        args.setQuestionId(questionId);
        args.setExamPaperId(examPaperId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId();
      }
    }

    public void getRecordingApplicationIdByTaskId(long taskId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRecordingApplicationIdByTaskId_call method_call = new getRecordingApplicationIdByTaskId_call(taskId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRecordingApplicationIdByTaskId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long taskId;
      public getRecordingApplicationIdByTaskId_call(long taskId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.taskId = taskId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRecordingApplicationIdByTaskId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRecordingApplicationIdByTaskId_args args = new getRecordingApplicationIdByTaskId_args();
        args.setTaskId(taskId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRecordingApplicationIdByTaskId();
      }
    }

    public void getRecordingApplicationByTaskIds(List<Long> taskIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRecordingApplicationByTaskIds_call method_call = new getRecordingApplicationByTaskIds_call(taskIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRecordingApplicationByTaskIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> taskIds;
      public getRecordingApplicationByTaskIds_call(List<Long> taskIds, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.taskIds = taskIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRecordingApplicationByTaskIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRecordingApplicationByTaskIds_args args = new getRecordingApplicationByTaskIds_args();
        args.setTaskIds(taskIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<Long,RecordingApplication> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRecordingApplicationByTaskIds();
      }
    }

    public void replaceQuestionAndFeedback(long taskId, long examPaperId, int needReplaceId, int replacedId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      replaceQuestionAndFeedback_call method_call = new replaceQuestionAndFeedback_call(taskId, examPaperId, needReplaceId, replacedId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class replaceQuestionAndFeedback_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long taskId;
      private long examPaperId;
      private int needReplaceId;
      private int replacedId;
      public replaceQuestionAndFeedback_call(long taskId, long examPaperId, int needReplaceId, int replacedId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.taskId = taskId;
        this.examPaperId = examPaperId;
        this.needReplaceId = needReplaceId;
        this.replacedId = replacedId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("replaceQuestionAndFeedback", org.apache.thrift.protocol.TMessageType.CALL, 0));
        replaceQuestionAndFeedback_args args = new replaceQuestionAndFeedback_args();
        args.setTaskId(taskId);
        args.setExamPaperId(examPaperId);
        args.setNeedReplaceId(needReplaceId);
        args.setReplacedId(replacedId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_replaceQuestionAndFeedback();
      }
    }

    public void getRecordingApplicationDetailsIncludeAllRelations(List<Long> ids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRecordingApplicationDetailsIncludeAllRelations_call method_call = new getRecordingApplicationDetailsIncludeAllRelations_call(ids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRecordingApplicationDetailsIncludeAllRelations_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> ids;
      public getRecordingApplicationDetailsIncludeAllRelations_call(List<Long> ids, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRecordingApplicationDetailsIncludeAllRelations", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRecordingApplicationDetailsIncludeAllRelations_args args = new getRecordingApplicationDetailsIncludeAllRelations_args();
        args.setIds(ids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<Long,RecordingApplicationDetail> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRecordingApplicationDetailsIncludeAllRelations();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("saveExamPaperRecordingTask", new saveExamPaperRecordingTask());
      processMap.put("removeExamPaperRecordingTask", new removeExamPaperRecordingTask());
      processMap.put("saveExamPaperOfRecordingTask", new saveExamPaperOfRecordingTask());
      processMap.put("removeExamPaperFromRecordingTask", new removeExamPaperFromRecordingTask());
      processMap.put("getRecordingApplicationDetails", new getRecordingApplicationDetails());
      processMap.put("bindQuestion2RecordingTask", new bindQuestion2RecordingTask());
      processMap.put("updateQuestionRecordingTaskSnapshots", new updateQuestionRecordingTaskSnapshots());
      processMap.put("scanRecordingApplicationId", new scanRecordingApplicationId());
      processMap.put("updateQuestionTagStatus", new updateQuestionTagStatus());
      processMap.put("updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId", new updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId());
      processMap.put("getRecordingApplicationIdByTaskId", new getRecordingApplicationIdByTaskId());
      processMap.put("getRecordingApplicationByTaskIds", new getRecordingApplicationByTaskIds());
      processMap.put("replaceQuestionAndFeedback", new replaceQuestionAndFeedback());
      processMap.put("getRecordingApplicationDetailsIncludeAllRelations", new getRecordingApplicationDetailsIncludeAllRelations());
      return processMap;
    }

    public static class saveExamPaperRecordingTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveExamPaperRecordingTask_args> {
      public saveExamPaperRecordingTask() {
        super("saveExamPaperRecordingTask");
      }

      public saveExamPaperRecordingTask_args getEmptyArgsInstance() {
        return new saveExamPaperRecordingTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveExamPaperRecordingTask_result getResult(I iface, saveExamPaperRecordingTask_args args) throws org.apache.thrift.TException {
        saveExamPaperRecordingTask_result result = new saveExamPaperRecordingTask_result();
        result.success = iface.saveExamPaperRecordingTask(args.taskId, args.examPaperId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class removeExamPaperRecordingTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeExamPaperRecordingTask_args> {
      public removeExamPaperRecordingTask() {
        super("removeExamPaperRecordingTask");
      }

      public removeExamPaperRecordingTask_args getEmptyArgsInstance() {
        return new removeExamPaperRecordingTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeExamPaperRecordingTask_result getResult(I iface, removeExamPaperRecordingTask_args args) throws org.apache.thrift.TException {
        removeExamPaperRecordingTask_result result = new removeExamPaperRecordingTask_result();
        result.success = iface.removeExamPaperRecordingTask(args.taskId, args.examPaperId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class saveExamPaperOfRecordingTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveExamPaperOfRecordingTask_args> {
      public saveExamPaperOfRecordingTask() {
        super("saveExamPaperOfRecordingTask");
      }

      public saveExamPaperOfRecordingTask_args getEmptyArgsInstance() {
        return new saveExamPaperOfRecordingTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveExamPaperOfRecordingTask_result getResult(I iface, saveExamPaperOfRecordingTask_args args) throws org.apache.thrift.TException {
        saveExamPaperOfRecordingTask_result result = new saveExamPaperOfRecordingTask_result();
        try {
          result.success = iface.saveExamPaperOfRecordingTask(args.request);
          result.setSuccessIsSet(true);
        } catch (ArmoryUnAuthorizedException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class removeExamPaperFromRecordingTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeExamPaperFromRecordingTask_args> {
      public removeExamPaperFromRecordingTask() {
        super("removeExamPaperFromRecordingTask");
      }

      public removeExamPaperFromRecordingTask_args getEmptyArgsInstance() {
        return new removeExamPaperFromRecordingTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeExamPaperFromRecordingTask_result getResult(I iface, removeExamPaperFromRecordingTask_args args) throws org.apache.thrift.TException {
        removeExamPaperFromRecordingTask_result result = new removeExamPaperFromRecordingTask_result();
        try {
          result.success = iface.removeExamPaperFromRecordingTask(args.request);
          result.setSuccessIsSet(true);
        } catch (ArmoryUnAuthorizedException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getRecordingApplicationDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRecordingApplicationDetails_args> {
      public getRecordingApplicationDetails() {
        super("getRecordingApplicationDetails");
      }

      public getRecordingApplicationDetails_args getEmptyArgsInstance() {
        return new getRecordingApplicationDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRecordingApplicationDetails_result getResult(I iface, getRecordingApplicationDetails_args args) throws org.apache.thrift.TException {
        getRecordingApplicationDetails_result result = new getRecordingApplicationDetails_result();
        result.success = iface.getRecordingApplicationDetails(args.ids);
        return result;
      }
    }

    public static class bindQuestion2RecordingTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bindQuestion2RecordingTask_args> {
      public bindQuestion2RecordingTask() {
        super("bindQuestion2RecordingTask");
      }

      public bindQuestion2RecordingTask_args getEmptyArgsInstance() {
        return new bindQuestion2RecordingTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bindQuestion2RecordingTask_result getResult(I iface, bindQuestion2RecordingTask_args args) throws org.apache.thrift.TException {
        bindQuestion2RecordingTask_result result = new bindQuestion2RecordingTask_result();
        try {
          result.success = iface.bindQuestion2RecordingTask(args.req);
          result.setSuccessIsSet(true);
        } catch (ArmoryBadRequestException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateQuestionRecordingTaskSnapshots<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateQuestionRecordingTaskSnapshots_args> {
      public updateQuestionRecordingTaskSnapshots() {
        super("updateQuestionRecordingTaskSnapshots");
      }

      public updateQuestionRecordingTaskSnapshots_args getEmptyArgsInstance() {
        return new updateQuestionRecordingTaskSnapshots_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateQuestionRecordingTaskSnapshots_result getResult(I iface, updateQuestionRecordingTaskSnapshots_args args) throws org.apache.thrift.TException {
        updateQuestionRecordingTaskSnapshots_result result = new updateQuestionRecordingTaskSnapshots_result();
        result.success = iface.updateQuestionRecordingTaskSnapshots(args.taskId, args.examPaperId, args.questionId, args.snapshots);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class scanRecordingApplicationId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scanRecordingApplicationId_args> {
      public scanRecordingApplicationId() {
        super("scanRecordingApplicationId");
      }

      public scanRecordingApplicationId_args getEmptyArgsInstance() {
        return new scanRecordingApplicationId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public scanRecordingApplicationId_result getResult(I iface, scanRecordingApplicationId_args args) throws org.apache.thrift.TException {
        scanRecordingApplicationId_result result = new scanRecordingApplicationId_result();
        result.success = iface.scanRecordingApplicationId(args.cursorIdExclusive, args.batchSize);
        return result;
      }
    }

    public static class updateQuestionTagStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateQuestionTagStatus_args> {
      public updateQuestionTagStatus() {
        super("updateQuestionTagStatus");
      }

      public updateQuestionTagStatus_args getEmptyArgsInstance() {
        return new updateQuestionTagStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateQuestionTagStatus_result getResult(I iface, updateQuestionTagStatus_args args) throws org.apache.thrift.TException {
        updateQuestionTagStatus_result result = new updateQuestionTagStatus_result();
        result.success = iface.updateQuestionTagStatus(args.taskId, args.questionId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args> {
      public updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId() {
        super("updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId");
      }

      public updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args getEmptyArgsInstance() {
        return new updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_result getResult(I iface, updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args args) throws org.apache.thrift.TException {
        updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_result result = new updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_result();
        result.success = iface.updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId(args.taskId, args.questionId, args.examPaperId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getRecordingApplicationIdByTaskId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRecordingApplicationIdByTaskId_args> {
      public getRecordingApplicationIdByTaskId() {
        super("getRecordingApplicationIdByTaskId");
      }

      public getRecordingApplicationIdByTaskId_args getEmptyArgsInstance() {
        return new getRecordingApplicationIdByTaskId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRecordingApplicationIdByTaskId_result getResult(I iface, getRecordingApplicationIdByTaskId_args args) throws org.apache.thrift.TException {
        getRecordingApplicationIdByTaskId_result result = new getRecordingApplicationIdByTaskId_result();
        result.success = iface.getRecordingApplicationIdByTaskId(args.taskId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getRecordingApplicationByTaskIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRecordingApplicationByTaskIds_args> {
      public getRecordingApplicationByTaskIds() {
        super("getRecordingApplicationByTaskIds");
      }

      public getRecordingApplicationByTaskIds_args getEmptyArgsInstance() {
        return new getRecordingApplicationByTaskIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRecordingApplicationByTaskIds_result getResult(I iface, getRecordingApplicationByTaskIds_args args) throws org.apache.thrift.TException {
        getRecordingApplicationByTaskIds_result result = new getRecordingApplicationByTaskIds_result();
        result.success = iface.getRecordingApplicationByTaskIds(args.taskIds);
        return result;
      }
    }

    public static class replaceQuestionAndFeedback<I extends Iface> extends org.apache.thrift.ProcessFunction<I, replaceQuestionAndFeedback_args> {
      public replaceQuestionAndFeedback() {
        super("replaceQuestionAndFeedback");
      }

      public replaceQuestionAndFeedback_args getEmptyArgsInstance() {
        return new replaceQuestionAndFeedback_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public replaceQuestionAndFeedback_result getResult(I iface, replaceQuestionAndFeedback_args args) throws org.apache.thrift.TException {
        replaceQuestionAndFeedback_result result = new replaceQuestionAndFeedback_result();
        result.success = iface.replaceQuestionAndFeedback(args.taskId, args.examPaperId, args.needReplaceId, args.replacedId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getRecordingApplicationDetailsIncludeAllRelations<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRecordingApplicationDetailsIncludeAllRelations_args> {
      public getRecordingApplicationDetailsIncludeAllRelations() {
        super("getRecordingApplicationDetailsIncludeAllRelations");
      }

      public getRecordingApplicationDetailsIncludeAllRelations_args getEmptyArgsInstance() {
        return new getRecordingApplicationDetailsIncludeAllRelations_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRecordingApplicationDetailsIncludeAllRelations_result getResult(I iface, getRecordingApplicationDetailsIncludeAllRelations_args args) throws org.apache.thrift.TException {
        getRecordingApplicationDetailsIncludeAllRelations_result result = new getRecordingApplicationDetailsIncludeAllRelations_result();
        result.success = iface.getRecordingApplicationDetailsIncludeAllRelations(args.ids);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("saveExamPaperRecordingTask", new saveExamPaperRecordingTask());
      processMap.put("removeExamPaperRecordingTask", new removeExamPaperRecordingTask());
      processMap.put("saveExamPaperOfRecordingTask", new saveExamPaperOfRecordingTask());
      processMap.put("removeExamPaperFromRecordingTask", new removeExamPaperFromRecordingTask());
      processMap.put("getRecordingApplicationDetails", new getRecordingApplicationDetails());
      processMap.put("bindQuestion2RecordingTask", new bindQuestion2RecordingTask());
      processMap.put("updateQuestionRecordingTaskSnapshots", new updateQuestionRecordingTaskSnapshots());
      processMap.put("scanRecordingApplicationId", new scanRecordingApplicationId());
      processMap.put("updateQuestionTagStatus", new updateQuestionTagStatus());
      processMap.put("updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId", new updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId());
      processMap.put("getRecordingApplicationIdByTaskId", new getRecordingApplicationIdByTaskId());
      processMap.put("getRecordingApplicationByTaskIds", new getRecordingApplicationByTaskIds());
      processMap.put("replaceQuestionAndFeedback", new replaceQuestionAndFeedback());
      processMap.put("getRecordingApplicationDetailsIncludeAllRelations", new getRecordingApplicationDetailsIncludeAllRelations());
      return processMap;
    }

    public static class saveExamPaperRecordingTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveExamPaperRecordingTask_args, Boolean> {
      public saveExamPaperRecordingTask() {
        super("saveExamPaperRecordingTask");
      }

      public saveExamPaperRecordingTask_args getEmptyArgsInstance() {
        return new saveExamPaperRecordingTask_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            saveExamPaperRecordingTask_result result = new saveExamPaperRecordingTask_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveExamPaperRecordingTask_result result = new saveExamPaperRecordingTask_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveExamPaperRecordingTask_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.saveExamPaperRecordingTask(args.taskId, args.examPaperId,resultHandler);
      }
    }

    public static class removeExamPaperRecordingTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeExamPaperRecordingTask_args, Boolean> {
      public removeExamPaperRecordingTask() {
        super("removeExamPaperRecordingTask");
      }

      public removeExamPaperRecordingTask_args getEmptyArgsInstance() {
        return new removeExamPaperRecordingTask_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            removeExamPaperRecordingTask_result result = new removeExamPaperRecordingTask_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeExamPaperRecordingTask_result result = new removeExamPaperRecordingTask_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeExamPaperRecordingTask_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.removeExamPaperRecordingTask(args.taskId, args.examPaperId,resultHandler);
      }
    }

    public static class saveExamPaperOfRecordingTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveExamPaperOfRecordingTask_args, Boolean> {
      public saveExamPaperOfRecordingTask() {
        super("saveExamPaperOfRecordingTask");
      }

      public saveExamPaperOfRecordingTask_args getEmptyArgsInstance() {
        return new saveExamPaperOfRecordingTask_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            saveExamPaperOfRecordingTask_result result = new saveExamPaperOfRecordingTask_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveExamPaperOfRecordingTask_result result = new saveExamPaperOfRecordingTask_result();
            if (e instanceof ArmoryUnAuthorizedException) {
                        result.e = (ArmoryUnAuthorizedException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveExamPaperOfRecordingTask_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.saveExamPaperOfRecordingTask(args.request,resultHandler);
      }
    }

    public static class removeExamPaperFromRecordingTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeExamPaperFromRecordingTask_args, Boolean> {
      public removeExamPaperFromRecordingTask() {
        super("removeExamPaperFromRecordingTask");
      }

      public removeExamPaperFromRecordingTask_args getEmptyArgsInstance() {
        return new removeExamPaperFromRecordingTask_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            removeExamPaperFromRecordingTask_result result = new removeExamPaperFromRecordingTask_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeExamPaperFromRecordingTask_result result = new removeExamPaperFromRecordingTask_result();
            if (e instanceof ArmoryUnAuthorizedException) {
                        result.e = (ArmoryUnAuthorizedException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeExamPaperFromRecordingTask_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.removeExamPaperFromRecordingTask(args.request,resultHandler);
      }
    }

    public static class getRecordingApplicationDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRecordingApplicationDetails_args, Map<Long,RecordingApplicationDetail>> {
      public getRecordingApplicationDetails() {
        super("getRecordingApplicationDetails");
      }

      public getRecordingApplicationDetails_args getEmptyArgsInstance() {
        return new getRecordingApplicationDetails_args();
      }

      public AsyncMethodCallback<Map<Long,RecordingApplicationDetail>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<Long,RecordingApplicationDetail>>() {
          public void onComplete(Map<Long,RecordingApplicationDetail> o) {
            getRecordingApplicationDetails_result result = new getRecordingApplicationDetails_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRecordingApplicationDetails_result result = new getRecordingApplicationDetails_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRecordingApplicationDetails_args args, org.apache.thrift.async.AsyncMethodCallback<Map<Long,RecordingApplicationDetail>> resultHandler) throws TException {
        iface.getRecordingApplicationDetails(args.ids,resultHandler);
      }
    }

    public static class bindQuestion2RecordingTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bindQuestion2RecordingTask_args, Boolean> {
      public bindQuestion2RecordingTask() {
        super("bindQuestion2RecordingTask");
      }

      public bindQuestion2RecordingTask_args getEmptyArgsInstance() {
        return new bindQuestion2RecordingTask_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            bindQuestion2RecordingTask_result result = new bindQuestion2RecordingTask_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bindQuestion2RecordingTask_result result = new bindQuestion2RecordingTask_result();
            if (e instanceof ArmoryBadRequestException) {
                        result.e = (ArmoryBadRequestException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bindQuestion2RecordingTask_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.bindQuestion2RecordingTask(args.req,resultHandler);
      }
    }

    public static class updateQuestionRecordingTaskSnapshots<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateQuestionRecordingTaskSnapshots_args, Boolean> {
      public updateQuestionRecordingTaskSnapshots() {
        super("updateQuestionRecordingTaskSnapshots");
      }

      public updateQuestionRecordingTaskSnapshots_args getEmptyArgsInstance() {
        return new updateQuestionRecordingTaskSnapshots_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            updateQuestionRecordingTaskSnapshots_result result = new updateQuestionRecordingTaskSnapshots_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateQuestionRecordingTaskSnapshots_result result = new updateQuestionRecordingTaskSnapshots_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateQuestionRecordingTaskSnapshots_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateQuestionRecordingTaskSnapshots(args.taskId, args.examPaperId, args.questionId, args.snapshots,resultHandler);
      }
    }

    public static class scanRecordingApplicationId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, scanRecordingApplicationId_args, List<Long>> {
      public scanRecordingApplicationId() {
        super("scanRecordingApplicationId");
      }

      public scanRecordingApplicationId_args getEmptyArgsInstance() {
        return new scanRecordingApplicationId_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() {
          public void onComplete(List<Long> o) {
            scanRecordingApplicationId_result result = new scanRecordingApplicationId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            scanRecordingApplicationId_result result = new scanRecordingApplicationId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, scanRecordingApplicationId_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.scanRecordingApplicationId(args.cursorIdExclusive, args.batchSize,resultHandler);
      }
    }

    public static class updateQuestionTagStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateQuestionTagStatus_args, Boolean> {
      public updateQuestionTagStatus() {
        super("updateQuestionTagStatus");
      }

      public updateQuestionTagStatus_args getEmptyArgsInstance() {
        return new updateQuestionTagStatus_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            updateQuestionTagStatus_result result = new updateQuestionTagStatus_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateQuestionTagStatus_result result = new updateQuestionTagStatus_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateQuestionTagStatus_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateQuestionTagStatus(args.taskId, args.questionId,resultHandler);
      }
    }

    public static class updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args, Boolean> {
      public updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId() {
        super("updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId");
      }

      public updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args getEmptyArgsInstance() {
        return new updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_result result = new updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_result result = new updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId(args.taskId, args.questionId, args.examPaperId,resultHandler);
      }
    }

    public static class getRecordingApplicationIdByTaskId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRecordingApplicationIdByTaskId_args, Long> {
      public getRecordingApplicationIdByTaskId() {
        super("getRecordingApplicationIdByTaskId");
      }

      public getRecordingApplicationIdByTaskId_args getEmptyArgsInstance() {
        return new getRecordingApplicationIdByTaskId_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() {
          public void onComplete(Long o) {
            getRecordingApplicationIdByTaskId_result result = new getRecordingApplicationIdByTaskId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRecordingApplicationIdByTaskId_result result = new getRecordingApplicationIdByTaskId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRecordingApplicationIdByTaskId_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.getRecordingApplicationIdByTaskId(args.taskId,resultHandler);
      }
    }

    public static class getRecordingApplicationByTaskIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRecordingApplicationByTaskIds_args, Map<Long,RecordingApplication>> {
      public getRecordingApplicationByTaskIds() {
        super("getRecordingApplicationByTaskIds");
      }

      public getRecordingApplicationByTaskIds_args getEmptyArgsInstance() {
        return new getRecordingApplicationByTaskIds_args();
      }

      public AsyncMethodCallback<Map<Long,RecordingApplication>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<Long,RecordingApplication>>() {
          public void onComplete(Map<Long,RecordingApplication> o) {
            getRecordingApplicationByTaskIds_result result = new getRecordingApplicationByTaskIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRecordingApplicationByTaskIds_result result = new getRecordingApplicationByTaskIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRecordingApplicationByTaskIds_args args, org.apache.thrift.async.AsyncMethodCallback<Map<Long,RecordingApplication>> resultHandler) throws TException {
        iface.getRecordingApplicationByTaskIds(args.taskIds,resultHandler);
      }
    }

    public static class replaceQuestionAndFeedback<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, replaceQuestionAndFeedback_args, Boolean> {
      public replaceQuestionAndFeedback() {
        super("replaceQuestionAndFeedback");
      }

      public replaceQuestionAndFeedback_args getEmptyArgsInstance() {
        return new replaceQuestionAndFeedback_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            replaceQuestionAndFeedback_result result = new replaceQuestionAndFeedback_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            replaceQuestionAndFeedback_result result = new replaceQuestionAndFeedback_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, replaceQuestionAndFeedback_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.replaceQuestionAndFeedback(args.taskId, args.examPaperId, args.needReplaceId, args.replacedId,resultHandler);
      }
    }

    public static class getRecordingApplicationDetailsIncludeAllRelations<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRecordingApplicationDetailsIncludeAllRelations_args, Map<Long,RecordingApplicationDetail>> {
      public getRecordingApplicationDetailsIncludeAllRelations() {
        super("getRecordingApplicationDetailsIncludeAllRelations");
      }

      public getRecordingApplicationDetailsIncludeAllRelations_args getEmptyArgsInstance() {
        return new getRecordingApplicationDetailsIncludeAllRelations_args();
      }

      public AsyncMethodCallback<Map<Long,RecordingApplicationDetail>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<Long,RecordingApplicationDetail>>() {
          public void onComplete(Map<Long,RecordingApplicationDetail> o) {
            getRecordingApplicationDetailsIncludeAllRelations_result result = new getRecordingApplicationDetailsIncludeAllRelations_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRecordingApplicationDetailsIncludeAllRelations_result result = new getRecordingApplicationDetailsIncludeAllRelations_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRecordingApplicationDetailsIncludeAllRelations_args args, org.apache.thrift.async.AsyncMethodCallback<Map<Long,RecordingApplicationDetail>> resultHandler) throws TException {
        iface.getRecordingApplicationDetailsIncludeAllRelations(args.ids,resultHandler);
      }
    }

  }

  public static class saveExamPaperRecordingTask_args implements org.apache.thrift.TBase<saveExamPaperRecordingTask_args, saveExamPaperRecordingTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveExamPaperRecordingTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveExamPaperRecordingTask_args");

    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField EXAM_PAPER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("examPaperId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveExamPaperRecordingTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveExamPaperRecordingTask_argsTupleSchemeFactory());
    }

    private long taskId; // required
    private long examPaperId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK_ID((short)1, "taskId"),
      EXAM_PAPER_ID((short)2, "examPaperId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_ID
            return TASK_ID;
          case 2: // EXAM_PAPER_ID
            return EXAM_PAPER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TASKID_ISSET_ID = 0;
    private static final int __EXAMPAPERID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EXAM_PAPER_ID, new org.apache.thrift.meta_data.FieldMetaData("examPaperId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveExamPaperRecordingTask_args.class, metaDataMap);
    }

    public saveExamPaperRecordingTask_args() {
    }

    public saveExamPaperRecordingTask_args(
      long taskId,
      long examPaperId)
    {
      this();
      this.taskId = taskId;
      setTaskIdIsSet(true);
      this.examPaperId = examPaperId;
      setExamPaperIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveExamPaperRecordingTask_args(saveExamPaperRecordingTask_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.taskId = other.taskId;
      this.examPaperId = other.examPaperId;
    }

    public saveExamPaperRecordingTask_args deepCopy() {
      return new saveExamPaperRecordingTask_args(this);
    }

    @Override
    public void clear() {
      setTaskIdIsSet(false);
      this.taskId = 0;
      setExamPaperIdIsSet(false);
      this.examPaperId = 0;
    }

    public long getTaskId() {
      return this.taskId;
    }

    public void setTaskId(long taskId) {
      this.taskId = taskId;
      setTaskIdIsSet(true);
    }

    public void unsetTaskId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskId() {
      return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    public void setTaskIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
    }

    public long getExamPaperId() {
      return this.examPaperId;
    }

    public void setExamPaperId(long examPaperId) {
      this.examPaperId = examPaperId;
      setExamPaperIdIsSet(true);
    }

    public void unsetExamPaperId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXAMPAPERID_ISSET_ID);
    }

    /** Returns true if field examPaperId is set (has been assigned a value) and false otherwise */
    public boolean isSetExamPaperId() {
      return EncodingUtils.testBit(__isset_bitfield, __EXAMPAPERID_ISSET_ID);
    }

    public void setExamPaperIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXAMPAPERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK_ID:
        if (value == null) {
          unsetTaskId();
        } else {
          setTaskId((Long)value);
        }
        break;

      case EXAM_PAPER_ID:
        if (value == null) {
          unsetExamPaperId();
        } else {
          setExamPaperId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_ID:
        return getTaskId();

      case EXAM_PAPER_ID:
        return getExamPaperId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK_ID:
        return isSetTaskId();
      case EXAM_PAPER_ID:
        return isSetExamPaperId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveExamPaperRecordingTask_args)
        return this.equals((saveExamPaperRecordingTask_args)that);
      return false;
    }

    public boolean equals(saveExamPaperRecordingTask_args that) {
      if (that == null)
        return false;

      boolean this_present_taskId = true;
      boolean that_present_taskId = true;
      if (this_present_taskId || that_present_taskId) {
        if (!(this_present_taskId && that_present_taskId))
          return false;
        if (this.taskId != that.taskId)
          return false;
      }

      boolean this_present_examPaperId = true;
      boolean that_present_examPaperId = true;
      if (this_present_examPaperId || that_present_examPaperId) {
        if (!(this_present_examPaperId && that_present_examPaperId))
          return false;
        if (this.examPaperId != that.examPaperId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_taskId = true;
      list.add(present_taskId);
      if (present_taskId)
        list.add(taskId);

      boolean present_examPaperId = true;
      list.add(present_examPaperId);
      if (present_examPaperId)
        list.add(examPaperId);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveExamPaperRecordingTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExamPaperId()).compareTo(other.isSetExamPaperId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExamPaperId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.examPaperId, other.examPaperId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveExamPaperRecordingTask_args(");
      boolean first = true;

      sb.append("taskId:");
      sb.append(this.taskId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("examPaperId:");
      sb.append(this.examPaperId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveExamPaperRecordingTask_argsStandardSchemeFactory implements SchemeFactory {
      public saveExamPaperRecordingTask_argsStandardScheme getScheme() {
        return new saveExamPaperRecordingTask_argsStandardScheme();
      }
    }

    private static class saveExamPaperRecordingTask_argsStandardScheme extends StandardScheme<saveExamPaperRecordingTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveExamPaperRecordingTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.taskId = iprot.readI64();
                struct.setTaskIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXAM_PAPER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.examPaperId = iprot.readI64();
                struct.setExamPaperIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveExamPaperRecordingTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeI64(struct.taskId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(EXAM_PAPER_ID_FIELD_DESC);
        oprot.writeI64(struct.examPaperId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveExamPaperRecordingTask_argsTupleSchemeFactory implements SchemeFactory {
      public saveExamPaperRecordingTask_argsTupleScheme getScheme() {
        return new saveExamPaperRecordingTask_argsTupleScheme();
      }
    }

    private static class saveExamPaperRecordingTask_argsTupleScheme extends TupleScheme<saveExamPaperRecordingTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveExamPaperRecordingTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTaskId()) {
          optionals.set(0);
        }
        if (struct.isSetExamPaperId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTaskId()) {
          oprot.writeI64(struct.taskId);
        }
        if (struct.isSetExamPaperId()) {
          oprot.writeI64(struct.examPaperId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveExamPaperRecordingTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.taskId = iprot.readI64();
          struct.setTaskIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.examPaperId = iprot.readI64();
          struct.setExamPaperIdIsSet(true);
        }
      }
    }

  }

  public static class saveExamPaperRecordingTask_result implements org.apache.thrift.TBase<saveExamPaperRecordingTask_result, saveExamPaperRecordingTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveExamPaperRecordingTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveExamPaperRecordingTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveExamPaperRecordingTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveExamPaperRecordingTask_resultTupleSchemeFactory());
    }

    private boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveExamPaperRecordingTask_result.class, metaDataMap);
    }

    public saveExamPaperRecordingTask_result() {
    }

    public saveExamPaperRecordingTask_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveExamPaperRecordingTask_result(saveExamPaperRecordingTask_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public saveExamPaperRecordingTask_result deepCopy() {
      return new saveExamPaperRecordingTask_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveExamPaperRecordingTask_result)
        return this.equals((saveExamPaperRecordingTask_result)that);
      return false;
    }

    public boolean equals(saveExamPaperRecordingTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveExamPaperRecordingTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveExamPaperRecordingTask_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveExamPaperRecordingTask_resultStandardSchemeFactory implements SchemeFactory {
      public saveExamPaperRecordingTask_resultStandardScheme getScheme() {
        return new saveExamPaperRecordingTask_resultStandardScheme();
      }
    }

    private static class saveExamPaperRecordingTask_resultStandardScheme extends StandardScheme<saveExamPaperRecordingTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveExamPaperRecordingTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveExamPaperRecordingTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveExamPaperRecordingTask_resultTupleSchemeFactory implements SchemeFactory {
      public saveExamPaperRecordingTask_resultTupleScheme getScheme() {
        return new saveExamPaperRecordingTask_resultTupleScheme();
      }
    }

    private static class saveExamPaperRecordingTask_resultTupleScheme extends TupleScheme<saveExamPaperRecordingTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveExamPaperRecordingTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveExamPaperRecordingTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class removeExamPaperRecordingTask_args implements org.apache.thrift.TBase<removeExamPaperRecordingTask_args, removeExamPaperRecordingTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeExamPaperRecordingTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeExamPaperRecordingTask_args");

    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField EXAM_PAPER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("examPaperId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeExamPaperRecordingTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeExamPaperRecordingTask_argsTupleSchemeFactory());
    }

    private long taskId; // required
    private long examPaperId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK_ID((short)1, "taskId"),
      EXAM_PAPER_ID((short)2, "examPaperId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_ID
            return TASK_ID;
          case 2: // EXAM_PAPER_ID
            return EXAM_PAPER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TASKID_ISSET_ID = 0;
    private static final int __EXAMPAPERID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EXAM_PAPER_ID, new org.apache.thrift.meta_data.FieldMetaData("examPaperId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeExamPaperRecordingTask_args.class, metaDataMap);
    }

    public removeExamPaperRecordingTask_args() {
    }

    public removeExamPaperRecordingTask_args(
      long taskId,
      long examPaperId)
    {
      this();
      this.taskId = taskId;
      setTaskIdIsSet(true);
      this.examPaperId = examPaperId;
      setExamPaperIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeExamPaperRecordingTask_args(removeExamPaperRecordingTask_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.taskId = other.taskId;
      this.examPaperId = other.examPaperId;
    }

    public removeExamPaperRecordingTask_args deepCopy() {
      return new removeExamPaperRecordingTask_args(this);
    }

    @Override
    public void clear() {
      setTaskIdIsSet(false);
      this.taskId = 0;
      setExamPaperIdIsSet(false);
      this.examPaperId = 0;
    }

    public long getTaskId() {
      return this.taskId;
    }

    public void setTaskId(long taskId) {
      this.taskId = taskId;
      setTaskIdIsSet(true);
    }

    public void unsetTaskId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskId() {
      return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    public void setTaskIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
    }

    public long getExamPaperId() {
      return this.examPaperId;
    }

    public void setExamPaperId(long examPaperId) {
      this.examPaperId = examPaperId;
      setExamPaperIdIsSet(true);
    }

    public void unsetExamPaperId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXAMPAPERID_ISSET_ID);
    }

    /** Returns true if field examPaperId is set (has been assigned a value) and false otherwise */
    public boolean isSetExamPaperId() {
      return EncodingUtils.testBit(__isset_bitfield, __EXAMPAPERID_ISSET_ID);
    }

    public void setExamPaperIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXAMPAPERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK_ID:
        if (value == null) {
          unsetTaskId();
        } else {
          setTaskId((Long)value);
        }
        break;

      case EXAM_PAPER_ID:
        if (value == null) {
          unsetExamPaperId();
        } else {
          setExamPaperId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_ID:
        return getTaskId();

      case EXAM_PAPER_ID:
        return getExamPaperId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK_ID:
        return isSetTaskId();
      case EXAM_PAPER_ID:
        return isSetExamPaperId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeExamPaperRecordingTask_args)
        return this.equals((removeExamPaperRecordingTask_args)that);
      return false;
    }

    public boolean equals(removeExamPaperRecordingTask_args that) {
      if (that == null)
        return false;

      boolean this_present_taskId = true;
      boolean that_present_taskId = true;
      if (this_present_taskId || that_present_taskId) {
        if (!(this_present_taskId && that_present_taskId))
          return false;
        if (this.taskId != that.taskId)
          return false;
      }

      boolean this_present_examPaperId = true;
      boolean that_present_examPaperId = true;
      if (this_present_examPaperId || that_present_examPaperId) {
        if (!(this_present_examPaperId && that_present_examPaperId))
          return false;
        if (this.examPaperId != that.examPaperId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_taskId = true;
      list.add(present_taskId);
      if (present_taskId)
        list.add(taskId);

      boolean present_examPaperId = true;
      list.add(present_examPaperId);
      if (present_examPaperId)
        list.add(examPaperId);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeExamPaperRecordingTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExamPaperId()).compareTo(other.isSetExamPaperId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExamPaperId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.examPaperId, other.examPaperId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeExamPaperRecordingTask_args(");
      boolean first = true;

      sb.append("taskId:");
      sb.append(this.taskId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("examPaperId:");
      sb.append(this.examPaperId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeExamPaperRecordingTask_argsStandardSchemeFactory implements SchemeFactory {
      public removeExamPaperRecordingTask_argsStandardScheme getScheme() {
        return new removeExamPaperRecordingTask_argsStandardScheme();
      }
    }

    private static class removeExamPaperRecordingTask_argsStandardScheme extends StandardScheme<removeExamPaperRecordingTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeExamPaperRecordingTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.taskId = iprot.readI64();
                struct.setTaskIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXAM_PAPER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.examPaperId = iprot.readI64();
                struct.setExamPaperIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeExamPaperRecordingTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeI64(struct.taskId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(EXAM_PAPER_ID_FIELD_DESC);
        oprot.writeI64(struct.examPaperId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeExamPaperRecordingTask_argsTupleSchemeFactory implements SchemeFactory {
      public removeExamPaperRecordingTask_argsTupleScheme getScheme() {
        return new removeExamPaperRecordingTask_argsTupleScheme();
      }
    }

    private static class removeExamPaperRecordingTask_argsTupleScheme extends TupleScheme<removeExamPaperRecordingTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeExamPaperRecordingTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTaskId()) {
          optionals.set(0);
        }
        if (struct.isSetExamPaperId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTaskId()) {
          oprot.writeI64(struct.taskId);
        }
        if (struct.isSetExamPaperId()) {
          oprot.writeI64(struct.examPaperId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeExamPaperRecordingTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.taskId = iprot.readI64();
          struct.setTaskIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.examPaperId = iprot.readI64();
          struct.setExamPaperIdIsSet(true);
        }
      }
    }

  }

  public static class removeExamPaperRecordingTask_result implements org.apache.thrift.TBase<removeExamPaperRecordingTask_result, removeExamPaperRecordingTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeExamPaperRecordingTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeExamPaperRecordingTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeExamPaperRecordingTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeExamPaperRecordingTask_resultTupleSchemeFactory());
    }

    private boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeExamPaperRecordingTask_result.class, metaDataMap);
    }

    public removeExamPaperRecordingTask_result() {
    }

    public removeExamPaperRecordingTask_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeExamPaperRecordingTask_result(removeExamPaperRecordingTask_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public removeExamPaperRecordingTask_result deepCopy() {
      return new removeExamPaperRecordingTask_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeExamPaperRecordingTask_result)
        return this.equals((removeExamPaperRecordingTask_result)that);
      return false;
    }

    public boolean equals(removeExamPaperRecordingTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeExamPaperRecordingTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeExamPaperRecordingTask_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeExamPaperRecordingTask_resultStandardSchemeFactory implements SchemeFactory {
      public removeExamPaperRecordingTask_resultStandardScheme getScheme() {
        return new removeExamPaperRecordingTask_resultStandardScheme();
      }
    }

    private static class removeExamPaperRecordingTask_resultStandardScheme extends StandardScheme<removeExamPaperRecordingTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeExamPaperRecordingTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeExamPaperRecordingTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeExamPaperRecordingTask_resultTupleSchemeFactory implements SchemeFactory {
      public removeExamPaperRecordingTask_resultTupleScheme getScheme() {
        return new removeExamPaperRecordingTask_resultTupleScheme();
      }
    }

    private static class removeExamPaperRecordingTask_resultTupleScheme extends TupleScheme<removeExamPaperRecordingTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeExamPaperRecordingTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeExamPaperRecordingTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveExamPaperOfRecordingTask_args implements org.apache.thrift.TBase<saveExamPaperOfRecordingTask_args, saveExamPaperOfRecordingTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveExamPaperOfRecordingTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveExamPaperOfRecordingTask_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveExamPaperOfRecordingTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveExamPaperOfRecordingTask_argsTupleSchemeFactory());
    }

    private BindExamPaperReq request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BindExamPaperReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveExamPaperOfRecordingTask_args.class, metaDataMap);
    }

    public saveExamPaperOfRecordingTask_args() {
    }

    public saveExamPaperOfRecordingTask_args(
      BindExamPaperReq request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveExamPaperOfRecordingTask_args(saveExamPaperOfRecordingTask_args other) {
      if (other.isSetRequest()) {
        this.request = new BindExamPaperReq(other.request);
      }
    }

    public saveExamPaperOfRecordingTask_args deepCopy() {
      return new saveExamPaperOfRecordingTask_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
    }

    public BindExamPaperReq getRequest() {
      return this.request;
    }

    public void setRequest(BindExamPaperReq request) {
      this.request = request;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((BindExamPaperReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveExamPaperOfRecordingTask_args)
        return this.equals((saveExamPaperOfRecordingTask_args)that);
      return false;
    }

    public boolean equals(saveExamPaperOfRecordingTask_args that) {
      if (that == null)
        return false;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_request = true && (isSetRequest());
      list.add(present_request);
      if (present_request)
        list.add(request);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveExamPaperOfRecordingTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveExamPaperOfRecordingTask_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveExamPaperOfRecordingTask_argsStandardSchemeFactory implements SchemeFactory {
      public saveExamPaperOfRecordingTask_argsStandardScheme getScheme() {
        return new saveExamPaperOfRecordingTask_argsStandardScheme();
      }
    }

    private static class saveExamPaperOfRecordingTask_argsStandardScheme extends StandardScheme<saveExamPaperOfRecordingTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveExamPaperOfRecordingTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new BindExamPaperReq();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveExamPaperOfRecordingTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveExamPaperOfRecordingTask_argsTupleSchemeFactory implements SchemeFactory {
      public saveExamPaperOfRecordingTask_argsTupleScheme getScheme() {
        return new saveExamPaperOfRecordingTask_argsTupleScheme();
      }
    }

    private static class saveExamPaperOfRecordingTask_argsTupleScheme extends TupleScheme<saveExamPaperOfRecordingTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveExamPaperOfRecordingTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveExamPaperOfRecordingTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.request = new BindExamPaperReq();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

  }

  public static class saveExamPaperOfRecordingTask_result implements org.apache.thrift.TBase<saveExamPaperOfRecordingTask_result, saveExamPaperOfRecordingTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveExamPaperOfRecordingTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveExamPaperOfRecordingTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveExamPaperOfRecordingTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveExamPaperOfRecordingTask_resultTupleSchemeFactory());
    }

    private boolean success; // required
    private ArmoryUnAuthorizedException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveExamPaperOfRecordingTask_result.class, metaDataMap);
    }

    public saveExamPaperOfRecordingTask_result() {
    }

    public saveExamPaperOfRecordingTask_result(
      boolean success,
      ArmoryUnAuthorizedException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveExamPaperOfRecordingTask_result(saveExamPaperOfRecordingTask_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new ArmoryUnAuthorizedException(other.e);
      }
    }

    public saveExamPaperOfRecordingTask_result deepCopy() {
      return new saveExamPaperOfRecordingTask_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ArmoryUnAuthorizedException getE() {
      return this.e;
    }

    public void setE(ArmoryUnAuthorizedException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ArmoryUnAuthorizedException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveExamPaperOfRecordingTask_result)
        return this.equals((saveExamPaperOfRecordingTask_result)that);
      return false;
    }

    public boolean equals(saveExamPaperOfRecordingTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveExamPaperOfRecordingTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveExamPaperOfRecordingTask_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveExamPaperOfRecordingTask_resultStandardSchemeFactory implements SchemeFactory {
      public saveExamPaperOfRecordingTask_resultStandardScheme getScheme() {
        return new saveExamPaperOfRecordingTask_resultStandardScheme();
      }
    }

    private static class saveExamPaperOfRecordingTask_resultStandardScheme extends StandardScheme<saveExamPaperOfRecordingTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveExamPaperOfRecordingTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ArmoryUnAuthorizedException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveExamPaperOfRecordingTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveExamPaperOfRecordingTask_resultTupleSchemeFactory implements SchemeFactory {
      public saveExamPaperOfRecordingTask_resultTupleScheme getScheme() {
        return new saveExamPaperOfRecordingTask_resultTupleScheme();
      }
    }

    private static class saveExamPaperOfRecordingTask_resultTupleScheme extends TupleScheme<saveExamPaperOfRecordingTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveExamPaperOfRecordingTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveExamPaperOfRecordingTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ArmoryUnAuthorizedException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class removeExamPaperFromRecordingTask_args implements org.apache.thrift.TBase<removeExamPaperFromRecordingTask_args, removeExamPaperFromRecordingTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeExamPaperFromRecordingTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeExamPaperFromRecordingTask_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeExamPaperFromRecordingTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeExamPaperFromRecordingTask_argsTupleSchemeFactory());
    }

    private UnbindExamPaperReq request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnbindExamPaperReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeExamPaperFromRecordingTask_args.class, metaDataMap);
    }

    public removeExamPaperFromRecordingTask_args() {
    }

    public removeExamPaperFromRecordingTask_args(
      UnbindExamPaperReq request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeExamPaperFromRecordingTask_args(removeExamPaperFromRecordingTask_args other) {
      if (other.isSetRequest()) {
        this.request = new UnbindExamPaperReq(other.request);
      }
    }

    public removeExamPaperFromRecordingTask_args deepCopy() {
      return new removeExamPaperFromRecordingTask_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
    }

    public UnbindExamPaperReq getRequest() {
      return this.request;
    }

    public void setRequest(UnbindExamPaperReq request) {
      this.request = request;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((UnbindExamPaperReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeExamPaperFromRecordingTask_args)
        return this.equals((removeExamPaperFromRecordingTask_args)that);
      return false;
    }

    public boolean equals(removeExamPaperFromRecordingTask_args that) {
      if (that == null)
        return false;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_request = true && (isSetRequest());
      list.add(present_request);
      if (present_request)
        list.add(request);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeExamPaperFromRecordingTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeExamPaperFromRecordingTask_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeExamPaperFromRecordingTask_argsStandardSchemeFactory implements SchemeFactory {
      public removeExamPaperFromRecordingTask_argsStandardScheme getScheme() {
        return new removeExamPaperFromRecordingTask_argsStandardScheme();
      }
    }

    private static class removeExamPaperFromRecordingTask_argsStandardScheme extends StandardScheme<removeExamPaperFromRecordingTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeExamPaperFromRecordingTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new UnbindExamPaperReq();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeExamPaperFromRecordingTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeExamPaperFromRecordingTask_argsTupleSchemeFactory implements SchemeFactory {
      public removeExamPaperFromRecordingTask_argsTupleScheme getScheme() {
        return new removeExamPaperFromRecordingTask_argsTupleScheme();
      }
    }

    private static class removeExamPaperFromRecordingTask_argsTupleScheme extends TupleScheme<removeExamPaperFromRecordingTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeExamPaperFromRecordingTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeExamPaperFromRecordingTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.request = new UnbindExamPaperReq();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

  }

  public static class removeExamPaperFromRecordingTask_result implements org.apache.thrift.TBase<removeExamPaperFromRecordingTask_result, removeExamPaperFromRecordingTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeExamPaperFromRecordingTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeExamPaperFromRecordingTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeExamPaperFromRecordingTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeExamPaperFromRecordingTask_resultTupleSchemeFactory());
    }

    private boolean success; // required
    private ArmoryUnAuthorizedException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeExamPaperFromRecordingTask_result.class, metaDataMap);
    }

    public removeExamPaperFromRecordingTask_result() {
    }

    public removeExamPaperFromRecordingTask_result(
      boolean success,
      ArmoryUnAuthorizedException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeExamPaperFromRecordingTask_result(removeExamPaperFromRecordingTask_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new ArmoryUnAuthorizedException(other.e);
      }
    }

    public removeExamPaperFromRecordingTask_result deepCopy() {
      return new removeExamPaperFromRecordingTask_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ArmoryUnAuthorizedException getE() {
      return this.e;
    }

    public void setE(ArmoryUnAuthorizedException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ArmoryUnAuthorizedException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeExamPaperFromRecordingTask_result)
        return this.equals((removeExamPaperFromRecordingTask_result)that);
      return false;
    }

    public boolean equals(removeExamPaperFromRecordingTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeExamPaperFromRecordingTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeExamPaperFromRecordingTask_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeExamPaperFromRecordingTask_resultStandardSchemeFactory implements SchemeFactory {
      public removeExamPaperFromRecordingTask_resultStandardScheme getScheme() {
        return new removeExamPaperFromRecordingTask_resultStandardScheme();
      }
    }

    private static class removeExamPaperFromRecordingTask_resultStandardScheme extends StandardScheme<removeExamPaperFromRecordingTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeExamPaperFromRecordingTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ArmoryUnAuthorizedException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeExamPaperFromRecordingTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeExamPaperFromRecordingTask_resultTupleSchemeFactory implements SchemeFactory {
      public removeExamPaperFromRecordingTask_resultTupleScheme getScheme() {
        return new removeExamPaperFromRecordingTask_resultTupleScheme();
      }
    }

    private static class removeExamPaperFromRecordingTask_resultTupleScheme extends TupleScheme<removeExamPaperFromRecordingTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeExamPaperFromRecordingTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeExamPaperFromRecordingTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ArmoryUnAuthorizedException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getRecordingApplicationDetails_args implements org.apache.thrift.TBase<getRecordingApplicationDetails_args, getRecordingApplicationDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRecordingApplicationDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecordingApplicationDetails_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecordingApplicationDetails_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecordingApplicationDetails_argsTupleSchemeFactory());
    }

    private List<Long> ids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecordingApplicationDetails_args.class, metaDataMap);
    }

    public getRecordingApplicationDetails_args() {
    }

    public getRecordingApplicationDetails_args(
      List<Long> ids)
    {
      this();
      this.ids = ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecordingApplicationDetails_args(getRecordingApplicationDetails_args other) {
      if (other.isSetIds()) {
        List<Long> __this__ids = new ArrayList<Long>(other.ids);
        this.ids = __this__ids;
      }
    }

    public getRecordingApplicationDetails_args deepCopy() {
      return new getRecordingApplicationDetails_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<Long> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(long elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<Long>();
      }
      this.ids.add(elem);
    }

    public List<Long> getIds() {
      return this.ids;
    }

    public void setIds(List<Long> ids) {
      this.ids = ids;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecordingApplicationDetails_args)
        return this.equals((getRecordingApplicationDetails_args)that);
      return false;
    }

    public boolean equals(getRecordingApplicationDetails_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ids = true && (isSetIds());
      list.add(present_ids);
      if (present_ids)
        list.add(ids);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRecordingApplicationDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecordingApplicationDetails_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecordingApplicationDetails_argsStandardSchemeFactory implements SchemeFactory {
      public getRecordingApplicationDetails_argsStandardScheme getScheme() {
        return new getRecordingApplicationDetails_argsStandardScheme();
      }
    }

    private static class getRecordingApplicationDetails_argsStandardScheme extends StandardScheme<getRecordingApplicationDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecordingApplicationDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list130 = iprot.readListBegin();
                  struct.ids = new ArrayList<Long>(_list130.size);
                  long _elem131;
                  for (int _i132 = 0; _i132 < _list130.size; ++_i132)
                  {
                    _elem131 = iprot.readI64();
                    struct.ids.add(_elem131);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecordingApplicationDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ids.size()));
            for (long _iter133 : struct.ids)
            {
              oprot.writeI64(_iter133);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecordingApplicationDetails_argsTupleSchemeFactory implements SchemeFactory {
      public getRecordingApplicationDetails_argsTupleScheme getScheme() {
        return new getRecordingApplicationDetails_argsTupleScheme();
      }
    }

    private static class getRecordingApplicationDetails_argsTupleScheme extends TupleScheme<getRecordingApplicationDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecordingApplicationDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (long _iter134 : struct.ids)
            {
              oprot.writeI64(_iter134);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecordingApplicationDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list135 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.ids = new ArrayList<Long>(_list135.size);
            long _elem136;
            for (int _i137 = 0; _i137 < _list135.size; ++_i137)
            {
              _elem136 = iprot.readI64();
              struct.ids.add(_elem136);
            }
          }
          struct.setIdsIsSet(true);
        }
      }
    }

  }

  public static class getRecordingApplicationDetails_result implements org.apache.thrift.TBase<getRecordingApplicationDetails_result, getRecordingApplicationDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRecordingApplicationDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecordingApplicationDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecordingApplicationDetails_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecordingApplicationDetails_resultTupleSchemeFactory());
    }

    private Map<Long,RecordingApplicationDetail> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64),
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RecordingApplicationDetail.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecordingApplicationDetails_result.class, metaDataMap);
    }

    public getRecordingApplicationDetails_result() {
    }

    public getRecordingApplicationDetails_result(
      Map<Long,RecordingApplicationDetail> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecordingApplicationDetails_result(getRecordingApplicationDetails_result other) {
      if (other.isSetSuccess()) {
        Map<Long,RecordingApplicationDetail> __this__success = new HashMap<Long,RecordingApplicationDetail>(other.success.size());
        for (Map.Entry<Long, RecordingApplicationDetail> other_element : other.success.entrySet()) {

          Long other_element_key = other_element.getKey();
          RecordingApplicationDetail other_element_value = other_element.getValue();

          Long __this__success_copy_key = other_element_key;

          RecordingApplicationDetail __this__success_copy_value = new RecordingApplicationDetail(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getRecordingApplicationDetails_result deepCopy() {
      return new getRecordingApplicationDetails_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(long key, RecordingApplicationDetail val) {
      if (this.success == null) {
        this.success = new HashMap<Long,RecordingApplicationDetail>();
      }
      this.success.put(key, val);
    }

    public Map<Long,RecordingApplicationDetail> getSuccess() {
      return this.success;
    }

    public void setSuccess(Map<Long,RecordingApplicationDetail> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<Long,RecordingApplicationDetail>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecordingApplicationDetails_result)
        return this.equals((getRecordingApplicationDetails_result)that);
      return false;
    }

    public boolean equals(getRecordingApplicationDetails_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRecordingApplicationDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecordingApplicationDetails_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecordingApplicationDetails_resultStandardSchemeFactory implements SchemeFactory {
      public getRecordingApplicationDetails_resultStandardScheme getScheme() {
        return new getRecordingApplicationDetails_resultStandardScheme();
      }
    }

    private static class getRecordingApplicationDetails_resultStandardScheme extends StandardScheme<getRecordingApplicationDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecordingApplicationDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map138 = iprot.readMapBegin();
                  struct.success = new HashMap<Long,RecordingApplicationDetail>(2*_map138.size);
                  long _key139;
                  RecordingApplicationDetail _val140;
                  for (int _i141 = 0; _i141 < _map138.size; ++_i141)
                  {
                    _key139 = iprot.readI64();
                    _val140 = new RecordingApplicationDetail();
                    _val140.read(iprot);
                    struct.success.put(_key139, _val140);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecordingApplicationDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<Long, RecordingApplicationDetail> _iter142 : struct.success.entrySet())
            {
              oprot.writeI64(_iter142.getKey());
              _iter142.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecordingApplicationDetails_resultTupleSchemeFactory implements SchemeFactory {
      public getRecordingApplicationDetails_resultTupleScheme getScheme() {
        return new getRecordingApplicationDetails_resultTupleScheme();
      }
    }

    private static class getRecordingApplicationDetails_resultTupleScheme extends TupleScheme<getRecordingApplicationDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecordingApplicationDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<Long, RecordingApplicationDetail> _iter143 : struct.success.entrySet())
            {
              oprot.writeI64(_iter143.getKey());
              _iter143.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecordingApplicationDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map144 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<Long,RecordingApplicationDetail>(2*_map144.size);
            long _key145;
            RecordingApplicationDetail _val146;
            for (int _i147 = 0; _i147 < _map144.size; ++_i147)
            {
              _key145 = iprot.readI64();
              _val146 = new RecordingApplicationDetail();
              _val146.read(iprot);
              struct.success.put(_key145, _val146);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class bindQuestion2RecordingTask_args implements org.apache.thrift.TBase<bindQuestion2RecordingTask_args, bindQuestion2RecordingTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<bindQuestion2RecordingTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bindQuestion2RecordingTask_args");

    private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("req", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bindQuestion2RecordingTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bindQuestion2RecordingTask_argsTupleSchemeFactory());
    }

    private BindQuestionReq req; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ((short)1, "req");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ
            return REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ, new org.apache.thrift.meta_data.FieldMetaData("req", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BindQuestionReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bindQuestion2RecordingTask_args.class, metaDataMap);
    }

    public bindQuestion2RecordingTask_args() {
    }

    public bindQuestion2RecordingTask_args(
      BindQuestionReq req)
    {
      this();
      this.req = req;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bindQuestion2RecordingTask_args(bindQuestion2RecordingTask_args other) {
      if (other.isSetReq()) {
        this.req = new BindQuestionReq(other.req);
      }
    }

    public bindQuestion2RecordingTask_args deepCopy() {
      return new bindQuestion2RecordingTask_args(this);
    }

    @Override
    public void clear() {
      this.req = null;
    }

    public BindQuestionReq getReq() {
      return this.req;
    }

    public void setReq(BindQuestionReq req) {
      this.req = req;
    }

    public void unsetReq() {
      this.req = null;
    }

    /** Returns true if field req is set (has been assigned a value) and false otherwise */
    public boolean isSetReq() {
      return this.req != null;
    }

    public void setReqIsSet(boolean value) {
      if (!value) {
        this.req = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ:
        if (value == null) {
          unsetReq();
        } else {
          setReq((BindQuestionReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ:
        return getReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ:
        return isSetReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bindQuestion2RecordingTask_args)
        return this.equals((bindQuestion2RecordingTask_args)that);
      return false;
    }

    public boolean equals(bindQuestion2RecordingTask_args that) {
      if (that == null)
        return false;

      boolean this_present_req = true && this.isSetReq();
      boolean that_present_req = true && that.isSetReq();
      if (this_present_req || that_present_req) {
        if (!(this_present_req && that_present_req))
          return false;
        if (!this.req.equals(that.req))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_req = true && (isSetReq());
      list.add(present_req);
      if (present_req)
        list.add(req);

      return list.hashCode();
    }

    @Override
    public int compareTo(bindQuestion2RecordingTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReq()).compareTo(other.isSetReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.req, other.req);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bindQuestion2RecordingTask_args(");
      boolean first = true;

      sb.append("req:");
      if (this.req == null) {
        sb.append("null");
      } else {
        sb.append(this.req);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (req != null) {
        req.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bindQuestion2RecordingTask_argsStandardSchemeFactory implements SchemeFactory {
      public bindQuestion2RecordingTask_argsStandardScheme getScheme() {
        return new bindQuestion2RecordingTask_argsStandardScheme();
      }
    }

    private static class bindQuestion2RecordingTask_argsStandardScheme extends StandardScheme<bindQuestion2RecordingTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bindQuestion2RecordingTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.req = new BindQuestionReq();
                struct.req.read(iprot);
                struct.setReqIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bindQuestion2RecordingTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.req != null) {
          oprot.writeFieldBegin(REQ_FIELD_DESC);
          struct.req.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bindQuestion2RecordingTask_argsTupleSchemeFactory implements SchemeFactory {
      public bindQuestion2RecordingTask_argsTupleScheme getScheme() {
        return new bindQuestion2RecordingTask_argsTupleScheme();
      }
    }

    private static class bindQuestion2RecordingTask_argsTupleScheme extends TupleScheme<bindQuestion2RecordingTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bindQuestion2RecordingTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReq()) {
          struct.req.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bindQuestion2RecordingTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.req = new BindQuestionReq();
          struct.req.read(iprot);
          struct.setReqIsSet(true);
        }
      }
    }

  }

  public static class bindQuestion2RecordingTask_result implements org.apache.thrift.TBase<bindQuestion2RecordingTask_result, bindQuestion2RecordingTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<bindQuestion2RecordingTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bindQuestion2RecordingTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bindQuestion2RecordingTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bindQuestion2RecordingTask_resultTupleSchemeFactory());
    }

    private boolean success; // required
    private ArmoryBadRequestException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bindQuestion2RecordingTask_result.class, metaDataMap);
    }

    public bindQuestion2RecordingTask_result() {
    }

    public bindQuestion2RecordingTask_result(
      boolean success,
      ArmoryBadRequestException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bindQuestion2RecordingTask_result(bindQuestion2RecordingTask_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new ArmoryBadRequestException(other.e);
      }
    }

    public bindQuestion2RecordingTask_result deepCopy() {
      return new bindQuestion2RecordingTask_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ArmoryBadRequestException getE() {
      return this.e;
    }

    public void setE(ArmoryBadRequestException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ArmoryBadRequestException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bindQuestion2RecordingTask_result)
        return this.equals((bindQuestion2RecordingTask_result)that);
      return false;
    }

    public boolean equals(bindQuestion2RecordingTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(bindQuestion2RecordingTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bindQuestion2RecordingTask_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bindQuestion2RecordingTask_resultStandardSchemeFactory implements SchemeFactory {
      public bindQuestion2RecordingTask_resultStandardScheme getScheme() {
        return new bindQuestion2RecordingTask_resultStandardScheme();
      }
    }

    private static class bindQuestion2RecordingTask_resultStandardScheme extends StandardScheme<bindQuestion2RecordingTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bindQuestion2RecordingTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ArmoryBadRequestException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bindQuestion2RecordingTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bindQuestion2RecordingTask_resultTupleSchemeFactory implements SchemeFactory {
      public bindQuestion2RecordingTask_resultTupleScheme getScheme() {
        return new bindQuestion2RecordingTask_resultTupleScheme();
      }
    }

    private static class bindQuestion2RecordingTask_resultTupleScheme extends TupleScheme<bindQuestion2RecordingTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bindQuestion2RecordingTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bindQuestion2RecordingTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ArmoryBadRequestException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class updateQuestionRecordingTaskSnapshots_args implements org.apache.thrift.TBase<updateQuestionRecordingTaskSnapshots_args, updateQuestionRecordingTaskSnapshots_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateQuestionRecordingTaskSnapshots_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateQuestionRecordingTaskSnapshots_args");

    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField EXAM_PAPER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("examPaperId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField QUESTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("questionId", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField SNAPSHOTS_FIELD_DESC = new org.apache.thrift.protocol.TField("snapshots", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateQuestionRecordingTaskSnapshots_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateQuestionRecordingTaskSnapshots_argsTupleSchemeFactory());
    }

    private long taskId; // required
    private long examPaperId; // required
    private int questionId; // required
    private List<String> snapshots; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK_ID((short)1, "taskId"),
      EXAM_PAPER_ID((short)2, "examPaperId"),
      QUESTION_ID((short)3, "questionId"),
      SNAPSHOTS((short)4, "snapshots");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_ID
            return TASK_ID;
          case 2: // EXAM_PAPER_ID
            return EXAM_PAPER_ID;
          case 3: // QUESTION_ID
            return QUESTION_ID;
          case 4: // SNAPSHOTS
            return SNAPSHOTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TASKID_ISSET_ID = 0;
    private static final int __EXAMPAPERID_ISSET_ID = 1;
    private static final int __QUESTIONID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EXAM_PAPER_ID, new org.apache.thrift.meta_data.FieldMetaData("examPaperId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.QUESTION_ID, new org.apache.thrift.meta_data.FieldMetaData("questionId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SNAPSHOTS, new org.apache.thrift.meta_data.FieldMetaData("snapshots", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateQuestionRecordingTaskSnapshots_args.class, metaDataMap);
    }

    public updateQuestionRecordingTaskSnapshots_args() {
    }

    public updateQuestionRecordingTaskSnapshots_args(
      long taskId,
      long examPaperId,
      int questionId,
      List<String> snapshots)
    {
      this();
      this.taskId = taskId;
      setTaskIdIsSet(true);
      this.examPaperId = examPaperId;
      setExamPaperIdIsSet(true);
      this.questionId = questionId;
      setQuestionIdIsSet(true);
      this.snapshots = snapshots;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateQuestionRecordingTaskSnapshots_args(updateQuestionRecordingTaskSnapshots_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.taskId = other.taskId;
      this.examPaperId = other.examPaperId;
      this.questionId = other.questionId;
      if (other.isSetSnapshots()) {
        List<String> __this__snapshots = new ArrayList<String>(other.snapshots);
        this.snapshots = __this__snapshots;
      }
    }

    public updateQuestionRecordingTaskSnapshots_args deepCopy() {
      return new updateQuestionRecordingTaskSnapshots_args(this);
    }

    @Override
    public void clear() {
      setTaskIdIsSet(false);
      this.taskId = 0;
      setExamPaperIdIsSet(false);
      this.examPaperId = 0;
      setQuestionIdIsSet(false);
      this.questionId = 0;
      this.snapshots = null;
    }

    public long getTaskId() {
      return this.taskId;
    }

    public void setTaskId(long taskId) {
      this.taskId = taskId;
      setTaskIdIsSet(true);
    }

    public void unsetTaskId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskId() {
      return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    public void setTaskIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
    }

    public long getExamPaperId() {
      return this.examPaperId;
    }

    public void setExamPaperId(long examPaperId) {
      this.examPaperId = examPaperId;
      setExamPaperIdIsSet(true);
    }

    public void unsetExamPaperId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXAMPAPERID_ISSET_ID);
    }

    /** Returns true if field examPaperId is set (has been assigned a value) and false otherwise */
    public boolean isSetExamPaperId() {
      return EncodingUtils.testBit(__isset_bitfield, __EXAMPAPERID_ISSET_ID);
    }

    public void setExamPaperIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXAMPAPERID_ISSET_ID, value);
    }

    public int getQuestionId() {
      return this.questionId;
    }

    public void setQuestionId(int questionId) {
      this.questionId = questionId;
      setQuestionIdIsSet(true);
    }

    public void unsetQuestionId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUESTIONID_ISSET_ID);
    }

    /** Returns true if field questionId is set (has been assigned a value) and false otherwise */
    public boolean isSetQuestionId() {
      return EncodingUtils.testBit(__isset_bitfield, __QUESTIONID_ISSET_ID);
    }

    public void setQuestionIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUESTIONID_ISSET_ID, value);
    }

    public int getSnapshotsSize() {
      return (this.snapshots == null) ? 0 : this.snapshots.size();
    }

    public java.util.Iterator<String> getSnapshotsIterator() {
      return (this.snapshots == null) ? null : this.snapshots.iterator();
    }

    public void addToSnapshots(String elem) {
      if (this.snapshots == null) {
        this.snapshots = new ArrayList<String>();
      }
      this.snapshots.add(elem);
    }

    public List<String> getSnapshots() {
      return this.snapshots;
    }

    public void setSnapshots(List<String> snapshots) {
      this.snapshots = snapshots;
    }

    public void unsetSnapshots() {
      this.snapshots = null;
    }

    /** Returns true if field snapshots is set (has been assigned a value) and false otherwise */
    public boolean isSetSnapshots() {
      return this.snapshots != null;
    }

    public void setSnapshotsIsSet(boolean value) {
      if (!value) {
        this.snapshots = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK_ID:
        if (value == null) {
          unsetTaskId();
        } else {
          setTaskId((Long)value);
        }
        break;

      case EXAM_PAPER_ID:
        if (value == null) {
          unsetExamPaperId();
        } else {
          setExamPaperId((Long)value);
        }
        break;

      case QUESTION_ID:
        if (value == null) {
          unsetQuestionId();
        } else {
          setQuestionId((Integer)value);
        }
        break;

      case SNAPSHOTS:
        if (value == null) {
          unsetSnapshots();
        } else {
          setSnapshots((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_ID:
        return getTaskId();

      case EXAM_PAPER_ID:
        return getExamPaperId();

      case QUESTION_ID:
        return getQuestionId();

      case SNAPSHOTS:
        return getSnapshots();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK_ID:
        return isSetTaskId();
      case EXAM_PAPER_ID:
        return isSetExamPaperId();
      case QUESTION_ID:
        return isSetQuestionId();
      case SNAPSHOTS:
        return isSetSnapshots();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateQuestionRecordingTaskSnapshots_args)
        return this.equals((updateQuestionRecordingTaskSnapshots_args)that);
      return false;
    }

    public boolean equals(updateQuestionRecordingTaskSnapshots_args that) {
      if (that == null)
        return false;

      boolean this_present_taskId = true;
      boolean that_present_taskId = true;
      if (this_present_taskId || that_present_taskId) {
        if (!(this_present_taskId && that_present_taskId))
          return false;
        if (this.taskId != that.taskId)
          return false;
      }

      boolean this_present_examPaperId = true;
      boolean that_present_examPaperId = true;
      if (this_present_examPaperId || that_present_examPaperId) {
        if (!(this_present_examPaperId && that_present_examPaperId))
          return false;
        if (this.examPaperId != that.examPaperId)
          return false;
      }

      boolean this_present_questionId = true;
      boolean that_present_questionId = true;
      if (this_present_questionId || that_present_questionId) {
        if (!(this_present_questionId && that_present_questionId))
          return false;
        if (this.questionId != that.questionId)
          return false;
      }

      boolean this_present_snapshots = true && this.isSetSnapshots();
      boolean that_present_snapshots = true && that.isSetSnapshots();
      if (this_present_snapshots || that_present_snapshots) {
        if (!(this_present_snapshots && that_present_snapshots))
          return false;
        if (!this.snapshots.equals(that.snapshots))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_taskId = true;
      list.add(present_taskId);
      if (present_taskId)
        list.add(taskId);

      boolean present_examPaperId = true;
      list.add(present_examPaperId);
      if (present_examPaperId)
        list.add(examPaperId);

      boolean present_questionId = true;
      list.add(present_questionId);
      if (present_questionId)
        list.add(questionId);

      boolean present_snapshots = true && (isSetSnapshots());
      list.add(present_snapshots);
      if (present_snapshots)
        list.add(snapshots);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateQuestionRecordingTaskSnapshots_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExamPaperId()).compareTo(other.isSetExamPaperId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExamPaperId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.examPaperId, other.examPaperId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQuestionId()).compareTo(other.isSetQuestionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuestionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionId, other.questionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSnapshots()).compareTo(other.isSetSnapshots());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSnapshots()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snapshots, other.snapshots);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateQuestionRecordingTaskSnapshots_args(");
      boolean first = true;

      sb.append("taskId:");
      sb.append(this.taskId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("examPaperId:");
      sb.append(this.examPaperId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("questionId:");
      sb.append(this.questionId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("snapshots:");
      if (this.snapshots == null) {
        sb.append("null");
      } else {
        sb.append(this.snapshots);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateQuestionRecordingTaskSnapshots_argsStandardSchemeFactory implements SchemeFactory {
      public updateQuestionRecordingTaskSnapshots_argsStandardScheme getScheme() {
        return new updateQuestionRecordingTaskSnapshots_argsStandardScheme();
      }
    }

    private static class updateQuestionRecordingTaskSnapshots_argsStandardScheme extends StandardScheme<updateQuestionRecordingTaskSnapshots_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateQuestionRecordingTaskSnapshots_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.taskId = iprot.readI64();
                struct.setTaskIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXAM_PAPER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.examPaperId = iprot.readI64();
                struct.setExamPaperIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // QUESTION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.questionId = iprot.readI32();
                struct.setQuestionIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SNAPSHOTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list148 = iprot.readListBegin();
                  struct.snapshots = new ArrayList<String>(_list148.size);
                  String _elem149;
                  for (int _i150 = 0; _i150 < _list148.size; ++_i150)
                  {
                    _elem149 = iprot.readString();
                    struct.snapshots.add(_elem149);
                  }
                  iprot.readListEnd();
                }
                struct.setSnapshotsIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateQuestionRecordingTaskSnapshots_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeI64(struct.taskId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(EXAM_PAPER_ID_FIELD_DESC);
        oprot.writeI64(struct.examPaperId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(QUESTION_ID_FIELD_DESC);
        oprot.writeI32(struct.questionId);
        oprot.writeFieldEnd();
        if (struct.snapshots != null) {
          oprot.writeFieldBegin(SNAPSHOTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.snapshots.size()));
            for (String _iter151 : struct.snapshots)
            {
              oprot.writeString(_iter151);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateQuestionRecordingTaskSnapshots_argsTupleSchemeFactory implements SchemeFactory {
      public updateQuestionRecordingTaskSnapshots_argsTupleScheme getScheme() {
        return new updateQuestionRecordingTaskSnapshots_argsTupleScheme();
      }
    }

    private static class updateQuestionRecordingTaskSnapshots_argsTupleScheme extends TupleScheme<updateQuestionRecordingTaskSnapshots_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateQuestionRecordingTaskSnapshots_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTaskId()) {
          optionals.set(0);
        }
        if (struct.isSetExamPaperId()) {
          optionals.set(1);
        }
        if (struct.isSetQuestionId()) {
          optionals.set(2);
        }
        if (struct.isSetSnapshots()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetTaskId()) {
          oprot.writeI64(struct.taskId);
        }
        if (struct.isSetExamPaperId()) {
          oprot.writeI64(struct.examPaperId);
        }
        if (struct.isSetQuestionId()) {
          oprot.writeI32(struct.questionId);
        }
        if (struct.isSetSnapshots()) {
          {
            oprot.writeI32(struct.snapshots.size());
            for (String _iter152 : struct.snapshots)
            {
              oprot.writeString(_iter152);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateQuestionRecordingTaskSnapshots_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.taskId = iprot.readI64();
          struct.setTaskIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.examPaperId = iprot.readI64();
          struct.setExamPaperIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.questionId = iprot.readI32();
          struct.setQuestionIdIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list153 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.snapshots = new ArrayList<String>(_list153.size);
            String _elem154;
            for (int _i155 = 0; _i155 < _list153.size; ++_i155)
            {
              _elem154 = iprot.readString();
              struct.snapshots.add(_elem154);
            }
          }
          struct.setSnapshotsIsSet(true);
        }
      }
    }

  }

  public static class updateQuestionRecordingTaskSnapshots_result implements org.apache.thrift.TBase<updateQuestionRecordingTaskSnapshots_result, updateQuestionRecordingTaskSnapshots_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateQuestionRecordingTaskSnapshots_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateQuestionRecordingTaskSnapshots_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateQuestionRecordingTaskSnapshots_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateQuestionRecordingTaskSnapshots_resultTupleSchemeFactory());
    }

    private boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateQuestionRecordingTaskSnapshots_result.class, metaDataMap);
    }

    public updateQuestionRecordingTaskSnapshots_result() {
    }

    public updateQuestionRecordingTaskSnapshots_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateQuestionRecordingTaskSnapshots_result(updateQuestionRecordingTaskSnapshots_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateQuestionRecordingTaskSnapshots_result deepCopy() {
      return new updateQuestionRecordingTaskSnapshots_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateQuestionRecordingTaskSnapshots_result)
        return this.equals((updateQuestionRecordingTaskSnapshots_result)that);
      return false;
    }

    public boolean equals(updateQuestionRecordingTaskSnapshots_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateQuestionRecordingTaskSnapshots_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateQuestionRecordingTaskSnapshots_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateQuestionRecordingTaskSnapshots_resultStandardSchemeFactory implements SchemeFactory {
      public updateQuestionRecordingTaskSnapshots_resultStandardScheme getScheme() {
        return new updateQuestionRecordingTaskSnapshots_resultStandardScheme();
      }
    }

    private static class updateQuestionRecordingTaskSnapshots_resultStandardScheme extends StandardScheme<updateQuestionRecordingTaskSnapshots_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateQuestionRecordingTaskSnapshots_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateQuestionRecordingTaskSnapshots_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateQuestionRecordingTaskSnapshots_resultTupleSchemeFactory implements SchemeFactory {
      public updateQuestionRecordingTaskSnapshots_resultTupleScheme getScheme() {
        return new updateQuestionRecordingTaskSnapshots_resultTupleScheme();
      }
    }

    private static class updateQuestionRecordingTaskSnapshots_resultTupleScheme extends TupleScheme<updateQuestionRecordingTaskSnapshots_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateQuestionRecordingTaskSnapshots_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateQuestionRecordingTaskSnapshots_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class scanRecordingApplicationId_args implements org.apache.thrift.TBase<scanRecordingApplicationId_args, scanRecordingApplicationId_args._Fields>, java.io.Serializable, Cloneable, Comparable<scanRecordingApplicationId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scanRecordingApplicationId_args");

    private static final org.apache.thrift.protocol.TField CURSOR_ID_EXCLUSIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("cursorIdExclusive", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField BATCH_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("batchSize", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new scanRecordingApplicationId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new scanRecordingApplicationId_argsTupleSchemeFactory());
    }

    private long cursorIdExclusive; // required
    private int batchSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CURSOR_ID_EXCLUSIVE((short)1, "cursorIdExclusive"),
      BATCH_SIZE((short)2, "batchSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CURSOR_ID_EXCLUSIVE
            return CURSOR_ID_EXCLUSIVE;
          case 2: // BATCH_SIZE
            return BATCH_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CURSORIDEXCLUSIVE_ISSET_ID = 0;
    private static final int __BATCHSIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CURSOR_ID_EXCLUSIVE, new org.apache.thrift.meta_data.FieldMetaData("cursorIdExclusive", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.BATCH_SIZE, new org.apache.thrift.meta_data.FieldMetaData("batchSize", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scanRecordingApplicationId_args.class, metaDataMap);
    }

    public scanRecordingApplicationId_args() {
    }

    public scanRecordingApplicationId_args(
      long cursorIdExclusive,
      int batchSize)
    {
      this();
      this.cursorIdExclusive = cursorIdExclusive;
      setCursorIdExclusiveIsSet(true);
      this.batchSize = batchSize;
      setBatchSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scanRecordingApplicationId_args(scanRecordingApplicationId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cursorIdExclusive = other.cursorIdExclusive;
      this.batchSize = other.batchSize;
    }

    public scanRecordingApplicationId_args deepCopy() {
      return new scanRecordingApplicationId_args(this);
    }

    @Override
    public void clear() {
      setCursorIdExclusiveIsSet(false);
      this.cursorIdExclusive = 0;
      setBatchSizeIsSet(false);
      this.batchSize = 0;
    }

    public long getCursorIdExclusive() {
      return this.cursorIdExclusive;
    }

    public void setCursorIdExclusive(long cursorIdExclusive) {
      this.cursorIdExclusive = cursorIdExclusive;
      setCursorIdExclusiveIsSet(true);
    }

    public void unsetCursorIdExclusive() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURSORIDEXCLUSIVE_ISSET_ID);
    }

    /** Returns true if field cursorIdExclusive is set (has been assigned a value) and false otherwise */
    public boolean isSetCursorIdExclusive() {
      return EncodingUtils.testBit(__isset_bitfield, __CURSORIDEXCLUSIVE_ISSET_ID);
    }

    public void setCursorIdExclusiveIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURSORIDEXCLUSIVE_ISSET_ID, value);
    }

    public int getBatchSize() {
      return this.batchSize;
    }

    public void setBatchSize(int batchSize) {
      this.batchSize = batchSize;
      setBatchSizeIsSet(true);
    }

    public void unsetBatchSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BATCHSIZE_ISSET_ID);
    }

    /** Returns true if field batchSize is set (has been assigned a value) and false otherwise */
    public boolean isSetBatchSize() {
      return EncodingUtils.testBit(__isset_bitfield, __BATCHSIZE_ISSET_ID);
    }

    public void setBatchSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BATCHSIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CURSOR_ID_EXCLUSIVE:
        if (value == null) {
          unsetCursorIdExclusive();
        } else {
          setCursorIdExclusive((Long)value);
        }
        break;

      case BATCH_SIZE:
        if (value == null) {
          unsetBatchSize();
        } else {
          setBatchSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CURSOR_ID_EXCLUSIVE:
        return getCursorIdExclusive();

      case BATCH_SIZE:
        return getBatchSize();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CURSOR_ID_EXCLUSIVE:
        return isSetCursorIdExclusive();
      case BATCH_SIZE:
        return isSetBatchSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scanRecordingApplicationId_args)
        return this.equals((scanRecordingApplicationId_args)that);
      return false;
    }

    public boolean equals(scanRecordingApplicationId_args that) {
      if (that == null)
        return false;

      boolean this_present_cursorIdExclusive = true;
      boolean that_present_cursorIdExclusive = true;
      if (this_present_cursorIdExclusive || that_present_cursorIdExclusive) {
        if (!(this_present_cursorIdExclusive && that_present_cursorIdExclusive))
          return false;
        if (this.cursorIdExclusive != that.cursorIdExclusive)
          return false;
      }

      boolean this_present_batchSize = true;
      boolean that_present_batchSize = true;
      if (this_present_batchSize || that_present_batchSize) {
        if (!(this_present_batchSize && that_present_batchSize))
          return false;
        if (this.batchSize != that.batchSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cursorIdExclusive = true;
      list.add(present_cursorIdExclusive);
      if (present_cursorIdExclusive)
        list.add(cursorIdExclusive);

      boolean present_batchSize = true;
      list.add(present_batchSize);
      if (present_batchSize)
        list.add(batchSize);

      return list.hashCode();
    }

    @Override
    public int compareTo(scanRecordingApplicationId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCursorIdExclusive()).compareTo(other.isSetCursorIdExclusive());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCursorIdExclusive()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cursorIdExclusive, other.cursorIdExclusive);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBatchSize()).compareTo(other.isSetBatchSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBatchSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchSize, other.batchSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scanRecordingApplicationId_args(");
      boolean first = true;

      sb.append("cursorIdExclusive:");
      sb.append(this.cursorIdExclusive);
      first = false;
      if (!first) sb.append(", ");
      sb.append("batchSize:");
      sb.append(this.batchSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class scanRecordingApplicationId_argsStandardSchemeFactory implements SchemeFactory {
      public scanRecordingApplicationId_argsStandardScheme getScheme() {
        return new scanRecordingApplicationId_argsStandardScheme();
      }
    }

    private static class scanRecordingApplicationId_argsStandardScheme extends StandardScheme<scanRecordingApplicationId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, scanRecordingApplicationId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // CURSOR_ID_EXCLUSIVE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.cursorIdExclusive = iprot.readI64();
                struct.setCursorIdExclusiveIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BATCH_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.batchSize = iprot.readI32();
                struct.setBatchSizeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, scanRecordingApplicationId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CURSOR_ID_EXCLUSIVE_FIELD_DESC);
        oprot.writeI64(struct.cursorIdExclusive);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(BATCH_SIZE_FIELD_DESC);
        oprot.writeI32(struct.batchSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class scanRecordingApplicationId_argsTupleSchemeFactory implements SchemeFactory {
      public scanRecordingApplicationId_argsTupleScheme getScheme() {
        return new scanRecordingApplicationId_argsTupleScheme();
      }
    }

    private static class scanRecordingApplicationId_argsTupleScheme extends TupleScheme<scanRecordingApplicationId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, scanRecordingApplicationId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCursorIdExclusive()) {
          optionals.set(0);
        }
        if (struct.isSetBatchSize()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCursorIdExclusive()) {
          oprot.writeI64(struct.cursorIdExclusive);
        }
        if (struct.isSetBatchSize()) {
          oprot.writeI32(struct.batchSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, scanRecordingApplicationId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.cursorIdExclusive = iprot.readI64();
          struct.setCursorIdExclusiveIsSet(true);
        }
        if (incoming.get(1)) {
          struct.batchSize = iprot.readI32();
          struct.setBatchSizeIsSet(true);
        }
      }
    }

  }

  public static class scanRecordingApplicationId_result implements org.apache.thrift.TBase<scanRecordingApplicationId_result, scanRecordingApplicationId_result._Fields>, java.io.Serializable, Cloneable, Comparable<scanRecordingApplicationId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scanRecordingApplicationId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new scanRecordingApplicationId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new scanRecordingApplicationId_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scanRecordingApplicationId_result.class, metaDataMap);
    }

    public scanRecordingApplicationId_result() {
    }

    public scanRecordingApplicationId_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scanRecordingApplicationId_result(scanRecordingApplicationId_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public scanRecordingApplicationId_result deepCopy() {
      return new scanRecordingApplicationId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scanRecordingApplicationId_result)
        return this.equals((scanRecordingApplicationId_result)that);
      return false;
    }

    public boolean equals(scanRecordingApplicationId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(scanRecordingApplicationId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scanRecordingApplicationId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class scanRecordingApplicationId_resultStandardSchemeFactory implements SchemeFactory {
      public scanRecordingApplicationId_resultStandardScheme getScheme() {
        return new scanRecordingApplicationId_resultStandardScheme();
      }
    }

    private static class scanRecordingApplicationId_resultStandardScheme extends StandardScheme<scanRecordingApplicationId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, scanRecordingApplicationId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list156 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list156.size);
                  long _elem157;
                  for (int _i158 = 0; _i158 < _list156.size; ++_i158)
                  {
                    _elem157 = iprot.readI64();
                    struct.success.add(_elem157);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, scanRecordingApplicationId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter159 : struct.success)
            {
              oprot.writeI64(_iter159);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class scanRecordingApplicationId_resultTupleSchemeFactory implements SchemeFactory {
      public scanRecordingApplicationId_resultTupleScheme getScheme() {
        return new scanRecordingApplicationId_resultTupleScheme();
      }
    }

    private static class scanRecordingApplicationId_resultTupleScheme extends TupleScheme<scanRecordingApplicationId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, scanRecordingApplicationId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter160 : struct.success)
            {
              oprot.writeI64(_iter160);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, scanRecordingApplicationId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list161 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list161.size);
            long _elem162;
            for (int _i163 = 0; _i163 < _list161.size; ++_i163)
            {
              _elem162 = iprot.readI64();
              struct.success.add(_elem162);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateQuestionTagStatus_args implements org.apache.thrift.TBase<updateQuestionTagStatus_args, updateQuestionTagStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateQuestionTagStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateQuestionTagStatus_args");

    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField QUESTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("questionId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateQuestionTagStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateQuestionTagStatus_argsTupleSchemeFactory());
    }

    private long taskId; // required
    private int questionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK_ID((short)1, "taskId"),
      QUESTION_ID((short)2, "questionId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_ID
            return TASK_ID;
          case 2: // QUESTION_ID
            return QUESTION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TASKID_ISSET_ID = 0;
    private static final int __QUESTIONID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.QUESTION_ID, new org.apache.thrift.meta_data.FieldMetaData("questionId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateQuestionTagStatus_args.class, metaDataMap);
    }

    public updateQuestionTagStatus_args() {
    }

    public updateQuestionTagStatus_args(
      long taskId,
      int questionId)
    {
      this();
      this.taskId = taskId;
      setTaskIdIsSet(true);
      this.questionId = questionId;
      setQuestionIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateQuestionTagStatus_args(updateQuestionTagStatus_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.taskId = other.taskId;
      this.questionId = other.questionId;
    }

    public updateQuestionTagStatus_args deepCopy() {
      return new updateQuestionTagStatus_args(this);
    }

    @Override
    public void clear() {
      setTaskIdIsSet(false);
      this.taskId = 0;
      setQuestionIdIsSet(false);
      this.questionId = 0;
    }

    public long getTaskId() {
      return this.taskId;
    }

    public void setTaskId(long taskId) {
      this.taskId = taskId;
      setTaskIdIsSet(true);
    }

    public void unsetTaskId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskId() {
      return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    public void setTaskIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
    }

    public int getQuestionId() {
      return this.questionId;
    }

    public void setQuestionId(int questionId) {
      this.questionId = questionId;
      setQuestionIdIsSet(true);
    }

    public void unsetQuestionId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUESTIONID_ISSET_ID);
    }

    /** Returns true if field questionId is set (has been assigned a value) and false otherwise */
    public boolean isSetQuestionId() {
      return EncodingUtils.testBit(__isset_bitfield, __QUESTIONID_ISSET_ID);
    }

    public void setQuestionIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUESTIONID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK_ID:
        if (value == null) {
          unsetTaskId();
        } else {
          setTaskId((Long)value);
        }
        break;

      case QUESTION_ID:
        if (value == null) {
          unsetQuestionId();
        } else {
          setQuestionId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_ID:
        return getTaskId();

      case QUESTION_ID:
        return getQuestionId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK_ID:
        return isSetTaskId();
      case QUESTION_ID:
        return isSetQuestionId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateQuestionTagStatus_args)
        return this.equals((updateQuestionTagStatus_args)that);
      return false;
    }

    public boolean equals(updateQuestionTagStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_taskId = true;
      boolean that_present_taskId = true;
      if (this_present_taskId || that_present_taskId) {
        if (!(this_present_taskId && that_present_taskId))
          return false;
        if (this.taskId != that.taskId)
          return false;
      }

      boolean this_present_questionId = true;
      boolean that_present_questionId = true;
      if (this_present_questionId || that_present_questionId) {
        if (!(this_present_questionId && that_present_questionId))
          return false;
        if (this.questionId != that.questionId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_taskId = true;
      list.add(present_taskId);
      if (present_taskId)
        list.add(taskId);

      boolean present_questionId = true;
      list.add(present_questionId);
      if (present_questionId)
        list.add(questionId);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateQuestionTagStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQuestionId()).compareTo(other.isSetQuestionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuestionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionId, other.questionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateQuestionTagStatus_args(");
      boolean first = true;

      sb.append("taskId:");
      sb.append(this.taskId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("questionId:");
      sb.append(this.questionId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateQuestionTagStatus_argsStandardSchemeFactory implements SchemeFactory {
      public updateQuestionTagStatus_argsStandardScheme getScheme() {
        return new updateQuestionTagStatus_argsStandardScheme();
      }
    }

    private static class updateQuestionTagStatus_argsStandardScheme extends StandardScheme<updateQuestionTagStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateQuestionTagStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.taskId = iprot.readI64();
                struct.setTaskIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QUESTION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.questionId = iprot.readI32();
                struct.setQuestionIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateQuestionTagStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeI64(struct.taskId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(QUESTION_ID_FIELD_DESC);
        oprot.writeI32(struct.questionId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateQuestionTagStatus_argsTupleSchemeFactory implements SchemeFactory {
      public updateQuestionTagStatus_argsTupleScheme getScheme() {
        return new updateQuestionTagStatus_argsTupleScheme();
      }
    }

    private static class updateQuestionTagStatus_argsTupleScheme extends TupleScheme<updateQuestionTagStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateQuestionTagStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTaskId()) {
          optionals.set(0);
        }
        if (struct.isSetQuestionId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTaskId()) {
          oprot.writeI64(struct.taskId);
        }
        if (struct.isSetQuestionId()) {
          oprot.writeI32(struct.questionId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateQuestionTagStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.taskId = iprot.readI64();
          struct.setTaskIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.questionId = iprot.readI32();
          struct.setQuestionIdIsSet(true);
        }
      }
    }

  }

  public static class updateQuestionTagStatus_result implements org.apache.thrift.TBase<updateQuestionTagStatus_result, updateQuestionTagStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateQuestionTagStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateQuestionTagStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateQuestionTagStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateQuestionTagStatus_resultTupleSchemeFactory());
    }

    private boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateQuestionTagStatus_result.class, metaDataMap);
    }

    public updateQuestionTagStatus_result() {
    }

    public updateQuestionTagStatus_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateQuestionTagStatus_result(updateQuestionTagStatus_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateQuestionTagStatus_result deepCopy() {
      return new updateQuestionTagStatus_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateQuestionTagStatus_result)
        return this.equals((updateQuestionTagStatus_result)that);
      return false;
    }

    public boolean equals(updateQuestionTagStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateQuestionTagStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateQuestionTagStatus_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateQuestionTagStatus_resultStandardSchemeFactory implements SchemeFactory {
      public updateQuestionTagStatus_resultStandardScheme getScheme() {
        return new updateQuestionTagStatus_resultStandardScheme();
      }
    }

    private static class updateQuestionTagStatus_resultStandardScheme extends StandardScheme<updateQuestionTagStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateQuestionTagStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateQuestionTagStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateQuestionTagStatus_resultTupleSchemeFactory implements SchemeFactory {
      public updateQuestionTagStatus_resultTupleScheme getScheme() {
        return new updateQuestionTagStatus_resultTupleScheme();
      }
    }

    private static class updateQuestionTagStatus_resultTupleScheme extends TupleScheme<updateQuestionTagStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateQuestionTagStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateQuestionTagStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args implements org.apache.thrift.TBase<updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args, updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args");

    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField QUESTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("questionId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField EXAM_PAPER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("examPaperId", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_argsTupleSchemeFactory());
    }

    private long taskId; // required
    private int questionId; // required
    private long examPaperId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK_ID((short)1, "taskId"),
      QUESTION_ID((short)2, "questionId"),
      EXAM_PAPER_ID((short)3, "examPaperId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_ID
            return TASK_ID;
          case 2: // QUESTION_ID
            return QUESTION_ID;
          case 3: // EXAM_PAPER_ID
            return EXAM_PAPER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TASKID_ISSET_ID = 0;
    private static final int __QUESTIONID_ISSET_ID = 1;
    private static final int __EXAMPAPERID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.QUESTION_ID, new org.apache.thrift.meta_data.FieldMetaData("questionId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EXAM_PAPER_ID, new org.apache.thrift.meta_data.FieldMetaData("examPaperId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args.class, metaDataMap);
    }

    public updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args() {
    }

    public updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args(
      long taskId,
      int questionId,
      long examPaperId)
    {
      this();
      this.taskId = taskId;
      setTaskIdIsSet(true);
      this.questionId = questionId;
      setQuestionIdIsSet(true);
      this.examPaperId = examPaperId;
      setExamPaperIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args(updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.taskId = other.taskId;
      this.questionId = other.questionId;
      this.examPaperId = other.examPaperId;
    }

    public updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args deepCopy() {
      return new updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args(this);
    }

    @Override
    public void clear() {
      setTaskIdIsSet(false);
      this.taskId = 0;
      setQuestionIdIsSet(false);
      this.questionId = 0;
      setExamPaperIdIsSet(false);
      this.examPaperId = 0;
    }

    public long getTaskId() {
      return this.taskId;
    }

    public void setTaskId(long taskId) {
      this.taskId = taskId;
      setTaskIdIsSet(true);
    }

    public void unsetTaskId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskId() {
      return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    public void setTaskIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
    }

    public int getQuestionId() {
      return this.questionId;
    }

    public void setQuestionId(int questionId) {
      this.questionId = questionId;
      setQuestionIdIsSet(true);
    }

    public void unsetQuestionId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUESTIONID_ISSET_ID);
    }

    /** Returns true if field questionId is set (has been assigned a value) and false otherwise */
    public boolean isSetQuestionId() {
      return EncodingUtils.testBit(__isset_bitfield, __QUESTIONID_ISSET_ID);
    }

    public void setQuestionIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUESTIONID_ISSET_ID, value);
    }

    public long getExamPaperId() {
      return this.examPaperId;
    }

    public void setExamPaperId(long examPaperId) {
      this.examPaperId = examPaperId;
      setExamPaperIdIsSet(true);
    }

    public void unsetExamPaperId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXAMPAPERID_ISSET_ID);
    }

    /** Returns true if field examPaperId is set (has been assigned a value) and false otherwise */
    public boolean isSetExamPaperId() {
      return EncodingUtils.testBit(__isset_bitfield, __EXAMPAPERID_ISSET_ID);
    }

    public void setExamPaperIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXAMPAPERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK_ID:
        if (value == null) {
          unsetTaskId();
        } else {
          setTaskId((Long)value);
        }
        break;

      case QUESTION_ID:
        if (value == null) {
          unsetQuestionId();
        } else {
          setQuestionId((Integer)value);
        }
        break;

      case EXAM_PAPER_ID:
        if (value == null) {
          unsetExamPaperId();
        } else {
          setExamPaperId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_ID:
        return getTaskId();

      case QUESTION_ID:
        return getQuestionId();

      case EXAM_PAPER_ID:
        return getExamPaperId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK_ID:
        return isSetTaskId();
      case QUESTION_ID:
        return isSetQuestionId();
      case EXAM_PAPER_ID:
        return isSetExamPaperId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args)
        return this.equals((updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args)that);
      return false;
    }

    public boolean equals(updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args that) {
      if (that == null)
        return false;

      boolean this_present_taskId = true;
      boolean that_present_taskId = true;
      if (this_present_taskId || that_present_taskId) {
        if (!(this_present_taskId && that_present_taskId))
          return false;
        if (this.taskId != that.taskId)
          return false;
      }

      boolean this_present_questionId = true;
      boolean that_present_questionId = true;
      if (this_present_questionId || that_present_questionId) {
        if (!(this_present_questionId && that_present_questionId))
          return false;
        if (this.questionId != that.questionId)
          return false;
      }

      boolean this_present_examPaperId = true;
      boolean that_present_examPaperId = true;
      if (this_present_examPaperId || that_present_examPaperId) {
        if (!(this_present_examPaperId && that_present_examPaperId))
          return false;
        if (this.examPaperId != that.examPaperId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_taskId = true;
      list.add(present_taskId);
      if (present_taskId)
        list.add(taskId);

      boolean present_questionId = true;
      list.add(present_questionId);
      if (present_questionId)
        list.add(questionId);

      boolean present_examPaperId = true;
      list.add(present_examPaperId);
      if (present_examPaperId)
        list.add(examPaperId);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQuestionId()).compareTo(other.isSetQuestionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuestionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionId, other.questionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExamPaperId()).compareTo(other.isSetExamPaperId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExamPaperId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.examPaperId, other.examPaperId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args(");
      boolean first = true;

      sb.append("taskId:");
      sb.append(this.taskId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("questionId:");
      sb.append(this.questionId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("examPaperId:");
      sb.append(this.examPaperId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_argsStandardSchemeFactory implements SchemeFactory {
      public updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_argsStandardScheme getScheme() {
        return new updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_argsStandardScheme();
      }
    }

    private static class updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_argsStandardScheme extends StandardScheme<updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.taskId = iprot.readI64();
                struct.setTaskIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QUESTION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.questionId = iprot.readI32();
                struct.setQuestionIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EXAM_PAPER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.examPaperId = iprot.readI64();
                struct.setExamPaperIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeI64(struct.taskId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(QUESTION_ID_FIELD_DESC);
        oprot.writeI32(struct.questionId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(EXAM_PAPER_ID_FIELD_DESC);
        oprot.writeI64(struct.examPaperId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_argsTupleSchemeFactory implements SchemeFactory {
      public updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_argsTupleScheme getScheme() {
        return new updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_argsTupleScheme();
      }
    }

    private static class updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_argsTupleScheme extends TupleScheme<updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTaskId()) {
          optionals.set(0);
        }
        if (struct.isSetQuestionId()) {
          optionals.set(1);
        }
        if (struct.isSetExamPaperId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTaskId()) {
          oprot.writeI64(struct.taskId);
        }
        if (struct.isSetQuestionId()) {
          oprot.writeI32(struct.questionId);
        }
        if (struct.isSetExamPaperId()) {
          oprot.writeI64(struct.examPaperId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.taskId = iprot.readI64();
          struct.setTaskIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.questionId = iprot.readI32();
          struct.setQuestionIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.examPaperId = iprot.readI64();
          struct.setExamPaperIdIsSet(true);
        }
      }
    }

  }

  public static class updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_result implements org.apache.thrift.TBase<updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_result, updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_resultTupleSchemeFactory());
    }

    private boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_result.class, metaDataMap);
    }

    public updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_result() {
    }

    public updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_result(updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_result deepCopy() {
      return new updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_result)
        return this.equals((updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_result)that);
      return false;
    }

    public boolean equals(updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_resultStandardSchemeFactory implements SchemeFactory {
      public updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_resultStandardScheme getScheme() {
        return new updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_resultStandardScheme();
      }
    }

    private static class updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_resultStandardScheme extends StandardScheme<updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_resultTupleSchemeFactory implements SchemeFactory {
      public updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_resultTupleScheme getScheme() {
        return new updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_resultTupleScheme();
      }
    }

    private static class updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_resultTupleScheme extends TupleScheme<updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateQuestionTagStatusByTaskIdAndQuestionIdAndExamPaperId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRecordingApplicationIdByTaskId_args implements org.apache.thrift.TBase<getRecordingApplicationIdByTaskId_args, getRecordingApplicationIdByTaskId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRecordingApplicationIdByTaskId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecordingApplicationIdByTaskId_args");

    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecordingApplicationIdByTaskId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecordingApplicationIdByTaskId_argsTupleSchemeFactory());
    }

    private long taskId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK_ID((short)1, "taskId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_ID
            return TASK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TASKID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecordingApplicationIdByTaskId_args.class, metaDataMap);
    }

    public getRecordingApplicationIdByTaskId_args() {
    }

    public getRecordingApplicationIdByTaskId_args(
      long taskId)
    {
      this();
      this.taskId = taskId;
      setTaskIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecordingApplicationIdByTaskId_args(getRecordingApplicationIdByTaskId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.taskId = other.taskId;
    }

    public getRecordingApplicationIdByTaskId_args deepCopy() {
      return new getRecordingApplicationIdByTaskId_args(this);
    }

    @Override
    public void clear() {
      setTaskIdIsSet(false);
      this.taskId = 0;
    }

    public long getTaskId() {
      return this.taskId;
    }

    public void setTaskId(long taskId) {
      this.taskId = taskId;
      setTaskIdIsSet(true);
    }

    public void unsetTaskId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskId() {
      return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    public void setTaskIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK_ID:
        if (value == null) {
          unsetTaskId();
        } else {
          setTaskId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_ID:
        return getTaskId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK_ID:
        return isSetTaskId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecordingApplicationIdByTaskId_args)
        return this.equals((getRecordingApplicationIdByTaskId_args)that);
      return false;
    }

    public boolean equals(getRecordingApplicationIdByTaskId_args that) {
      if (that == null)
        return false;

      boolean this_present_taskId = true;
      boolean that_present_taskId = true;
      if (this_present_taskId || that_present_taskId) {
        if (!(this_present_taskId && that_present_taskId))
          return false;
        if (this.taskId != that.taskId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_taskId = true;
      list.add(present_taskId);
      if (present_taskId)
        list.add(taskId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRecordingApplicationIdByTaskId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecordingApplicationIdByTaskId_args(");
      boolean first = true;

      sb.append("taskId:");
      sb.append(this.taskId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecordingApplicationIdByTaskId_argsStandardSchemeFactory implements SchemeFactory {
      public getRecordingApplicationIdByTaskId_argsStandardScheme getScheme() {
        return new getRecordingApplicationIdByTaskId_argsStandardScheme();
      }
    }

    private static class getRecordingApplicationIdByTaskId_argsStandardScheme extends StandardScheme<getRecordingApplicationIdByTaskId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecordingApplicationIdByTaskId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.taskId = iprot.readI64();
                struct.setTaskIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecordingApplicationIdByTaskId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeI64(struct.taskId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecordingApplicationIdByTaskId_argsTupleSchemeFactory implements SchemeFactory {
      public getRecordingApplicationIdByTaskId_argsTupleScheme getScheme() {
        return new getRecordingApplicationIdByTaskId_argsTupleScheme();
      }
    }

    private static class getRecordingApplicationIdByTaskId_argsTupleScheme extends TupleScheme<getRecordingApplicationIdByTaskId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecordingApplicationIdByTaskId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTaskId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTaskId()) {
          oprot.writeI64(struct.taskId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecordingApplicationIdByTaskId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.taskId = iprot.readI64();
          struct.setTaskIdIsSet(true);
        }
      }
    }

  }

  public static class getRecordingApplicationIdByTaskId_result implements org.apache.thrift.TBase<getRecordingApplicationIdByTaskId_result, getRecordingApplicationIdByTaskId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRecordingApplicationIdByTaskId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecordingApplicationIdByTaskId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecordingApplicationIdByTaskId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecordingApplicationIdByTaskId_resultTupleSchemeFactory());
    }

    private long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecordingApplicationIdByTaskId_result.class, metaDataMap);
    }

    public getRecordingApplicationIdByTaskId_result() {
    }

    public getRecordingApplicationIdByTaskId_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecordingApplicationIdByTaskId_result(getRecordingApplicationIdByTaskId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getRecordingApplicationIdByTaskId_result deepCopy() {
      return new getRecordingApplicationIdByTaskId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public void setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecordingApplicationIdByTaskId_result)
        return this.equals((getRecordingApplicationIdByTaskId_result)that);
      return false;
    }

    public boolean equals(getRecordingApplicationIdByTaskId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRecordingApplicationIdByTaskId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecordingApplicationIdByTaskId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecordingApplicationIdByTaskId_resultStandardSchemeFactory implements SchemeFactory {
      public getRecordingApplicationIdByTaskId_resultStandardScheme getScheme() {
        return new getRecordingApplicationIdByTaskId_resultStandardScheme();
      }
    }

    private static class getRecordingApplicationIdByTaskId_resultStandardScheme extends StandardScheme<getRecordingApplicationIdByTaskId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecordingApplicationIdByTaskId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecordingApplicationIdByTaskId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecordingApplicationIdByTaskId_resultTupleSchemeFactory implements SchemeFactory {
      public getRecordingApplicationIdByTaskId_resultTupleScheme getScheme() {
        return new getRecordingApplicationIdByTaskId_resultTupleScheme();
      }
    }

    private static class getRecordingApplicationIdByTaskId_resultTupleScheme extends TupleScheme<getRecordingApplicationIdByTaskId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecordingApplicationIdByTaskId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecordingApplicationIdByTaskId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRecordingApplicationByTaskIds_args implements org.apache.thrift.TBase<getRecordingApplicationByTaskIds_args, getRecordingApplicationByTaskIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRecordingApplicationByTaskIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecordingApplicationByTaskIds_args");

    private static final org.apache.thrift.protocol.TField TASK_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("taskIds", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecordingApplicationByTaskIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecordingApplicationByTaskIds_argsTupleSchemeFactory());
    }

    private List<Long> taskIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK_IDS((short)1, "taskIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_IDS
            return TASK_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_IDS, new org.apache.thrift.meta_data.FieldMetaData("taskIds", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecordingApplicationByTaskIds_args.class, metaDataMap);
    }

    public getRecordingApplicationByTaskIds_args() {
    }

    public getRecordingApplicationByTaskIds_args(
      List<Long> taskIds)
    {
      this();
      this.taskIds = taskIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecordingApplicationByTaskIds_args(getRecordingApplicationByTaskIds_args other) {
      if (other.isSetTaskIds()) {
        List<Long> __this__taskIds = new ArrayList<Long>(other.taskIds);
        this.taskIds = __this__taskIds;
      }
    }

    public getRecordingApplicationByTaskIds_args deepCopy() {
      return new getRecordingApplicationByTaskIds_args(this);
    }

    @Override
    public void clear() {
      this.taskIds = null;
    }

    public int getTaskIdsSize() {
      return (this.taskIds == null) ? 0 : this.taskIds.size();
    }

    public java.util.Iterator<Long> getTaskIdsIterator() {
      return (this.taskIds == null) ? null : this.taskIds.iterator();
    }

    public void addToTaskIds(long elem) {
      if (this.taskIds == null) {
        this.taskIds = new ArrayList<Long>();
      }
      this.taskIds.add(elem);
    }

    public List<Long> getTaskIds() {
      return this.taskIds;
    }

    public void setTaskIds(List<Long> taskIds) {
      this.taskIds = taskIds;
    }

    public void unsetTaskIds() {
      this.taskIds = null;
    }

    /** Returns true if field taskIds is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskIds() {
      return this.taskIds != null;
    }

    public void setTaskIdsIsSet(boolean value) {
      if (!value) {
        this.taskIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK_IDS:
        if (value == null) {
          unsetTaskIds();
        } else {
          setTaskIds((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_IDS:
        return getTaskIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK_IDS:
        return isSetTaskIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecordingApplicationByTaskIds_args)
        return this.equals((getRecordingApplicationByTaskIds_args)that);
      return false;
    }

    public boolean equals(getRecordingApplicationByTaskIds_args that) {
      if (that == null)
        return false;

      boolean this_present_taskIds = true && this.isSetTaskIds();
      boolean that_present_taskIds = true && that.isSetTaskIds();
      if (this_present_taskIds || that_present_taskIds) {
        if (!(this_present_taskIds && that_present_taskIds))
          return false;
        if (!this.taskIds.equals(that.taskIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_taskIds = true && (isSetTaskIds());
      list.add(present_taskIds);
      if (present_taskIds)
        list.add(taskIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRecordingApplicationByTaskIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTaskIds()).compareTo(other.isSetTaskIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskIds, other.taskIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecordingApplicationByTaskIds_args(");
      boolean first = true;

      sb.append("taskIds:");
      if (this.taskIds == null) {
        sb.append("null");
      } else {
        sb.append(this.taskIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecordingApplicationByTaskIds_argsStandardSchemeFactory implements SchemeFactory {
      public getRecordingApplicationByTaskIds_argsStandardScheme getScheme() {
        return new getRecordingApplicationByTaskIds_argsStandardScheme();
      }
    }

    private static class getRecordingApplicationByTaskIds_argsStandardScheme extends StandardScheme<getRecordingApplicationByTaskIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecordingApplicationByTaskIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list164 = iprot.readListBegin();
                  struct.taskIds = new ArrayList<Long>(_list164.size);
                  long _elem165;
                  for (int _i166 = 0; _i166 < _list164.size; ++_i166)
                  {
                    _elem165 = iprot.readI64();
                    struct.taskIds.add(_elem165);
                  }
                  iprot.readListEnd();
                }
                struct.setTaskIdsIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecordingApplicationByTaskIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.taskIds != null) {
          oprot.writeFieldBegin(TASK_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.taskIds.size()));
            for (long _iter167 : struct.taskIds)
            {
              oprot.writeI64(_iter167);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecordingApplicationByTaskIds_argsTupleSchemeFactory implements SchemeFactory {
      public getRecordingApplicationByTaskIds_argsTupleScheme getScheme() {
        return new getRecordingApplicationByTaskIds_argsTupleScheme();
      }
    }

    private static class getRecordingApplicationByTaskIds_argsTupleScheme extends TupleScheme<getRecordingApplicationByTaskIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecordingApplicationByTaskIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTaskIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTaskIds()) {
          {
            oprot.writeI32(struct.taskIds.size());
            for (long _iter168 : struct.taskIds)
            {
              oprot.writeI64(_iter168);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecordingApplicationByTaskIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list169 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.taskIds = new ArrayList<Long>(_list169.size);
            long _elem170;
            for (int _i171 = 0; _i171 < _list169.size; ++_i171)
            {
              _elem170 = iprot.readI64();
              struct.taskIds.add(_elem170);
            }
          }
          struct.setTaskIdsIsSet(true);
        }
      }
    }

  }

  public static class getRecordingApplicationByTaskIds_result implements org.apache.thrift.TBase<getRecordingApplicationByTaskIds_result, getRecordingApplicationByTaskIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRecordingApplicationByTaskIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecordingApplicationByTaskIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecordingApplicationByTaskIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecordingApplicationByTaskIds_resultTupleSchemeFactory());
    }

    private Map<Long,RecordingApplication> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64),
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RecordingApplication.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecordingApplicationByTaskIds_result.class, metaDataMap);
    }

    public getRecordingApplicationByTaskIds_result() {
    }

    public getRecordingApplicationByTaskIds_result(
      Map<Long,RecordingApplication> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecordingApplicationByTaskIds_result(getRecordingApplicationByTaskIds_result other) {
      if (other.isSetSuccess()) {
        Map<Long,RecordingApplication> __this__success = new HashMap<Long,RecordingApplication>(other.success.size());
        for (Map.Entry<Long, RecordingApplication> other_element : other.success.entrySet()) {

          Long other_element_key = other_element.getKey();
          RecordingApplication other_element_value = other_element.getValue();

          Long __this__success_copy_key = other_element_key;

          RecordingApplication __this__success_copy_value = new RecordingApplication(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getRecordingApplicationByTaskIds_result deepCopy() {
      return new getRecordingApplicationByTaskIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(long key, RecordingApplication val) {
      if (this.success == null) {
        this.success = new HashMap<Long,RecordingApplication>();
      }
      this.success.put(key, val);
    }

    public Map<Long,RecordingApplication> getSuccess() {
      return this.success;
    }

    public void setSuccess(Map<Long,RecordingApplication> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<Long,RecordingApplication>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecordingApplicationByTaskIds_result)
        return this.equals((getRecordingApplicationByTaskIds_result)that);
      return false;
    }

    public boolean equals(getRecordingApplicationByTaskIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRecordingApplicationByTaskIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecordingApplicationByTaskIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecordingApplicationByTaskIds_resultStandardSchemeFactory implements SchemeFactory {
      public getRecordingApplicationByTaskIds_resultStandardScheme getScheme() {
        return new getRecordingApplicationByTaskIds_resultStandardScheme();
      }
    }

    private static class getRecordingApplicationByTaskIds_resultStandardScheme extends StandardScheme<getRecordingApplicationByTaskIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecordingApplicationByTaskIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map172 = iprot.readMapBegin();
                  struct.success = new HashMap<Long,RecordingApplication>(2*_map172.size);
                  long _key173;
                  RecordingApplication _val174;
                  for (int _i175 = 0; _i175 < _map172.size; ++_i175)
                  {
                    _key173 = iprot.readI64();
                    _val174 = new RecordingApplication();
                    _val174.read(iprot);
                    struct.success.put(_key173, _val174);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecordingApplicationByTaskIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<Long, RecordingApplication> _iter176 : struct.success.entrySet())
            {
              oprot.writeI64(_iter176.getKey());
              _iter176.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecordingApplicationByTaskIds_resultTupleSchemeFactory implements SchemeFactory {
      public getRecordingApplicationByTaskIds_resultTupleScheme getScheme() {
        return new getRecordingApplicationByTaskIds_resultTupleScheme();
      }
    }

    private static class getRecordingApplicationByTaskIds_resultTupleScheme extends TupleScheme<getRecordingApplicationByTaskIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecordingApplicationByTaskIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<Long, RecordingApplication> _iter177 : struct.success.entrySet())
            {
              oprot.writeI64(_iter177.getKey());
              _iter177.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecordingApplicationByTaskIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map178 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<Long,RecordingApplication>(2*_map178.size);
            long _key179;
            RecordingApplication _val180;
            for (int _i181 = 0; _i181 < _map178.size; ++_i181)
            {
              _key179 = iprot.readI64();
              _val180 = new RecordingApplication();
              _val180.read(iprot);
              struct.success.put(_key179, _val180);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class replaceQuestionAndFeedback_args implements org.apache.thrift.TBase<replaceQuestionAndFeedback_args, replaceQuestionAndFeedback_args._Fields>, java.io.Serializable, Cloneable, Comparable<replaceQuestionAndFeedback_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("replaceQuestionAndFeedback_args");

    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField EXAM_PAPER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("examPaperId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField NEED_REPLACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("needReplaceId", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField REPLACED_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("replacedId", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new replaceQuestionAndFeedback_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new replaceQuestionAndFeedback_argsTupleSchemeFactory());
    }

    private long taskId; // required
    private long examPaperId; // required
    private int needReplaceId; // required
    private int replacedId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK_ID((short)1, "taskId"),
      EXAM_PAPER_ID((short)2, "examPaperId"),
      NEED_REPLACE_ID((short)3, "needReplaceId"),
      REPLACED_ID((short)4, "replacedId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_ID
            return TASK_ID;
          case 2: // EXAM_PAPER_ID
            return EXAM_PAPER_ID;
          case 3: // NEED_REPLACE_ID
            return NEED_REPLACE_ID;
          case 4: // REPLACED_ID
            return REPLACED_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TASKID_ISSET_ID = 0;
    private static final int __EXAMPAPERID_ISSET_ID = 1;
    private static final int __NEEDREPLACEID_ISSET_ID = 2;
    private static final int __REPLACEDID_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EXAM_PAPER_ID, new org.apache.thrift.meta_data.FieldMetaData("examPaperId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NEED_REPLACE_ID, new org.apache.thrift.meta_data.FieldMetaData("needReplaceId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REPLACED_ID, new org.apache.thrift.meta_data.FieldMetaData("replacedId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(replaceQuestionAndFeedback_args.class, metaDataMap);
    }

    public replaceQuestionAndFeedback_args() {
    }

    public replaceQuestionAndFeedback_args(
      long taskId,
      long examPaperId,
      int needReplaceId,
      int replacedId)
    {
      this();
      this.taskId = taskId;
      setTaskIdIsSet(true);
      this.examPaperId = examPaperId;
      setExamPaperIdIsSet(true);
      this.needReplaceId = needReplaceId;
      setNeedReplaceIdIsSet(true);
      this.replacedId = replacedId;
      setReplacedIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public replaceQuestionAndFeedback_args(replaceQuestionAndFeedback_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.taskId = other.taskId;
      this.examPaperId = other.examPaperId;
      this.needReplaceId = other.needReplaceId;
      this.replacedId = other.replacedId;
    }

    public replaceQuestionAndFeedback_args deepCopy() {
      return new replaceQuestionAndFeedback_args(this);
    }

    @Override
    public void clear() {
      setTaskIdIsSet(false);
      this.taskId = 0;
      setExamPaperIdIsSet(false);
      this.examPaperId = 0;
      setNeedReplaceIdIsSet(false);
      this.needReplaceId = 0;
      setReplacedIdIsSet(false);
      this.replacedId = 0;
    }

    public long getTaskId() {
      return this.taskId;
    }

    public void setTaskId(long taskId) {
      this.taskId = taskId;
      setTaskIdIsSet(true);
    }

    public void unsetTaskId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskId() {
      return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    public void setTaskIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
    }

    public long getExamPaperId() {
      return this.examPaperId;
    }

    public void setExamPaperId(long examPaperId) {
      this.examPaperId = examPaperId;
      setExamPaperIdIsSet(true);
    }

    public void unsetExamPaperId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXAMPAPERID_ISSET_ID);
    }

    /** Returns true if field examPaperId is set (has been assigned a value) and false otherwise */
    public boolean isSetExamPaperId() {
      return EncodingUtils.testBit(__isset_bitfield, __EXAMPAPERID_ISSET_ID);
    }

    public void setExamPaperIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXAMPAPERID_ISSET_ID, value);
    }

    public int getNeedReplaceId() {
      return this.needReplaceId;
    }

    public void setNeedReplaceId(int needReplaceId) {
      this.needReplaceId = needReplaceId;
      setNeedReplaceIdIsSet(true);
    }

    public void unsetNeedReplaceId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEEDREPLACEID_ISSET_ID);
    }

    /** Returns true if field needReplaceId is set (has been assigned a value) and false otherwise */
    public boolean isSetNeedReplaceId() {
      return EncodingUtils.testBit(__isset_bitfield, __NEEDREPLACEID_ISSET_ID);
    }

    public void setNeedReplaceIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEEDREPLACEID_ISSET_ID, value);
    }

    public int getReplacedId() {
      return this.replacedId;
    }

    public void setReplacedId(int replacedId) {
      this.replacedId = replacedId;
      setReplacedIdIsSet(true);
    }

    public void unsetReplacedId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPLACEDID_ISSET_ID);
    }

    /** Returns true if field replacedId is set (has been assigned a value) and false otherwise */
    public boolean isSetReplacedId() {
      return EncodingUtils.testBit(__isset_bitfield, __REPLACEDID_ISSET_ID);
    }

    public void setReplacedIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPLACEDID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK_ID:
        if (value == null) {
          unsetTaskId();
        } else {
          setTaskId((Long)value);
        }
        break;

      case EXAM_PAPER_ID:
        if (value == null) {
          unsetExamPaperId();
        } else {
          setExamPaperId((Long)value);
        }
        break;

      case NEED_REPLACE_ID:
        if (value == null) {
          unsetNeedReplaceId();
        } else {
          setNeedReplaceId((Integer)value);
        }
        break;

      case REPLACED_ID:
        if (value == null) {
          unsetReplacedId();
        } else {
          setReplacedId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_ID:
        return getTaskId();

      case EXAM_PAPER_ID:
        return getExamPaperId();

      case NEED_REPLACE_ID:
        return getNeedReplaceId();

      case REPLACED_ID:
        return getReplacedId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK_ID:
        return isSetTaskId();
      case EXAM_PAPER_ID:
        return isSetExamPaperId();
      case NEED_REPLACE_ID:
        return isSetNeedReplaceId();
      case REPLACED_ID:
        return isSetReplacedId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof replaceQuestionAndFeedback_args)
        return this.equals((replaceQuestionAndFeedback_args)that);
      return false;
    }

    public boolean equals(replaceQuestionAndFeedback_args that) {
      if (that == null)
        return false;

      boolean this_present_taskId = true;
      boolean that_present_taskId = true;
      if (this_present_taskId || that_present_taskId) {
        if (!(this_present_taskId && that_present_taskId))
          return false;
        if (this.taskId != that.taskId)
          return false;
      }

      boolean this_present_examPaperId = true;
      boolean that_present_examPaperId = true;
      if (this_present_examPaperId || that_present_examPaperId) {
        if (!(this_present_examPaperId && that_present_examPaperId))
          return false;
        if (this.examPaperId != that.examPaperId)
          return false;
      }

      boolean this_present_needReplaceId = true;
      boolean that_present_needReplaceId = true;
      if (this_present_needReplaceId || that_present_needReplaceId) {
        if (!(this_present_needReplaceId && that_present_needReplaceId))
          return false;
        if (this.needReplaceId != that.needReplaceId)
          return false;
      }

      boolean this_present_replacedId = true;
      boolean that_present_replacedId = true;
      if (this_present_replacedId || that_present_replacedId) {
        if (!(this_present_replacedId && that_present_replacedId))
          return false;
        if (this.replacedId != that.replacedId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_taskId = true;
      list.add(present_taskId);
      if (present_taskId)
        list.add(taskId);

      boolean present_examPaperId = true;
      list.add(present_examPaperId);
      if (present_examPaperId)
        list.add(examPaperId);

      boolean present_needReplaceId = true;
      list.add(present_needReplaceId);
      if (present_needReplaceId)
        list.add(needReplaceId);

      boolean present_replacedId = true;
      list.add(present_replacedId);
      if (present_replacedId)
        list.add(replacedId);

      return list.hashCode();
    }

    @Override
    public int compareTo(replaceQuestionAndFeedback_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExamPaperId()).compareTo(other.isSetExamPaperId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExamPaperId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.examPaperId, other.examPaperId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNeedReplaceId()).compareTo(other.isSetNeedReplaceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNeedReplaceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.needReplaceId, other.needReplaceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReplacedId()).compareTo(other.isSetReplacedId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReplacedId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replacedId, other.replacedId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("replaceQuestionAndFeedback_args(");
      boolean first = true;

      sb.append("taskId:");
      sb.append(this.taskId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("examPaperId:");
      sb.append(this.examPaperId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("needReplaceId:");
      sb.append(this.needReplaceId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("replacedId:");
      sb.append(this.replacedId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class replaceQuestionAndFeedback_argsStandardSchemeFactory implements SchemeFactory {
      public replaceQuestionAndFeedback_argsStandardScheme getScheme() {
        return new replaceQuestionAndFeedback_argsStandardScheme();
      }
    }

    private static class replaceQuestionAndFeedback_argsStandardScheme extends StandardScheme<replaceQuestionAndFeedback_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, replaceQuestionAndFeedback_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.taskId = iprot.readI64();
                struct.setTaskIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXAM_PAPER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.examPaperId = iprot.readI64();
                struct.setExamPaperIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NEED_REPLACE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.needReplaceId = iprot.readI32();
                struct.setNeedReplaceIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REPLACED_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.replacedId = iprot.readI32();
                struct.setReplacedIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, replaceQuestionAndFeedback_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeI64(struct.taskId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(EXAM_PAPER_ID_FIELD_DESC);
        oprot.writeI64(struct.examPaperId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NEED_REPLACE_ID_FIELD_DESC);
        oprot.writeI32(struct.needReplaceId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(REPLACED_ID_FIELD_DESC);
        oprot.writeI32(struct.replacedId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class replaceQuestionAndFeedback_argsTupleSchemeFactory implements SchemeFactory {
      public replaceQuestionAndFeedback_argsTupleScheme getScheme() {
        return new replaceQuestionAndFeedback_argsTupleScheme();
      }
    }

    private static class replaceQuestionAndFeedback_argsTupleScheme extends TupleScheme<replaceQuestionAndFeedback_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, replaceQuestionAndFeedback_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTaskId()) {
          optionals.set(0);
        }
        if (struct.isSetExamPaperId()) {
          optionals.set(1);
        }
        if (struct.isSetNeedReplaceId()) {
          optionals.set(2);
        }
        if (struct.isSetReplacedId()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetTaskId()) {
          oprot.writeI64(struct.taskId);
        }
        if (struct.isSetExamPaperId()) {
          oprot.writeI64(struct.examPaperId);
        }
        if (struct.isSetNeedReplaceId()) {
          oprot.writeI32(struct.needReplaceId);
        }
        if (struct.isSetReplacedId()) {
          oprot.writeI32(struct.replacedId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, replaceQuestionAndFeedback_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.taskId = iprot.readI64();
          struct.setTaskIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.examPaperId = iprot.readI64();
          struct.setExamPaperIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.needReplaceId = iprot.readI32();
          struct.setNeedReplaceIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.replacedId = iprot.readI32();
          struct.setReplacedIdIsSet(true);
        }
      }
    }

  }

  public static class replaceQuestionAndFeedback_result implements org.apache.thrift.TBase<replaceQuestionAndFeedback_result, replaceQuestionAndFeedback_result._Fields>, java.io.Serializable, Cloneable, Comparable<replaceQuestionAndFeedback_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("replaceQuestionAndFeedback_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new replaceQuestionAndFeedback_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new replaceQuestionAndFeedback_resultTupleSchemeFactory());
    }

    private boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(replaceQuestionAndFeedback_result.class, metaDataMap);
    }

    public replaceQuestionAndFeedback_result() {
    }

    public replaceQuestionAndFeedback_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public replaceQuestionAndFeedback_result(replaceQuestionAndFeedback_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public replaceQuestionAndFeedback_result deepCopy() {
      return new replaceQuestionAndFeedback_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof replaceQuestionAndFeedback_result)
        return this.equals((replaceQuestionAndFeedback_result)that);
      return false;
    }

    public boolean equals(replaceQuestionAndFeedback_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(replaceQuestionAndFeedback_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("replaceQuestionAndFeedback_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class replaceQuestionAndFeedback_resultStandardSchemeFactory implements SchemeFactory {
      public replaceQuestionAndFeedback_resultStandardScheme getScheme() {
        return new replaceQuestionAndFeedback_resultStandardScheme();
      }
    }

    private static class replaceQuestionAndFeedback_resultStandardScheme extends StandardScheme<replaceQuestionAndFeedback_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, replaceQuestionAndFeedback_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, replaceQuestionAndFeedback_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class replaceQuestionAndFeedback_resultTupleSchemeFactory implements SchemeFactory {
      public replaceQuestionAndFeedback_resultTupleScheme getScheme() {
        return new replaceQuestionAndFeedback_resultTupleScheme();
      }
    }

    private static class replaceQuestionAndFeedback_resultTupleScheme extends TupleScheme<replaceQuestionAndFeedback_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, replaceQuestionAndFeedback_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, replaceQuestionAndFeedback_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRecordingApplicationDetailsIncludeAllRelations_args implements org.apache.thrift.TBase<getRecordingApplicationDetailsIncludeAllRelations_args, getRecordingApplicationDetailsIncludeAllRelations_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRecordingApplicationDetailsIncludeAllRelations_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecordingApplicationDetailsIncludeAllRelations_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecordingApplicationDetailsIncludeAllRelations_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecordingApplicationDetailsIncludeAllRelations_argsTupleSchemeFactory());
    }

    private List<Long> ids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecordingApplicationDetailsIncludeAllRelations_args.class, metaDataMap);
    }

    public getRecordingApplicationDetailsIncludeAllRelations_args() {
    }

    public getRecordingApplicationDetailsIncludeAllRelations_args(
      List<Long> ids)
    {
      this();
      this.ids = ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecordingApplicationDetailsIncludeAllRelations_args(getRecordingApplicationDetailsIncludeAllRelations_args other) {
      if (other.isSetIds()) {
        List<Long> __this__ids = new ArrayList<Long>(other.ids);
        this.ids = __this__ids;
      }
    }

    public getRecordingApplicationDetailsIncludeAllRelations_args deepCopy() {
      return new getRecordingApplicationDetailsIncludeAllRelations_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<Long> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(long elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<Long>();
      }
      this.ids.add(elem);
    }

    public List<Long> getIds() {
      return this.ids;
    }

    public void setIds(List<Long> ids) {
      this.ids = ids;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecordingApplicationDetailsIncludeAllRelations_args)
        return this.equals((getRecordingApplicationDetailsIncludeAllRelations_args)that);
      return false;
    }

    public boolean equals(getRecordingApplicationDetailsIncludeAllRelations_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ids = true && (isSetIds());
      list.add(present_ids);
      if (present_ids)
        list.add(ids);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRecordingApplicationDetailsIncludeAllRelations_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecordingApplicationDetailsIncludeAllRelations_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecordingApplicationDetailsIncludeAllRelations_argsStandardSchemeFactory implements SchemeFactory {
      public getRecordingApplicationDetailsIncludeAllRelations_argsStandardScheme getScheme() {
        return new getRecordingApplicationDetailsIncludeAllRelations_argsStandardScheme();
      }
    }

    private static class getRecordingApplicationDetailsIncludeAllRelations_argsStandardScheme extends StandardScheme<getRecordingApplicationDetailsIncludeAllRelations_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecordingApplicationDetailsIncludeAllRelations_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list182 = iprot.readListBegin();
                  struct.ids = new ArrayList<Long>(_list182.size);
                  long _elem183;
                  for (int _i184 = 0; _i184 < _list182.size; ++_i184)
                  {
                    _elem183 = iprot.readI64();
                    struct.ids.add(_elem183);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecordingApplicationDetailsIncludeAllRelations_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ids.size()));
            for (long _iter185 : struct.ids)
            {
              oprot.writeI64(_iter185);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecordingApplicationDetailsIncludeAllRelations_argsTupleSchemeFactory implements SchemeFactory {
      public getRecordingApplicationDetailsIncludeAllRelations_argsTupleScheme getScheme() {
        return new getRecordingApplicationDetailsIncludeAllRelations_argsTupleScheme();
      }
    }

    private static class getRecordingApplicationDetailsIncludeAllRelations_argsTupleScheme extends TupleScheme<getRecordingApplicationDetailsIncludeAllRelations_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecordingApplicationDetailsIncludeAllRelations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (long _iter186 : struct.ids)
            {
              oprot.writeI64(_iter186);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecordingApplicationDetailsIncludeAllRelations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list187 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.ids = new ArrayList<Long>(_list187.size);
            long _elem188;
            for (int _i189 = 0; _i189 < _list187.size; ++_i189)
            {
              _elem188 = iprot.readI64();
              struct.ids.add(_elem188);
            }
          }
          struct.setIdsIsSet(true);
        }
      }
    }

  }

  public static class getRecordingApplicationDetailsIncludeAllRelations_result implements org.apache.thrift.TBase<getRecordingApplicationDetailsIncludeAllRelations_result, getRecordingApplicationDetailsIncludeAllRelations_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRecordingApplicationDetailsIncludeAllRelations_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecordingApplicationDetailsIncludeAllRelations_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecordingApplicationDetailsIncludeAllRelations_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecordingApplicationDetailsIncludeAllRelations_resultTupleSchemeFactory());
    }

    private Map<Long,RecordingApplicationDetail> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64),
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RecordingApplicationDetail.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecordingApplicationDetailsIncludeAllRelations_result.class, metaDataMap);
    }

    public getRecordingApplicationDetailsIncludeAllRelations_result() {
    }

    public getRecordingApplicationDetailsIncludeAllRelations_result(
      Map<Long,RecordingApplicationDetail> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecordingApplicationDetailsIncludeAllRelations_result(getRecordingApplicationDetailsIncludeAllRelations_result other) {
      if (other.isSetSuccess()) {
        Map<Long,RecordingApplicationDetail> __this__success = new HashMap<Long,RecordingApplicationDetail>(other.success.size());
        for (Map.Entry<Long, RecordingApplicationDetail> other_element : other.success.entrySet()) {

          Long other_element_key = other_element.getKey();
          RecordingApplicationDetail other_element_value = other_element.getValue();

          Long __this__success_copy_key = other_element_key;

          RecordingApplicationDetail __this__success_copy_value = new RecordingApplicationDetail(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getRecordingApplicationDetailsIncludeAllRelations_result deepCopy() {
      return new getRecordingApplicationDetailsIncludeAllRelations_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(long key, RecordingApplicationDetail val) {
      if (this.success == null) {
        this.success = new HashMap<Long,RecordingApplicationDetail>();
      }
      this.success.put(key, val);
    }

    public Map<Long,RecordingApplicationDetail> getSuccess() {
      return this.success;
    }

    public void setSuccess(Map<Long,RecordingApplicationDetail> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<Long,RecordingApplicationDetail>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecordingApplicationDetailsIncludeAllRelations_result)
        return this.equals((getRecordingApplicationDetailsIncludeAllRelations_result)that);
      return false;
    }

    public boolean equals(getRecordingApplicationDetailsIncludeAllRelations_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRecordingApplicationDetailsIncludeAllRelations_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecordingApplicationDetailsIncludeAllRelations_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecordingApplicationDetailsIncludeAllRelations_resultStandardSchemeFactory implements SchemeFactory {
      public getRecordingApplicationDetailsIncludeAllRelations_resultStandardScheme getScheme() {
        return new getRecordingApplicationDetailsIncludeAllRelations_resultStandardScheme();
      }
    }

    private static class getRecordingApplicationDetailsIncludeAllRelations_resultStandardScheme extends StandardScheme<getRecordingApplicationDetailsIncludeAllRelations_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecordingApplicationDetailsIncludeAllRelations_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map190 = iprot.readMapBegin();
                  struct.success = new HashMap<Long,RecordingApplicationDetail>(2*_map190.size);
                  long _key191;
                  RecordingApplicationDetail _val192;
                  for (int _i193 = 0; _i193 < _map190.size; ++_i193)
                  {
                    _key191 = iprot.readI64();
                    _val192 = new RecordingApplicationDetail();
                    _val192.read(iprot);
                    struct.success.put(_key191, _val192);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecordingApplicationDetailsIncludeAllRelations_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<Long, RecordingApplicationDetail> _iter194 : struct.success.entrySet())
            {
              oprot.writeI64(_iter194.getKey());
              _iter194.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecordingApplicationDetailsIncludeAllRelations_resultTupleSchemeFactory implements SchemeFactory {
      public getRecordingApplicationDetailsIncludeAllRelations_resultTupleScheme getScheme() {
        return new getRecordingApplicationDetailsIncludeAllRelations_resultTupleScheme();
      }
    }

    private static class getRecordingApplicationDetailsIncludeAllRelations_resultTupleScheme extends TupleScheme<getRecordingApplicationDetailsIncludeAllRelations_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecordingApplicationDetailsIncludeAllRelations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<Long, RecordingApplicationDetail> _iter195 : struct.success.entrySet())
            {
              oprot.writeI64(_iter195.getKey());
              _iter195.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecordingApplicationDetailsIncludeAllRelations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map196 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<Long,RecordingApplicationDetail>(2*_map196.size);
            long _key197;
            RecordingApplicationDetail _val198;
            for (int _i199 = 0; _i199 < _map196.size; ++_i199)
            {
              _key197 = iprot.readI64();
              _val198 = new RecordingApplicationDetail();
              _val198.read(iprot);
              struct.success.put(_key197, _val198);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
