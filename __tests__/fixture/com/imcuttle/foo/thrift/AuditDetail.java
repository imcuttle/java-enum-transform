/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.imcuttle.foo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class AuditDetail implements org.apache.thrift.TBase<AuditDetail, AuditDetail._Fields>, java.io.Serializable, Cloneable, Comparable<AuditDetail> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AuditDetail");

  private static final org.apache.thrift.protocol.TField AUDIT_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("auditTimes", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ORIGIN_STAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("originStage", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LATEST_STAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("latestStage", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField AUDITOR_FIELD_DESC = new org.apache.thrift.protocol.TField("auditor", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField AUDIT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("auditTime", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField IMAGE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("imageIds", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField AUDIO_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("audioIds", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField UPDATE_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("updateUser", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AuditDetailStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AuditDetailTupleSchemeFactory());
  }

  private int auditTimes; // required
  private int originStage; // required
  private int latestStage; // required
  private int auditor; // required
  private long auditTime; // required
  private List<String> imageIds; // optional
  private List<String> audioIds; // optional
  private String updateUser; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AUDIT_TIMES((short)1, "auditTimes"),
    ORIGIN_STAGE((short)2, "originStage"),
    LATEST_STAGE((short)3, "latestStage"),
    AUDITOR((short)4, "auditor"),
    AUDIT_TIME((short)5, "auditTime"),
    IMAGE_IDS((short)6, "imageIds"),
    AUDIO_IDS((short)7, "audioIds"),
    UPDATE_USER((short)8, "updateUser");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AUDIT_TIMES
          return AUDIT_TIMES;
        case 2: // ORIGIN_STAGE
          return ORIGIN_STAGE;
        case 3: // LATEST_STAGE
          return LATEST_STAGE;
        case 4: // AUDITOR
          return AUDITOR;
        case 5: // AUDIT_TIME
          return AUDIT_TIME;
        case 6: // IMAGE_IDS
          return IMAGE_IDS;
        case 7: // AUDIO_IDS
          return AUDIO_IDS;
        case 8: // UPDATE_USER
          return UPDATE_USER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AUDITTIMES_ISSET_ID = 0;
  private static final int __ORIGINSTAGE_ISSET_ID = 1;
  private static final int __LATESTSTAGE_ISSET_ID = 2;
  private static final int __AUDITOR_ISSET_ID = 3;
  private static final int __AUDITTIME_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.IMAGE_IDS,_Fields.AUDIO_IDS,_Fields.UPDATE_USER};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AUDIT_TIMES, new org.apache.thrift.meta_data.FieldMetaData("auditTimes", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORIGIN_STAGE, new org.apache.thrift.meta_data.FieldMetaData("originStage", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LATEST_STAGE, new org.apache.thrift.meta_data.FieldMetaData("latestStage", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AUDITOR, new org.apache.thrift.meta_data.FieldMetaData("auditor", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AUDIT_TIME, new org.apache.thrift.meta_data.FieldMetaData("auditTime", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IMAGE_IDS, new org.apache.thrift.meta_data.FieldMetaData("imageIds", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.AUDIO_IDS, new org.apache.thrift.meta_data.FieldMetaData("audioIds", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.UPDATE_USER, new org.apache.thrift.meta_data.FieldMetaData("updateUser", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AuditDetail.class, metaDataMap);
  }

  public AuditDetail() {
  }

  public AuditDetail(
    int auditTimes,
    int originStage,
    int latestStage,
    int auditor,
    long auditTime)
  {
    this();
    this.auditTimes = auditTimes;
    setAuditTimesIsSet(true);
    this.originStage = originStage;
    setOriginStageIsSet(true);
    this.latestStage = latestStage;
    setLatestStageIsSet(true);
    this.auditor = auditor;
    setAuditorIsSet(true);
    this.auditTime = auditTime;
    setAuditTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AuditDetail(AuditDetail other) {
    __isset_bitfield = other.__isset_bitfield;
    this.auditTimes = other.auditTimes;
    this.originStage = other.originStage;
    this.latestStage = other.latestStage;
    this.auditor = other.auditor;
    this.auditTime = other.auditTime;
    if (other.isSetImageIds()) {
      List<String> __this__imageIds = new ArrayList<String>(other.imageIds);
      this.imageIds = __this__imageIds;
    }
    if (other.isSetAudioIds()) {
      List<String> __this__audioIds = new ArrayList<String>(other.audioIds);
      this.audioIds = __this__audioIds;
    }
    if (other.isSetUpdateUser()) {
      this.updateUser = other.updateUser;
    }
  }

  public AuditDetail deepCopy() {
    return new AuditDetail(this);
  }

  @Override
  public void clear() {
    setAuditTimesIsSet(false);
    this.auditTimes = 0;
    setOriginStageIsSet(false);
    this.originStage = 0;
    setLatestStageIsSet(false);
    this.latestStage = 0;
    setAuditorIsSet(false);
    this.auditor = 0;
    setAuditTimeIsSet(false);
    this.auditTime = 0;
    this.imageIds = null;
    this.audioIds = null;
    this.updateUser = null;
  }

  public int getAuditTimes() {
    return this.auditTimes;
  }

  public void setAuditTimes(int auditTimes) {
    this.auditTimes = auditTimes;
    setAuditTimesIsSet(true);
  }

  public void unsetAuditTimes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AUDITTIMES_ISSET_ID);
  }

  /** Returns true if field auditTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetAuditTimes() {
    return EncodingUtils.testBit(__isset_bitfield, __AUDITTIMES_ISSET_ID);
  }

  public void setAuditTimesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AUDITTIMES_ISSET_ID, value);
  }

  public int getOriginStage() {
    return this.originStage;
  }

  public void setOriginStage(int originStage) {
    this.originStage = originStage;
    setOriginStageIsSet(true);
  }

  public void unsetOriginStage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORIGINSTAGE_ISSET_ID);
  }

  /** Returns true if field originStage is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginStage() {
    return EncodingUtils.testBit(__isset_bitfield, __ORIGINSTAGE_ISSET_ID);
  }

  public void setOriginStageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORIGINSTAGE_ISSET_ID, value);
  }

  public int getLatestStage() {
    return this.latestStage;
  }

  public void setLatestStage(int latestStage) {
    this.latestStage = latestStage;
    setLatestStageIsSet(true);
  }

  public void unsetLatestStage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LATESTSTAGE_ISSET_ID);
  }

  /** Returns true if field latestStage is set (has been assigned a value) and false otherwise */
  public boolean isSetLatestStage() {
    return EncodingUtils.testBit(__isset_bitfield, __LATESTSTAGE_ISSET_ID);
  }

  public void setLatestStageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LATESTSTAGE_ISSET_ID, value);
  }

  public int getAuditor() {
    return this.auditor;
  }

  public void setAuditor(int auditor) {
    this.auditor = auditor;
    setAuditorIsSet(true);
  }

  public void unsetAuditor() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AUDITOR_ISSET_ID);
  }

  /** Returns true if field auditor is set (has been assigned a value) and false otherwise */
  public boolean isSetAuditor() {
    return EncodingUtils.testBit(__isset_bitfield, __AUDITOR_ISSET_ID);
  }

  public void setAuditorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AUDITOR_ISSET_ID, value);
  }

  public long getAuditTime() {
    return this.auditTime;
  }

  public void setAuditTime(long auditTime) {
    this.auditTime = auditTime;
    setAuditTimeIsSet(true);
  }

  public void unsetAuditTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AUDITTIME_ISSET_ID);
  }

  /** Returns true if field auditTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAuditTime() {
    return EncodingUtils.testBit(__isset_bitfield, __AUDITTIME_ISSET_ID);
  }

  public void setAuditTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AUDITTIME_ISSET_ID, value);
  }

  public int getImageIdsSize() {
    return (this.imageIds == null) ? 0 : this.imageIds.size();
  }

  public java.util.Iterator<String> getImageIdsIterator() {
    return (this.imageIds == null) ? null : this.imageIds.iterator();
  }

  public void addToImageIds(String elem) {
    if (this.imageIds == null) {
      this.imageIds = new ArrayList<String>();
    }
    this.imageIds.add(elem);
  }

  public List<String> getImageIds() {
    return this.imageIds;
  }

  public void setImageIds(List<String> imageIds) {
    this.imageIds = imageIds;
  }

  public void unsetImageIds() {
    this.imageIds = null;
  }

  /** Returns true if field imageIds is set (has been assigned a value) and false otherwise */
  public boolean isSetImageIds() {
    return this.imageIds != null;
  }

  public void setImageIdsIsSet(boolean value) {
    if (!value) {
      this.imageIds = null;
    }
  }

  public int getAudioIdsSize() {
    return (this.audioIds == null) ? 0 : this.audioIds.size();
  }

  public java.util.Iterator<String> getAudioIdsIterator() {
    return (this.audioIds == null) ? null : this.audioIds.iterator();
  }

  public void addToAudioIds(String elem) {
    if (this.audioIds == null) {
      this.audioIds = new ArrayList<String>();
    }
    this.audioIds.add(elem);
  }

  public List<String> getAudioIds() {
    return this.audioIds;
  }

  public void setAudioIds(List<String> audioIds) {
    this.audioIds = audioIds;
  }

  public void unsetAudioIds() {
    this.audioIds = null;
  }

  /** Returns true if field audioIds is set (has been assigned a value) and false otherwise */
  public boolean isSetAudioIds() {
    return this.audioIds != null;
  }

  public void setAudioIdsIsSet(boolean value) {
    if (!value) {
      this.audioIds = null;
    }
  }

  public String getUpdateUser() {
    return this.updateUser;
  }

  public void setUpdateUser(String updateUser) {
    this.updateUser = updateUser;
  }

  public void unsetUpdateUser() {
    this.updateUser = null;
  }

  /** Returns true if field updateUser is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateUser() {
    return this.updateUser != null;
  }

  public void setUpdateUserIsSet(boolean value) {
    if (!value) {
      this.updateUser = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AUDIT_TIMES:
      if (value == null) {
        unsetAuditTimes();
      } else {
        setAuditTimes((Integer)value);
      }
      break;

    case ORIGIN_STAGE:
      if (value == null) {
        unsetOriginStage();
      } else {
        setOriginStage((Integer)value);
      }
      break;

    case LATEST_STAGE:
      if (value == null) {
        unsetLatestStage();
      } else {
        setLatestStage((Integer)value);
      }
      break;

    case AUDITOR:
      if (value == null) {
        unsetAuditor();
      } else {
        setAuditor((Integer)value);
      }
      break;

    case AUDIT_TIME:
      if (value == null) {
        unsetAuditTime();
      } else {
        setAuditTime((Long)value);
      }
      break;

    case IMAGE_IDS:
      if (value == null) {
        unsetImageIds();
      } else {
        setImageIds((List<String>)value);
      }
      break;

    case AUDIO_IDS:
      if (value == null) {
        unsetAudioIds();
      } else {
        setAudioIds((List<String>)value);
      }
      break;

    case UPDATE_USER:
      if (value == null) {
        unsetUpdateUser();
      } else {
        setUpdateUser((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AUDIT_TIMES:
      return getAuditTimes();

    case ORIGIN_STAGE:
      return getOriginStage();

    case LATEST_STAGE:
      return getLatestStage();

    case AUDITOR:
      return getAuditor();

    case AUDIT_TIME:
      return getAuditTime();

    case IMAGE_IDS:
      return getImageIds();

    case AUDIO_IDS:
      return getAudioIds();

    case UPDATE_USER:
      return getUpdateUser();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AUDIT_TIMES:
      return isSetAuditTimes();
    case ORIGIN_STAGE:
      return isSetOriginStage();
    case LATEST_STAGE:
      return isSetLatestStage();
    case AUDITOR:
      return isSetAuditor();
    case AUDIT_TIME:
      return isSetAuditTime();
    case IMAGE_IDS:
      return isSetImageIds();
    case AUDIO_IDS:
      return isSetAudioIds();
    case UPDATE_USER:
      return isSetUpdateUser();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AuditDetail)
      return this.equals((AuditDetail)that);
    return false;
  }

  public boolean equals(AuditDetail that) {
    if (that == null)
      return false;

    boolean this_present_auditTimes = true;
    boolean that_present_auditTimes = true;
    if (this_present_auditTimes || that_present_auditTimes) {
      if (!(this_present_auditTimes && that_present_auditTimes))
        return false;
      if (this.auditTimes != that.auditTimes)
        return false;
    }

    boolean this_present_originStage = true;
    boolean that_present_originStage = true;
    if (this_present_originStage || that_present_originStage) {
      if (!(this_present_originStage && that_present_originStage))
        return false;
      if (this.originStage != that.originStage)
        return false;
    }

    boolean this_present_latestStage = true;
    boolean that_present_latestStage = true;
    if (this_present_latestStage || that_present_latestStage) {
      if (!(this_present_latestStage && that_present_latestStage))
        return false;
      if (this.latestStage != that.latestStage)
        return false;
    }

    boolean this_present_auditor = true;
    boolean that_present_auditor = true;
    if (this_present_auditor || that_present_auditor) {
      if (!(this_present_auditor && that_present_auditor))
        return false;
      if (this.auditor != that.auditor)
        return false;
    }

    boolean this_present_auditTime = true;
    boolean that_present_auditTime = true;
    if (this_present_auditTime || that_present_auditTime) {
      if (!(this_present_auditTime && that_present_auditTime))
        return false;
      if (this.auditTime != that.auditTime)
        return false;
    }

    boolean this_present_imageIds = true && this.isSetImageIds();
    boolean that_present_imageIds = true && that.isSetImageIds();
    if (this_present_imageIds || that_present_imageIds) {
      if (!(this_present_imageIds && that_present_imageIds))
        return false;
      if (!this.imageIds.equals(that.imageIds))
        return false;
    }

    boolean this_present_audioIds = true && this.isSetAudioIds();
    boolean that_present_audioIds = true && that.isSetAudioIds();
    if (this_present_audioIds || that_present_audioIds) {
      if (!(this_present_audioIds && that_present_audioIds))
        return false;
      if (!this.audioIds.equals(that.audioIds))
        return false;
    }

    boolean this_present_updateUser = true && this.isSetUpdateUser();
    boolean that_present_updateUser = true && that.isSetUpdateUser();
    if (this_present_updateUser || that_present_updateUser) {
      if (!(this_present_updateUser && that_present_updateUser))
        return false;
      if (!this.updateUser.equals(that.updateUser))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_auditTimes = true;
    list.add(present_auditTimes);
    if (present_auditTimes)
      list.add(auditTimes);

    boolean present_originStage = true;
    list.add(present_originStage);
    if (present_originStage)
      list.add(originStage);

    boolean present_latestStage = true;
    list.add(present_latestStage);
    if (present_latestStage)
      list.add(latestStage);

    boolean present_auditor = true;
    list.add(present_auditor);
    if (present_auditor)
      list.add(auditor);

    boolean present_auditTime = true;
    list.add(present_auditTime);
    if (present_auditTime)
      list.add(auditTime);

    boolean present_imageIds = true && (isSetImageIds());
    list.add(present_imageIds);
    if (present_imageIds)
      list.add(imageIds);

    boolean present_audioIds = true && (isSetAudioIds());
    list.add(present_audioIds);
    if (present_audioIds)
      list.add(audioIds);

    boolean present_updateUser = true && (isSetUpdateUser());
    list.add(present_updateUser);
    if (present_updateUser)
      list.add(updateUser);

    return list.hashCode();
  }

  @Override
  public int compareTo(AuditDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAuditTimes()).compareTo(other.isSetAuditTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuditTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditTimes, other.auditTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOriginStage()).compareTo(other.isSetOriginStage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginStage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originStage, other.originStage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLatestStage()).compareTo(other.isSetLatestStage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatestStage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latestStage, other.latestStage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuditor()).compareTo(other.isSetAuditor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuditor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditor, other.auditor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuditTime()).compareTo(other.isSetAuditTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuditTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditTime, other.auditTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageIds()).compareTo(other.isSetImageIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageIds, other.imageIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAudioIds()).compareTo(other.isSetAudioIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAudioIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.audioIds, other.audioIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateUser()).compareTo(other.isSetUpdateUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateUser, other.updateUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AuditDetail(");
    boolean first = true;

    sb.append("auditTimes:");
    sb.append(this.auditTimes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("originStage:");
    sb.append(this.originStage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("latestStage:");
    sb.append(this.latestStage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("auditor:");
    sb.append(this.auditor);
    first = false;
    if (!first) sb.append(", ");
    sb.append("auditTime:");
    sb.append(this.auditTime);
    first = false;
    if (isSetImageIds()) {
      if (!first) sb.append(", ");
      sb.append("imageIds:");
      if (this.imageIds == null) {
        sb.append("null");
      } else {
        sb.append(this.imageIds);
      }
      first = false;
    }
    if (isSetAudioIds()) {
      if (!first) sb.append(", ");
      sb.append("audioIds:");
      if (this.audioIds == null) {
        sb.append("null");
      } else {
        sb.append(this.audioIds);
      }
      first = false;
    }
    if (isSetUpdateUser()) {
      if (!first) sb.append(", ");
      sb.append("updateUser:");
      if (this.updateUser == null) {
        sb.append("null");
      } else {
        sb.append(this.updateUser);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetAuditTimes()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'auditTimes' is unset! Struct:" + toString());
    }

    if (!isSetOriginStage()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'originStage' is unset! Struct:" + toString());
    }

    if (!isSetLatestStage()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'latestStage' is unset! Struct:" + toString());
    }

    if (!isSetAuditor()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'auditor' is unset! Struct:" + toString());
    }

    if (!isSetAuditTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'auditTime' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AuditDetailStandardSchemeFactory implements SchemeFactory {
    public AuditDetailStandardScheme getScheme() {
      return new AuditDetailStandardScheme();
    }
  }

  private static class AuditDetailStandardScheme extends StandardScheme<AuditDetail> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AuditDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // AUDIT_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.auditTimes = iprot.readI32();
              struct.setAuditTimesIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORIGIN_STAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.originStage = iprot.readI32();
              struct.setOriginStageIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LATEST_STAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.latestStage = iprot.readI32();
              struct.setLatestStageIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AUDITOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.auditor = iprot.readI32();
              struct.setAuditorIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AUDIT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.auditTime = iprot.readI64();
              struct.setAuditTimeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IMAGE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list114 = iprot.readListBegin();
                struct.imageIds = new ArrayList<String>(_list114.size);
                String _elem115;
                for (int _i116 = 0; _i116 < _list114.size; ++_i116)
                {
                  _elem115 = iprot.readString();
                  struct.imageIds.add(_elem115);
                }
                iprot.readListEnd();
              }
              struct.setImageIdsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // AUDIO_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list117 = iprot.readListBegin();
                struct.audioIds = new ArrayList<String>(_list117.size);
                String _elem118;
                for (int _i119 = 0; _i119 < _list117.size; ++_i119)
                {
                  _elem118 = iprot.readString();
                  struct.audioIds.add(_elem118);
                }
                iprot.readListEnd();
              }
              struct.setAudioIdsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // UPDATE_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateUser = iprot.readString();
              struct.setUpdateUserIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AuditDetail struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(AUDIT_TIMES_FIELD_DESC);
      oprot.writeI32(struct.auditTimes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORIGIN_STAGE_FIELD_DESC);
      oprot.writeI32(struct.originStage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LATEST_STAGE_FIELD_DESC);
      oprot.writeI32(struct.latestStage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AUDITOR_FIELD_DESC);
      oprot.writeI32(struct.auditor);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AUDIT_TIME_FIELD_DESC);
      oprot.writeI64(struct.auditTime);
      oprot.writeFieldEnd();
      if (struct.imageIds != null) {
        if (struct.isSetImageIds()) {
          oprot.writeFieldBegin(IMAGE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.imageIds.size()));
            for (String _iter120 : struct.imageIds)
            {
              oprot.writeString(_iter120);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.audioIds != null) {
        if (struct.isSetAudioIds()) {
          oprot.writeFieldBegin(AUDIO_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.audioIds.size()));
            for (String _iter121 : struct.audioIds)
            {
              oprot.writeString(_iter121);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateUser != null) {
        if (struct.isSetUpdateUser()) {
          oprot.writeFieldBegin(UPDATE_USER_FIELD_DESC);
          oprot.writeString(struct.updateUser);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AuditDetailTupleSchemeFactory implements SchemeFactory {
    public AuditDetailTupleScheme getScheme() {
      return new AuditDetailTupleScheme();
    }
  }

  private static class AuditDetailTupleScheme extends TupleScheme<AuditDetail> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AuditDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.auditTimes);
      oprot.writeI32(struct.originStage);
      oprot.writeI32(struct.latestStage);
      oprot.writeI32(struct.auditor);
      oprot.writeI64(struct.auditTime);
      BitSet optionals = new BitSet();
      if (struct.isSetImageIds()) {
        optionals.set(0);
      }
      if (struct.isSetAudioIds()) {
        optionals.set(1);
      }
      if (struct.isSetUpdateUser()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetImageIds()) {
        {
          oprot.writeI32(struct.imageIds.size());
          for (String _iter122 : struct.imageIds)
          {
            oprot.writeString(_iter122);
          }
        }
      }
      if (struct.isSetAudioIds()) {
        {
          oprot.writeI32(struct.audioIds.size());
          for (String _iter123 : struct.audioIds)
          {
            oprot.writeString(_iter123);
          }
        }
      }
      if (struct.isSetUpdateUser()) {
        oprot.writeString(struct.updateUser);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AuditDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.auditTimes = iprot.readI32();
      struct.setAuditTimesIsSet(true);
      struct.originStage = iprot.readI32();
      struct.setOriginStageIsSet(true);
      struct.latestStage = iprot.readI32();
      struct.setLatestStageIsSet(true);
      struct.auditor = iprot.readI32();
      struct.setAuditorIsSet(true);
      struct.auditTime = iprot.readI64();
      struct.setAuditTimeIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list124 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.imageIds = new ArrayList<String>(_list124.size);
          String _elem125;
          for (int _i126 = 0; _i126 < _list124.size; ++_i126)
          {
            _elem125 = iprot.readString();
            struct.imageIds.add(_elem125);
          }
        }
        struct.setImageIdsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list127 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.audioIds = new ArrayList<String>(_list127.size);
          String _elem128;
          for (int _i129 = 0; _i129 < _list127.size; ++_i129)
          {
            _elem128 = iprot.readString();
            struct.audioIds.add(_elem128);
          }
        }
        struct.setAudioIdsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.updateUser = iprot.readString();
        struct.setUpdateUserIsSet(true);
      }
    }
  }

}

