/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.imcuttle.foo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class RecordingApplication implements org.apache.thrift.TBase<RecordingApplication, RecordingApplication._Fields>, java.io.Serializable, Cloneable, Comparable<RecordingApplication> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecordingApplication");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PHASE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("phaseId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SUBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subjectId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField QUESTION_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("questionSource", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField STAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("stage", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SECRECY_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("secrecyEndTime", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField ESTIMATED_QUESTION_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("estimatedQuestionNum", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField SUBMIT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("submitTime", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField PUBLISH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("publishTime", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField CREATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("creator", org.apache.thrift.protocol.TType.I32, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RecordingApplicationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RecordingApplicationTupleSchemeFactory());
  }

  private long id; // required
  private int phaseId; // required
  private int subjectId; // required
  private String name; // required
  private int questionSource; // required
  private String resourceId; // required
  private String fileName; // required
  private int stage; // required
  private String remark; // optional
  private long secrecyEndTime; // optional
  private int estimatedQuestionNum; // optional
  private long submitTime; // optional
  private long publishTime; // optional
  private int creator; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PHASE_ID((short)2, "phaseId"),
    SUBJECT_ID((short)3, "subjectId"),
    NAME((short)4, "name"),
    QUESTION_SOURCE((short)5, "questionSource"),
    RESOURCE_ID((short)6, "resourceId"),
    FILE_NAME((short)7, "fileName"),
    STAGE((short)8, "stage"),
    REMARK((short)9, "remark"),
    SECRECY_END_TIME((short)10, "secrecyEndTime"),
    ESTIMATED_QUESTION_NUM((short)11, "estimatedQuestionNum"),
    SUBMIT_TIME((short)12, "submitTime"),
    PUBLISH_TIME((short)13, "publishTime"),
    CREATOR((short)14, "creator");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PHASE_ID
          return PHASE_ID;
        case 3: // SUBJECT_ID
          return SUBJECT_ID;
        case 4: // NAME
          return NAME;
        case 5: // QUESTION_SOURCE
          return QUESTION_SOURCE;
        case 6: // RESOURCE_ID
          return RESOURCE_ID;
        case 7: // FILE_NAME
          return FILE_NAME;
        case 8: // STAGE
          return STAGE;
        case 9: // REMARK
          return REMARK;
        case 10: // SECRECY_END_TIME
          return SECRECY_END_TIME;
        case 11: // ESTIMATED_QUESTION_NUM
          return ESTIMATED_QUESTION_NUM;
        case 12: // SUBMIT_TIME
          return SUBMIT_TIME;
        case 13: // PUBLISH_TIME
          return PUBLISH_TIME;
        case 14: // CREATOR
          return CREATOR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PHASEID_ISSET_ID = 1;
  private static final int __SUBJECTID_ISSET_ID = 2;
  private static final int __QUESTIONSOURCE_ISSET_ID = 3;
  private static final int __STAGE_ISSET_ID = 4;
  private static final int __SECRECYENDTIME_ISSET_ID = 5;
  private static final int __ESTIMATEDQUESTIONNUM_ISSET_ID = 6;
  private static final int __SUBMITTIME_ISSET_ID = 7;
  private static final int __PUBLISHTIME_ISSET_ID = 8;
  private static final int __CREATOR_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.REMARK,_Fields.SECRECY_END_TIME,_Fields.ESTIMATED_QUESTION_NUM,_Fields.SUBMIT_TIME,_Fields.PUBLISH_TIME,_Fields.CREATOR};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PHASE_ID, new org.apache.thrift.meta_data.FieldMetaData("phaseId", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("subjectId", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUESTION_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("questionSource", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("resourceId", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STAGE, new org.apache.thrift.meta_data.FieldMetaData("stage", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SECRECY_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("secrecyEndTime", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ESTIMATED_QUESTION_NUM, new org.apache.thrift.meta_data.FieldMetaData("estimatedQuestionNum", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUBMIT_TIME, new org.apache.thrift.meta_data.FieldMetaData("submitTime", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PUBLISH_TIME, new org.apache.thrift.meta_data.FieldMetaData("publishTime", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATOR, new org.apache.thrift.meta_data.FieldMetaData("creator", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecordingApplication.class, metaDataMap);
  }

  public RecordingApplication() {
  }

  public RecordingApplication(
    long id,
    int phaseId,
    int subjectId,
    String name,
    int questionSource,
    String resourceId,
    String fileName,
    int stage)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.phaseId = phaseId;
    setPhaseIdIsSet(true);
    this.subjectId = subjectId;
    setSubjectIdIsSet(true);
    this.name = name;
    this.questionSource = questionSource;
    setQuestionSourceIsSet(true);
    this.resourceId = resourceId;
    this.fileName = fileName;
    this.stage = stage;
    setStageIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RecordingApplication(RecordingApplication other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.phaseId = other.phaseId;
    this.subjectId = other.subjectId;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.questionSource = other.questionSource;
    if (other.isSetResourceId()) {
      this.resourceId = other.resourceId;
    }
    if (other.isSetFileName()) {
      this.fileName = other.fileName;
    }
    this.stage = other.stage;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.secrecyEndTime = other.secrecyEndTime;
    this.estimatedQuestionNum = other.estimatedQuestionNum;
    this.submitTime = other.submitTime;
    this.publishTime = other.publishTime;
    this.creator = other.creator;
  }

  public RecordingApplication deepCopy() {
    return new RecordingApplication(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setPhaseIdIsSet(false);
    this.phaseId = 0;
    setSubjectIdIsSet(false);
    this.subjectId = 0;
    this.name = null;
    setQuestionSourceIsSet(false);
    this.questionSource = 0;
    this.resourceId = null;
    this.fileName = null;
    setStageIsSet(false);
    this.stage = 0;
    this.remark = null;
    setSecrecyEndTimeIsSet(false);
    this.secrecyEndTime = 0;
    setEstimatedQuestionNumIsSet(false);
    this.estimatedQuestionNum = 0;
    setSubmitTimeIsSet(false);
    this.submitTime = 0;
    setPublishTimeIsSet(false);
    this.publishTime = 0;
    setCreatorIsSet(false);
    this.creator = 0;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getPhaseId() {
    return this.phaseId;
  }

  public void setPhaseId(int phaseId) {
    this.phaseId = phaseId;
    setPhaseIdIsSet(true);
  }

  public void unsetPhaseId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PHASEID_ISSET_ID);
  }

  /** Returns true if field phaseId is set (has been assigned a value) and false otherwise */
  public boolean isSetPhaseId() {
    return EncodingUtils.testBit(__isset_bitfield, __PHASEID_ISSET_ID);
  }

  public void setPhaseIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PHASEID_ISSET_ID, value);
  }

  public int getSubjectId() {
    return this.subjectId;
  }

  public void setSubjectId(int subjectId) {
    this.subjectId = subjectId;
    setSubjectIdIsSet(true);
  }

  public void unsetSubjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBJECTID_ISSET_ID);
  }

  /** Returns true if field subjectId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBJECTID_ISSET_ID);
  }

  public void setSubjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBJECTID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getQuestionSource() {
    return this.questionSource;
  }

  public void setQuestionSource(int questionSource) {
    this.questionSource = questionSource;
    setQuestionSourceIsSet(true);
  }

  public void unsetQuestionSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUESTIONSOURCE_ISSET_ID);
  }

  /** Returns true if field questionSource is set (has been assigned a value) and false otherwise */
  public boolean isSetQuestionSource() {
    return EncodingUtils.testBit(__isset_bitfield, __QUESTIONSOURCE_ISSET_ID);
  }

  public void setQuestionSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUESTIONSOURCE_ISSET_ID, value);
  }

  public String getResourceId() {
    return this.resourceId;
  }

  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }

  public void unsetResourceId() {
    this.resourceId = null;
  }

  /** Returns true if field resourceId is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceId() {
    return this.resourceId != null;
  }

  public void setResourceIdIsSet(boolean value) {
    if (!value) {
      this.resourceId = null;
    }
  }

  public String getFileName() {
    return this.fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }

  public void unsetFileName() {
    this.fileName = null;
  }

  /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
  public boolean isSetFileName() {
    return this.fileName != null;
  }

  public void setFileNameIsSet(boolean value) {
    if (!value) {
      this.fileName = null;
    }
  }

  public int getStage() {
    return this.stage;
  }

  public void setStage(int stage) {
    this.stage = stage;
    setStageIsSet(true);
  }

  public void unsetStage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STAGE_ISSET_ID);
  }

  /** Returns true if field stage is set (has been assigned a value) and false otherwise */
  public boolean isSetStage() {
    return EncodingUtils.testBit(__isset_bitfield, __STAGE_ISSET_ID);
  }

  public void setStageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STAGE_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public void setRemark(String remark) {
    this.remark = remark;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public long getSecrecyEndTime() {
    return this.secrecyEndTime;
  }

  public void setSecrecyEndTime(long secrecyEndTime) {
    this.secrecyEndTime = secrecyEndTime;
    setSecrecyEndTimeIsSet(true);
  }

  public void unsetSecrecyEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SECRECYENDTIME_ISSET_ID);
  }

  /** Returns true if field secrecyEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSecrecyEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SECRECYENDTIME_ISSET_ID);
  }

  public void setSecrecyEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SECRECYENDTIME_ISSET_ID, value);
  }

  public int getEstimatedQuestionNum() {
    return this.estimatedQuestionNum;
  }

  public void setEstimatedQuestionNum(int estimatedQuestionNum) {
    this.estimatedQuestionNum = estimatedQuestionNum;
    setEstimatedQuestionNumIsSet(true);
  }

  public void unsetEstimatedQuestionNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ESTIMATEDQUESTIONNUM_ISSET_ID);
  }

  /** Returns true if field estimatedQuestionNum is set (has been assigned a value) and false otherwise */
  public boolean isSetEstimatedQuestionNum() {
    return EncodingUtils.testBit(__isset_bitfield, __ESTIMATEDQUESTIONNUM_ISSET_ID);
  }

  public void setEstimatedQuestionNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ESTIMATEDQUESTIONNUM_ISSET_ID, value);
  }

  public long getSubmitTime() {
    return this.submitTime;
  }

  public void setSubmitTime(long submitTime) {
    this.submitTime = submitTime;
    setSubmitTimeIsSet(true);
  }

  public void unsetSubmitTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBMITTIME_ISSET_ID);
  }

  /** Returns true if field submitTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSubmitTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBMITTIME_ISSET_ID);
  }

  public void setSubmitTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBMITTIME_ISSET_ID, value);
  }

  public long getPublishTime() {
    return this.publishTime;
  }

  public void setPublishTime(long publishTime) {
    this.publishTime = publishTime;
    setPublishTimeIsSet(true);
  }

  public void unsetPublishTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBLISHTIME_ISSET_ID);
  }

  /** Returns true if field publishTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPublishTime() {
    return EncodingUtils.testBit(__isset_bitfield, __PUBLISHTIME_ISSET_ID);
  }

  public void setPublishTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBLISHTIME_ISSET_ID, value);
  }

  public int getCreator() {
    return this.creator;
  }

  public void setCreator(int creator) {
    this.creator = creator;
    setCreatorIsSet(true);
  }

  public void unsetCreator() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATOR_ISSET_ID);
  }

  /** Returns true if field creator is set (has been assigned a value) and false otherwise */
  public boolean isSetCreator() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATOR_ISSET_ID);
  }

  public void setCreatorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATOR_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case PHASE_ID:
      if (value == null) {
        unsetPhaseId();
      } else {
        setPhaseId((Integer)value);
      }
      break;

    case SUBJECT_ID:
      if (value == null) {
        unsetSubjectId();
      } else {
        setSubjectId((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case QUESTION_SOURCE:
      if (value == null) {
        unsetQuestionSource();
      } else {
        setQuestionSource((Integer)value);
      }
      break;

    case RESOURCE_ID:
      if (value == null) {
        unsetResourceId();
      } else {
        setResourceId((String)value);
      }
      break;

    case FILE_NAME:
      if (value == null) {
        unsetFileName();
      } else {
        setFileName((String)value);
      }
      break;

    case STAGE:
      if (value == null) {
        unsetStage();
      } else {
        setStage((Integer)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case SECRECY_END_TIME:
      if (value == null) {
        unsetSecrecyEndTime();
      } else {
        setSecrecyEndTime((Long)value);
      }
      break;

    case ESTIMATED_QUESTION_NUM:
      if (value == null) {
        unsetEstimatedQuestionNum();
      } else {
        setEstimatedQuestionNum((Integer)value);
      }
      break;

    case SUBMIT_TIME:
      if (value == null) {
        unsetSubmitTime();
      } else {
        setSubmitTime((Long)value);
      }
      break;

    case PUBLISH_TIME:
      if (value == null) {
        unsetPublishTime();
      } else {
        setPublishTime((Long)value);
      }
      break;

    case CREATOR:
      if (value == null) {
        unsetCreator();
      } else {
        setCreator((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case PHASE_ID:
      return getPhaseId();

    case SUBJECT_ID:
      return getSubjectId();

    case NAME:
      return getName();

    case QUESTION_SOURCE:
      return getQuestionSource();

    case RESOURCE_ID:
      return getResourceId();

    case FILE_NAME:
      return getFileName();

    case STAGE:
      return getStage();

    case REMARK:
      return getRemark();

    case SECRECY_END_TIME:
      return getSecrecyEndTime();

    case ESTIMATED_QUESTION_NUM:
      return getEstimatedQuestionNum();

    case SUBMIT_TIME:
      return getSubmitTime();

    case PUBLISH_TIME:
      return getPublishTime();

    case CREATOR:
      return getCreator();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PHASE_ID:
      return isSetPhaseId();
    case SUBJECT_ID:
      return isSetSubjectId();
    case NAME:
      return isSetName();
    case QUESTION_SOURCE:
      return isSetQuestionSource();
    case RESOURCE_ID:
      return isSetResourceId();
    case FILE_NAME:
      return isSetFileName();
    case STAGE:
      return isSetStage();
    case REMARK:
      return isSetRemark();
    case SECRECY_END_TIME:
      return isSetSecrecyEndTime();
    case ESTIMATED_QUESTION_NUM:
      return isSetEstimatedQuestionNum();
    case SUBMIT_TIME:
      return isSetSubmitTime();
    case PUBLISH_TIME:
      return isSetPublishTime();
    case CREATOR:
      return isSetCreator();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RecordingApplication)
      return this.equals((RecordingApplication)that);
    return false;
  }

  public boolean equals(RecordingApplication that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_phaseId = true;
    boolean that_present_phaseId = true;
    if (this_present_phaseId || that_present_phaseId) {
      if (!(this_present_phaseId && that_present_phaseId))
        return false;
      if (this.phaseId != that.phaseId)
        return false;
    }

    boolean this_present_subjectId = true;
    boolean that_present_subjectId = true;
    if (this_present_subjectId || that_present_subjectId) {
      if (!(this_present_subjectId && that_present_subjectId))
        return false;
      if (this.subjectId != that.subjectId)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_questionSource = true;
    boolean that_present_questionSource = true;
    if (this_present_questionSource || that_present_questionSource) {
      if (!(this_present_questionSource && that_present_questionSource))
        return false;
      if (this.questionSource != that.questionSource)
        return false;
    }

    boolean this_present_resourceId = true && this.isSetResourceId();
    boolean that_present_resourceId = true && that.isSetResourceId();
    if (this_present_resourceId || that_present_resourceId) {
      if (!(this_present_resourceId && that_present_resourceId))
        return false;
      if (!this.resourceId.equals(that.resourceId))
        return false;
    }

    boolean this_present_fileName = true && this.isSetFileName();
    boolean that_present_fileName = true && that.isSetFileName();
    if (this_present_fileName || that_present_fileName) {
      if (!(this_present_fileName && that_present_fileName))
        return false;
      if (!this.fileName.equals(that.fileName))
        return false;
    }

    boolean this_present_stage = true;
    boolean that_present_stage = true;
    if (this_present_stage || that_present_stage) {
      if (!(this_present_stage && that_present_stage))
        return false;
      if (this.stage != that.stage)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_secrecyEndTime = true && this.isSetSecrecyEndTime();
    boolean that_present_secrecyEndTime = true && that.isSetSecrecyEndTime();
    if (this_present_secrecyEndTime || that_present_secrecyEndTime) {
      if (!(this_present_secrecyEndTime && that_present_secrecyEndTime))
        return false;
      if (this.secrecyEndTime != that.secrecyEndTime)
        return false;
    }

    boolean this_present_estimatedQuestionNum = true && this.isSetEstimatedQuestionNum();
    boolean that_present_estimatedQuestionNum = true && that.isSetEstimatedQuestionNum();
    if (this_present_estimatedQuestionNum || that_present_estimatedQuestionNum) {
      if (!(this_present_estimatedQuestionNum && that_present_estimatedQuestionNum))
        return false;
      if (this.estimatedQuestionNum != that.estimatedQuestionNum)
        return false;
    }

    boolean this_present_submitTime = true && this.isSetSubmitTime();
    boolean that_present_submitTime = true && that.isSetSubmitTime();
    if (this_present_submitTime || that_present_submitTime) {
      if (!(this_present_submitTime && that_present_submitTime))
        return false;
      if (this.submitTime != that.submitTime)
        return false;
    }

    boolean this_present_publishTime = true && this.isSetPublishTime();
    boolean that_present_publishTime = true && that.isSetPublishTime();
    if (this_present_publishTime || that_present_publishTime) {
      if (!(this_present_publishTime && that_present_publishTime))
        return false;
      if (this.publishTime != that.publishTime)
        return false;
    }

    boolean this_present_creator = true && this.isSetCreator();
    boolean that_present_creator = true && that.isSetCreator();
    if (this_present_creator || that_present_creator) {
      if (!(this_present_creator && that_present_creator))
        return false;
      if (this.creator != that.creator)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_phaseId = true;
    list.add(present_phaseId);
    if (present_phaseId)
      list.add(phaseId);

    boolean present_subjectId = true;
    list.add(present_subjectId);
    if (present_subjectId)
      list.add(subjectId);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_questionSource = true;
    list.add(present_questionSource);
    if (present_questionSource)
      list.add(questionSource);

    boolean present_resourceId = true && (isSetResourceId());
    list.add(present_resourceId);
    if (present_resourceId)
      list.add(resourceId);

    boolean present_fileName = true && (isSetFileName());
    list.add(present_fileName);
    if (present_fileName)
      list.add(fileName);

    boolean present_stage = true;
    list.add(present_stage);
    if (present_stage)
      list.add(stage);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_secrecyEndTime = true && (isSetSecrecyEndTime());
    list.add(present_secrecyEndTime);
    if (present_secrecyEndTime)
      list.add(secrecyEndTime);

    boolean present_estimatedQuestionNum = true && (isSetEstimatedQuestionNum());
    list.add(present_estimatedQuestionNum);
    if (present_estimatedQuestionNum)
      list.add(estimatedQuestionNum);

    boolean present_submitTime = true && (isSetSubmitTime());
    list.add(present_submitTime);
    if (present_submitTime)
      list.add(submitTime);

    boolean present_publishTime = true && (isSetPublishTime());
    list.add(present_publishTime);
    if (present_publishTime)
      list.add(publishTime);

    boolean present_creator = true && (isSetCreator());
    list.add(present_creator);
    if (present_creator)
      list.add(creator);

    return list.hashCode();
  }

  @Override
  public int compareTo(RecordingApplication other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhaseId()).compareTo(other.isSetPhaseId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhaseId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phaseId, other.phaseId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubjectId()).compareTo(other.isSetSubjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subjectId, other.subjectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuestionSource()).compareTo(other.isSetQuestionSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestionSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionSource, other.questionSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceId()).compareTo(other.isSetResourceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceId, other.resourceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStage()).compareTo(other.isSetStage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stage, other.stage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecrecyEndTime()).compareTo(other.isSetSecrecyEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecrecyEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secrecyEndTime, other.secrecyEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEstimatedQuestionNum()).compareTo(other.isSetEstimatedQuestionNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEstimatedQuestionNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.estimatedQuestionNum, other.estimatedQuestionNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubmitTime()).compareTo(other.isSetSubmitTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubmitTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.submitTime, other.submitTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublishTime()).compareTo(other.isSetPublishTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublishTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publishTime, other.publishTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreator()).compareTo(other.isSetCreator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creator, other.creator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RecordingApplication(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("phaseId:");
    sb.append(this.phaseId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("subjectId:");
    sb.append(this.subjectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("questionSource:");
    sb.append(this.questionSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("resourceId:");
    if (this.resourceId == null) {
      sb.append("null");
    } else {
      sb.append(this.resourceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileName:");
    if (this.fileName == null) {
      sb.append("null");
    } else {
      sb.append(this.fileName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stage:");
    sb.append(this.stage);
    first = false;
    if (isSetRemark()) {
      if (!first) sb.append(", ");
      sb.append("remark:");
      if (this.remark == null) {
        sb.append("null");
      } else {
        sb.append(this.remark);
      }
      first = false;
    }
    if (isSetSecrecyEndTime()) {
      if (!first) sb.append(", ");
      sb.append("secrecyEndTime:");
      sb.append(this.secrecyEndTime);
      first = false;
    }
    if (isSetEstimatedQuestionNum()) {
      if (!first) sb.append(", ");
      sb.append("estimatedQuestionNum:");
      sb.append(this.estimatedQuestionNum);
      first = false;
    }
    if (isSetSubmitTime()) {
      if (!first) sb.append(", ");
      sb.append("submitTime:");
      sb.append(this.submitTime);
      first = false;
    }
    if (isSetPublishTime()) {
      if (!first) sb.append(", ");
      sb.append("publishTime:");
      sb.append(this.publishTime);
      first = false;
    }
    if (isSetCreator()) {
      if (!first) sb.append(", ");
      sb.append("creator:");
      sb.append(this.creator);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' is unset! Struct:" + toString());
    }

    if (!isSetPhaseId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'phaseId' is unset! Struct:" + toString());
    }

    if (!isSetSubjectId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'subjectId' is unset! Struct:" + toString());
    }

    if (!isSetName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' is unset! Struct:" + toString());
    }

    if (!isSetQuestionSource()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'questionSource' is unset! Struct:" + toString());
    }

    if (!isSetResourceId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'resourceId' is unset! Struct:" + toString());
    }

    if (!isSetFileName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fileName' is unset! Struct:" + toString());
    }

    if (!isSetStage()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stage' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RecordingApplicationStandardSchemeFactory implements SchemeFactory {
    public RecordingApplicationStandardScheme getScheme() {
      return new RecordingApplicationStandardScheme();
    }
  }

  private static class RecordingApplicationStandardScheme extends StandardScheme<RecordingApplication> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RecordingApplication struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PHASE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.phaseId = iprot.readI32();
              struct.setPhaseIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SUBJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.subjectId = iprot.readI32();
              struct.setSubjectIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // QUESTION_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.questionSource = iprot.readI32();
              struct.setQuestionSourceIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RESOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourceId = iprot.readString();
              struct.setResourceIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileName = iprot.readString();
              struct.setFileNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stage = iprot.readI32();
              struct.setStageIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SECRECY_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.secrecyEndTime = iprot.readI64();
              struct.setSecrecyEndTimeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ESTIMATED_QUESTION_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.estimatedQuestionNum = iprot.readI32();
              struct.setEstimatedQuestionNumIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SUBMIT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.submitTime = iprot.readI64();
              struct.setSubmitTimeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PUBLISH_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.publishTime = iprot.readI64();
              struct.setPublishTimeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CREATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.creator = iprot.readI32();
              struct.setCreatorIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RecordingApplication struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PHASE_ID_FIELD_DESC);
      oprot.writeI32(struct.phaseId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUBJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.subjectId);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(QUESTION_SOURCE_FIELD_DESC);
      oprot.writeI32(struct.questionSource);
      oprot.writeFieldEnd();
      if (struct.resourceId != null) {
        oprot.writeFieldBegin(RESOURCE_ID_FIELD_DESC);
        oprot.writeString(struct.resourceId);
        oprot.writeFieldEnd();
      }
      if (struct.fileName != null) {
        oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
        oprot.writeString(struct.fileName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STAGE_FIELD_DESC);
      oprot.writeI32(struct.stage);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        if (struct.isSetRemark()) {
          oprot.writeFieldBegin(REMARK_FIELD_DESC);
          oprot.writeString(struct.remark);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSecrecyEndTime()) {
        oprot.writeFieldBegin(SECRECY_END_TIME_FIELD_DESC);
        oprot.writeI64(struct.secrecyEndTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEstimatedQuestionNum()) {
        oprot.writeFieldBegin(ESTIMATED_QUESTION_NUM_FIELD_DESC);
        oprot.writeI32(struct.estimatedQuestionNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSubmitTime()) {
        oprot.writeFieldBegin(SUBMIT_TIME_FIELD_DESC);
        oprot.writeI64(struct.submitTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPublishTime()) {
        oprot.writeFieldBegin(PUBLISH_TIME_FIELD_DESC);
        oprot.writeI64(struct.publishTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreator()) {
        oprot.writeFieldBegin(CREATOR_FIELD_DESC);
        oprot.writeI32(struct.creator);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RecordingApplicationTupleSchemeFactory implements SchemeFactory {
    public RecordingApplicationTupleScheme getScheme() {
      return new RecordingApplicationTupleScheme();
    }
  }

  private static class RecordingApplicationTupleScheme extends TupleScheme<RecordingApplication> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RecordingApplication struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.id);
      oprot.writeI32(struct.phaseId);
      oprot.writeI32(struct.subjectId);
      oprot.writeString(struct.name);
      oprot.writeI32(struct.questionSource);
      oprot.writeString(struct.resourceId);
      oprot.writeString(struct.fileName);
      oprot.writeI32(struct.stage);
      BitSet optionals = new BitSet();
      if (struct.isSetRemark()) {
        optionals.set(0);
      }
      if (struct.isSetSecrecyEndTime()) {
        optionals.set(1);
      }
      if (struct.isSetEstimatedQuestionNum()) {
        optionals.set(2);
      }
      if (struct.isSetSubmitTime()) {
        optionals.set(3);
      }
      if (struct.isSetPublishTime()) {
        optionals.set(4);
      }
      if (struct.isSetCreator()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetSecrecyEndTime()) {
        oprot.writeI64(struct.secrecyEndTime);
      }
      if (struct.isSetEstimatedQuestionNum()) {
        oprot.writeI32(struct.estimatedQuestionNum);
      }
      if (struct.isSetSubmitTime()) {
        oprot.writeI64(struct.submitTime);
      }
      if (struct.isSetPublishTime()) {
        oprot.writeI64(struct.publishTime);
      }
      if (struct.isSetCreator()) {
        oprot.writeI32(struct.creator);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RecordingApplication struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readI64();
      struct.setIdIsSet(true);
      struct.phaseId = iprot.readI32();
      struct.setPhaseIdIsSet(true);
      struct.subjectId = iprot.readI32();
      struct.setSubjectIdIsSet(true);
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.questionSource = iprot.readI32();
      struct.setQuestionSourceIsSet(true);
      struct.resourceId = iprot.readString();
      struct.setResourceIdIsSet(true);
      struct.fileName = iprot.readString();
      struct.setFileNameIsSet(true);
      struct.stage = iprot.readI32();
      struct.setStageIsSet(true);
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(1)) {
        struct.secrecyEndTime = iprot.readI64();
        struct.setSecrecyEndTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.estimatedQuestionNum = iprot.readI32();
        struct.setEstimatedQuestionNumIsSet(true);
      }
      if (incoming.get(3)) {
        struct.submitTime = iprot.readI64();
        struct.setSubmitTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.publishTime = iprot.readI64();
        struct.setPublishTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.creator = iprot.readI32();
        struct.setCreatorIsSet(true);
      }
    }
  }

}

