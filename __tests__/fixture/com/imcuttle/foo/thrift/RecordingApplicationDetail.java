/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.imcuttle.foo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class RecordingApplicationDetail implements org.apache.thrift.TBase<RecordingApplicationDetail, RecordingApplicationDetail._Fields>, java.io.Serializable, Cloneable, Comparable<RecordingApplicationDetail> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecordingApplicationDetail");

  private static final org.apache.thrift.protocol.TField APPLICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("application", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TASK_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("taskList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField CONTAINED_QUESTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("containedQuestions", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField CONTAINED_EXAM_PAPERS_FIELD_DESC = new org.apache.thrift.protocol.TField("containedExamPapers", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RecordingApplicationDetailStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RecordingApplicationDetailTupleSchemeFactory());
  }

  private RecordingApplication application; // required
  private List<RecordingTask> taskList; // optional
  private List<QuestionRecordingTask> containedQuestions; // optional
  private List<ExamPaperRecordingTask> containedExamPapers; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APPLICATION((short)1, "application"),
    TASK_LIST((short)2, "taskList"),
    CONTAINED_QUESTIONS((short)3, "containedQuestions"),
    CONTAINED_EXAM_PAPERS((short)4, "containedExamPapers");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APPLICATION
          return APPLICATION;
        case 2: // TASK_LIST
          return TASK_LIST;
        case 3: // CONTAINED_QUESTIONS
          return CONTAINED_QUESTIONS;
        case 4: // CONTAINED_EXAM_PAPERS
          return CONTAINED_EXAM_PAPERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.TASK_LIST,_Fields.CONTAINED_QUESTIONS,_Fields.CONTAINED_EXAM_PAPERS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APPLICATION, new org.apache.thrift.meta_data.FieldMetaData("application", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RecordingApplication.class)));
    tmpMap.put(_Fields.TASK_LIST, new org.apache.thrift.meta_data.FieldMetaData("taskList", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RecordingTask.class))));
    tmpMap.put(_Fields.CONTAINED_QUESTIONS, new org.apache.thrift.meta_data.FieldMetaData("containedQuestions", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, QuestionRecordingTask.class))));
    tmpMap.put(_Fields.CONTAINED_EXAM_PAPERS, new org.apache.thrift.meta_data.FieldMetaData("containedExamPapers", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExamPaperRecordingTask.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecordingApplicationDetail.class, metaDataMap);
  }

  public RecordingApplicationDetail() {
  }

  public RecordingApplicationDetail(
    RecordingApplication application)
  {
    this();
    this.application = application;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RecordingApplicationDetail(RecordingApplicationDetail other) {
    if (other.isSetApplication()) {
      this.application = new RecordingApplication(other.application);
    }
    if (other.isSetTaskList()) {
      List<RecordingTask> __this__taskList = new ArrayList<RecordingTask>(other.taskList.size());
      for (RecordingTask other_element : other.taskList) {
        __this__taskList.add(new RecordingTask(other_element));
      }
      this.taskList = __this__taskList;
    }
    if (other.isSetContainedQuestions()) {
      List<QuestionRecordingTask> __this__containedQuestions = new ArrayList<QuestionRecordingTask>(other.containedQuestions.size());
      for (QuestionRecordingTask other_element : other.containedQuestions) {
        __this__containedQuestions.add(new QuestionRecordingTask(other_element));
      }
      this.containedQuestions = __this__containedQuestions;
    }
    if (other.isSetContainedExamPapers()) {
      List<ExamPaperRecordingTask> __this__containedExamPapers = new ArrayList<ExamPaperRecordingTask>(other.containedExamPapers.size());
      for (ExamPaperRecordingTask other_element : other.containedExamPapers) {
        __this__containedExamPapers.add(new ExamPaperRecordingTask(other_element));
      }
      this.containedExamPapers = __this__containedExamPapers;
    }
  }

  public RecordingApplicationDetail deepCopy() {
    return new RecordingApplicationDetail(this);
  }

  @Override
  public void clear() {
    this.application = null;
    this.taskList = null;
    this.containedQuestions = null;
    this.containedExamPapers = null;
  }

  public RecordingApplication getApplication() {
    return this.application;
  }

  public void setApplication(RecordingApplication application) {
    this.application = application;
  }

  public void unsetApplication() {
    this.application = null;
  }

  /** Returns true if field application is set (has been assigned a value) and false otherwise */
  public boolean isSetApplication() {
    return this.application != null;
  }

  public void setApplicationIsSet(boolean value) {
    if (!value) {
      this.application = null;
    }
  }

  public int getTaskListSize() {
    return (this.taskList == null) ? 0 : this.taskList.size();
  }

  public java.util.Iterator<RecordingTask> getTaskListIterator() {
    return (this.taskList == null) ? null : this.taskList.iterator();
  }

  public void addToTaskList(RecordingTask elem) {
    if (this.taskList == null) {
      this.taskList = new ArrayList<RecordingTask>();
    }
    this.taskList.add(elem);
  }

  public List<RecordingTask> getTaskList() {
    return this.taskList;
  }

  public void setTaskList(List<RecordingTask> taskList) {
    this.taskList = taskList;
  }

  public void unsetTaskList() {
    this.taskList = null;
  }

  /** Returns true if field taskList is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskList() {
    return this.taskList != null;
  }

  public void setTaskListIsSet(boolean value) {
    if (!value) {
      this.taskList = null;
    }
  }

  public int getContainedQuestionsSize() {
    return (this.containedQuestions == null) ? 0 : this.containedQuestions.size();
  }

  public java.util.Iterator<QuestionRecordingTask> getContainedQuestionsIterator() {
    return (this.containedQuestions == null) ? null : this.containedQuestions.iterator();
  }

  public void addToContainedQuestions(QuestionRecordingTask elem) {
    if (this.containedQuestions == null) {
      this.containedQuestions = new ArrayList<QuestionRecordingTask>();
    }
    this.containedQuestions.add(elem);
  }

  public List<QuestionRecordingTask> getContainedQuestions() {
    return this.containedQuestions;
  }

  public void setContainedQuestions(List<QuestionRecordingTask> containedQuestions) {
    this.containedQuestions = containedQuestions;
  }

  public void unsetContainedQuestions() {
    this.containedQuestions = null;
  }

  /** Returns true if field containedQuestions is set (has been assigned a value) and false otherwise */
  public boolean isSetContainedQuestions() {
    return this.containedQuestions != null;
  }

  public void setContainedQuestionsIsSet(boolean value) {
    if (!value) {
      this.containedQuestions = null;
    }
  }

  public int getContainedExamPapersSize() {
    return (this.containedExamPapers == null) ? 0 : this.containedExamPapers.size();
  }

  public java.util.Iterator<ExamPaperRecordingTask> getContainedExamPapersIterator() {
    return (this.containedExamPapers == null) ? null : this.containedExamPapers.iterator();
  }

  public void addToContainedExamPapers(ExamPaperRecordingTask elem) {
    if (this.containedExamPapers == null) {
      this.containedExamPapers = new ArrayList<ExamPaperRecordingTask>();
    }
    this.containedExamPapers.add(elem);
  }

  public List<ExamPaperRecordingTask> getContainedExamPapers() {
    return this.containedExamPapers;
  }

  public void setContainedExamPapers(List<ExamPaperRecordingTask> containedExamPapers) {
    this.containedExamPapers = containedExamPapers;
  }

  public void unsetContainedExamPapers() {
    this.containedExamPapers = null;
  }

  /** Returns true if field containedExamPapers is set (has been assigned a value) and false otherwise */
  public boolean isSetContainedExamPapers() {
    return this.containedExamPapers != null;
  }

  public void setContainedExamPapersIsSet(boolean value) {
    if (!value) {
      this.containedExamPapers = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APPLICATION:
      if (value == null) {
        unsetApplication();
      } else {
        setApplication((RecordingApplication)value);
      }
      break;

    case TASK_LIST:
      if (value == null) {
        unsetTaskList();
      } else {
        setTaskList((List<RecordingTask>)value);
      }
      break;

    case CONTAINED_QUESTIONS:
      if (value == null) {
        unsetContainedQuestions();
      } else {
        setContainedQuestions((List<QuestionRecordingTask>)value);
      }
      break;

    case CONTAINED_EXAM_PAPERS:
      if (value == null) {
        unsetContainedExamPapers();
      } else {
        setContainedExamPapers((List<ExamPaperRecordingTask>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APPLICATION:
      return getApplication();

    case TASK_LIST:
      return getTaskList();

    case CONTAINED_QUESTIONS:
      return getContainedQuestions();

    case CONTAINED_EXAM_PAPERS:
      return getContainedExamPapers();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APPLICATION:
      return isSetApplication();
    case TASK_LIST:
      return isSetTaskList();
    case CONTAINED_QUESTIONS:
      return isSetContainedQuestions();
    case CONTAINED_EXAM_PAPERS:
      return isSetContainedExamPapers();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RecordingApplicationDetail)
      return this.equals((RecordingApplicationDetail)that);
    return false;
  }

  public boolean equals(RecordingApplicationDetail that) {
    if (that == null)
      return false;

    boolean this_present_application = true && this.isSetApplication();
    boolean that_present_application = true && that.isSetApplication();
    if (this_present_application || that_present_application) {
      if (!(this_present_application && that_present_application))
        return false;
      if (!this.application.equals(that.application))
        return false;
    }

    boolean this_present_taskList = true && this.isSetTaskList();
    boolean that_present_taskList = true && that.isSetTaskList();
    if (this_present_taskList || that_present_taskList) {
      if (!(this_present_taskList && that_present_taskList))
        return false;
      if (!this.taskList.equals(that.taskList))
        return false;
    }

    boolean this_present_containedQuestions = true && this.isSetContainedQuestions();
    boolean that_present_containedQuestions = true && that.isSetContainedQuestions();
    if (this_present_containedQuestions || that_present_containedQuestions) {
      if (!(this_present_containedQuestions && that_present_containedQuestions))
        return false;
      if (!this.containedQuestions.equals(that.containedQuestions))
        return false;
    }

    boolean this_present_containedExamPapers = true && this.isSetContainedExamPapers();
    boolean that_present_containedExamPapers = true && that.isSetContainedExamPapers();
    if (this_present_containedExamPapers || that_present_containedExamPapers) {
      if (!(this_present_containedExamPapers && that_present_containedExamPapers))
        return false;
      if (!this.containedExamPapers.equals(that.containedExamPapers))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_application = true && (isSetApplication());
    list.add(present_application);
    if (present_application)
      list.add(application);

    boolean present_taskList = true && (isSetTaskList());
    list.add(present_taskList);
    if (present_taskList)
      list.add(taskList);

    boolean present_containedQuestions = true && (isSetContainedQuestions());
    list.add(present_containedQuestions);
    if (present_containedQuestions)
      list.add(containedQuestions);

    boolean present_containedExamPapers = true && (isSetContainedExamPapers());
    list.add(present_containedExamPapers);
    if (present_containedExamPapers)
      list.add(containedExamPapers);

    return list.hashCode();
  }

  @Override
  public int compareTo(RecordingApplicationDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetApplication()).compareTo(other.isSetApplication());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplication()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.application, other.application);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskList()).compareTo(other.isSetTaskList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskList, other.taskList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContainedQuestions()).compareTo(other.isSetContainedQuestions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContainedQuestions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.containedQuestions, other.containedQuestions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContainedExamPapers()).compareTo(other.isSetContainedExamPapers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContainedExamPapers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.containedExamPapers, other.containedExamPapers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RecordingApplicationDetail(");
    boolean first = true;

    sb.append("application:");
    if (this.application == null) {
      sb.append("null");
    } else {
      sb.append(this.application);
    }
    first = false;
    if (isSetTaskList()) {
      if (!first) sb.append(", ");
      sb.append("taskList:");
      if (this.taskList == null) {
        sb.append("null");
      } else {
        sb.append(this.taskList);
      }
      first = false;
    }
    if (isSetContainedQuestions()) {
      if (!first) sb.append(", ");
      sb.append("containedQuestions:");
      if (this.containedQuestions == null) {
        sb.append("null");
      } else {
        sb.append(this.containedQuestions);
      }
      first = false;
    }
    if (isSetContainedExamPapers()) {
      if (!first) sb.append(", ");
      sb.append("containedExamPapers:");
      if (this.containedExamPapers == null) {
        sb.append("null");
      } else {
        sb.append(this.containedExamPapers);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetApplication()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'application' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (application != null) {
      application.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RecordingApplicationDetailStandardSchemeFactory implements SchemeFactory {
    public RecordingApplicationDetailStandardScheme getScheme() {
      return new RecordingApplicationDetailStandardScheme();
    }
  }

  private static class RecordingApplicationDetailStandardScheme extends StandardScheme<RecordingApplicationDetail> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RecordingApplicationDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // APPLICATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.application = new RecordingApplication();
              struct.application.read(iprot);
              struct.setApplicationIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TASK_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                struct.taskList = new ArrayList<RecordingTask>(_list64.size);
                RecordingTask _elem65;
                for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                {
                  _elem65 = new RecordingTask();
                  _elem65.read(iprot);
                  struct.taskList.add(_elem65);
                }
                iprot.readListEnd();
              }
              struct.setTaskListIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTAINED_QUESTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list67 = iprot.readListBegin();
                struct.containedQuestions = new ArrayList<QuestionRecordingTask>(_list67.size);
                QuestionRecordingTask _elem68;
                for (int _i69 = 0; _i69 < _list67.size; ++_i69)
                {
                  _elem68 = new QuestionRecordingTask();
                  _elem68.read(iprot);
                  struct.containedQuestions.add(_elem68);
                }
                iprot.readListEnd();
              }
              struct.setContainedQuestionsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTAINED_EXAM_PAPERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list70 = iprot.readListBegin();
                struct.containedExamPapers = new ArrayList<ExamPaperRecordingTask>(_list70.size);
                ExamPaperRecordingTask _elem71;
                for (int _i72 = 0; _i72 < _list70.size; ++_i72)
                {
                  _elem71 = new ExamPaperRecordingTask();
                  _elem71.read(iprot);
                  struct.containedExamPapers.add(_elem71);
                }
                iprot.readListEnd();
              }
              struct.setContainedExamPapersIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RecordingApplicationDetail struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.application != null) {
        oprot.writeFieldBegin(APPLICATION_FIELD_DESC);
        struct.application.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.taskList != null) {
        if (struct.isSetTaskList()) {
          oprot.writeFieldBegin(TASK_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.taskList.size()));
            for (RecordingTask _iter73 : struct.taskList)
            {
              _iter73.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.containedQuestions != null) {
        if (struct.isSetContainedQuestions()) {
          oprot.writeFieldBegin(CONTAINED_QUESTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.containedQuestions.size()));
            for (QuestionRecordingTask _iter74 : struct.containedQuestions)
            {
              _iter74.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.containedExamPapers != null) {
        if (struct.isSetContainedExamPapers()) {
          oprot.writeFieldBegin(CONTAINED_EXAM_PAPERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.containedExamPapers.size()));
            for (ExamPaperRecordingTask _iter75 : struct.containedExamPapers)
            {
              _iter75.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RecordingApplicationDetailTupleSchemeFactory implements SchemeFactory {
    public RecordingApplicationDetailTupleScheme getScheme() {
      return new RecordingApplicationDetailTupleScheme();
    }
  }

  private static class RecordingApplicationDetailTupleScheme extends TupleScheme<RecordingApplicationDetail> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RecordingApplicationDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.application.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetTaskList()) {
        optionals.set(0);
      }
      if (struct.isSetContainedQuestions()) {
        optionals.set(1);
      }
      if (struct.isSetContainedExamPapers()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetTaskList()) {
        {
          oprot.writeI32(struct.taskList.size());
          for (RecordingTask _iter76 : struct.taskList)
          {
            _iter76.write(oprot);
          }
        }
      }
      if (struct.isSetContainedQuestions()) {
        {
          oprot.writeI32(struct.containedQuestions.size());
          for (QuestionRecordingTask _iter77 : struct.containedQuestions)
          {
            _iter77.write(oprot);
          }
        }
      }
      if (struct.isSetContainedExamPapers()) {
        {
          oprot.writeI32(struct.containedExamPapers.size());
          for (ExamPaperRecordingTask _iter78 : struct.containedExamPapers)
          {
            _iter78.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RecordingApplicationDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.application = new RecordingApplication();
      struct.application.read(iprot);
      struct.setApplicationIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list79 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.taskList = new ArrayList<RecordingTask>(_list79.size);
          RecordingTask _elem80;
          for (int _i81 = 0; _i81 < _list79.size; ++_i81)
          {
            _elem80 = new RecordingTask();
            _elem80.read(iprot);
            struct.taskList.add(_elem80);
          }
        }
        struct.setTaskListIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list82 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.containedQuestions = new ArrayList<QuestionRecordingTask>(_list82.size);
          QuestionRecordingTask _elem83;
          for (int _i84 = 0; _i84 < _list82.size; ++_i84)
          {
            _elem83 = new QuestionRecordingTask();
            _elem83.read(iprot);
            struct.containedQuestions.add(_elem83);
          }
        }
        struct.setContainedQuestionsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.containedExamPapers = new ArrayList<ExamPaperRecordingTask>(_list85.size);
          ExamPaperRecordingTask _elem86;
          for (int _i87 = 0; _i87 < _list85.size; ++_i87)
          {
            _elem86 = new ExamPaperRecordingTask();
            _elem86.read(iprot);
            struct.containedExamPapers.add(_elem86);
          }
        }
        struct.setContainedExamPapersIsSet(true);
      }
    }
  }

}

