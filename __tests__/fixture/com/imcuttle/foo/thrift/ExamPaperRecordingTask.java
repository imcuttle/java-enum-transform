/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.imcuttle.foo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class ExamPaperRecordingTask implements org.apache.thrift.TBase<ExamPaperRecordingTask, ExamPaperRecordingTask._Fields>, java.io.Serializable, Cloneable, Comparable<ExamPaperRecordingTask> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExamPaperRecordingTask");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField EXAM_PAPER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("examPaperId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField STAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("stage", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ORDINAL_FIELD_DESC = new org.apache.thrift.protocol.TField("ordinal", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CREATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("creator", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField CREATED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createdTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField AUDIT_DETAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("auditDetails", org.apache.thrift.protocol.TType.LIST, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ExamPaperRecordingTaskStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ExamPaperRecordingTaskTupleSchemeFactory());
  }

  private long id; // required
  private long applicationId; // required
  private long taskId; // required
  private long examPaperId; // required
  private int stage; // required
  private int ordinal; // optional
  private int creator; // optional
  private long createdTime; // optional
  private List<AuditDetail> auditDetails; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    APPLICATION_ID((short)2, "applicationId"),
    TASK_ID((short)3, "taskId"),
    EXAM_PAPER_ID((short)4, "examPaperId"),
    STAGE((short)5, "stage"),
    ORDINAL((short)6, "ordinal"),
    CREATOR((short)7, "creator"),
    CREATED_TIME((short)8, "createdTime"),
    AUDIT_DETAILS((short)9, "auditDetails");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // APPLICATION_ID
          return APPLICATION_ID;
        case 3: // TASK_ID
          return TASK_ID;
        case 4: // EXAM_PAPER_ID
          return EXAM_PAPER_ID;
        case 5: // STAGE
          return STAGE;
        case 6: // ORDINAL
          return ORDINAL;
        case 7: // CREATOR
          return CREATOR;
        case 8: // CREATED_TIME
          return CREATED_TIME;
        case 9: // AUDIT_DETAILS
          return AUDIT_DETAILS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __APPLICATIONID_ISSET_ID = 1;
  private static final int __TASKID_ISSET_ID = 2;
  private static final int __EXAMPAPERID_ISSET_ID = 3;
  private static final int __STAGE_ISSET_ID = 4;
  private static final int __ORDINAL_ISSET_ID = 5;
  private static final int __CREATOR_ISSET_ID = 6;
  private static final int __CREATEDTIME_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ORDINAL,_Fields.CREATOR,_Fields.CREATED_TIME,_Fields.AUDIT_DETAILS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXAM_PAPER_ID, new org.apache.thrift.meta_data.FieldMetaData("examPaperId", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STAGE, new org.apache.thrift.meta_data.FieldMetaData("stage", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDINAL, new org.apache.thrift.meta_data.FieldMetaData("ordinal", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATOR, new org.apache.thrift.meta_data.FieldMetaData("creator", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATED_TIME, new org.apache.thrift.meta_data.FieldMetaData("createdTime", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AUDIT_DETAILS, new org.apache.thrift.meta_data.FieldMetaData("auditDetails", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "AuditDetail"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExamPaperRecordingTask.class, metaDataMap);
  }

  public ExamPaperRecordingTask() {
  }

  public ExamPaperRecordingTask(
    long id,
    long applicationId,
    long taskId,
    long examPaperId,
    int stage)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.applicationId = applicationId;
    setApplicationIdIsSet(true);
    this.taskId = taskId;
    setTaskIdIsSet(true);
    this.examPaperId = examPaperId;
    setExamPaperIdIsSet(true);
    this.stage = stage;
    setStageIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExamPaperRecordingTask(ExamPaperRecordingTask other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.applicationId = other.applicationId;
    this.taskId = other.taskId;
    this.examPaperId = other.examPaperId;
    this.stage = other.stage;
    this.ordinal = other.ordinal;
    this.creator = other.creator;
    this.createdTime = other.createdTime;
    if (other.isSetAuditDetails()) {
      List<AuditDetail> __this__auditDetails = new ArrayList<AuditDetail>(other.auditDetails.size());
      for (AuditDetail other_element : other.auditDetails) {
        __this__auditDetails.add(other_element);
      }
      this.auditDetails = __this__auditDetails;
    }
  }

  public ExamPaperRecordingTask deepCopy() {
    return new ExamPaperRecordingTask(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setApplicationIdIsSet(false);
    this.applicationId = 0;
    setTaskIdIsSet(false);
    this.taskId = 0;
    setExamPaperIdIsSet(false);
    this.examPaperId = 0;
    setStageIsSet(false);
    this.stage = 0;
    setOrdinalIsSet(false);
    this.ordinal = 0;
    setCreatorIsSet(false);
    this.creator = 0;
    setCreatedTimeIsSet(false);
    this.createdTime = 0;
    this.auditDetails = null;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getApplicationId() {
    return this.applicationId;
  }

  public void setApplicationId(long applicationId) {
    this.applicationId = applicationId;
    setApplicationIdIsSet(true);
  }

  public void unsetApplicationId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLICATIONID_ISSET_ID);
  }

  /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationId() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLICATIONID_ISSET_ID);
  }

  public void setApplicationIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLICATIONID_ISSET_ID, value);
  }

  public long getTaskId() {
    return this.taskId;
  }

  public void setTaskId(long taskId) {
    this.taskId = taskId;
    setTaskIdIsSet(true);
  }

  public void unsetTaskId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskId() {
    return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  public void setTaskIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
  }

  public long getExamPaperId() {
    return this.examPaperId;
  }

  public void setExamPaperId(long examPaperId) {
    this.examPaperId = examPaperId;
    setExamPaperIdIsSet(true);
  }

  public void unsetExamPaperId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXAMPAPERID_ISSET_ID);
  }

  /** Returns true if field examPaperId is set (has been assigned a value) and false otherwise */
  public boolean isSetExamPaperId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXAMPAPERID_ISSET_ID);
  }

  public void setExamPaperIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXAMPAPERID_ISSET_ID, value);
  }

  public int getStage() {
    return this.stage;
  }

  public void setStage(int stage) {
    this.stage = stage;
    setStageIsSet(true);
  }

  public void unsetStage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STAGE_ISSET_ID);
  }

  /** Returns true if field stage is set (has been assigned a value) and false otherwise */
  public boolean isSetStage() {
    return EncodingUtils.testBit(__isset_bitfield, __STAGE_ISSET_ID);
  }

  public void setStageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STAGE_ISSET_ID, value);
  }

  public int getOrdinal() {
    return this.ordinal;
  }

  public void setOrdinal(int ordinal) {
    this.ordinal = ordinal;
    setOrdinalIsSet(true);
  }

  public void unsetOrdinal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDINAL_ISSET_ID);
  }

  /** Returns true if field ordinal is set (has been assigned a value) and false otherwise */
  public boolean isSetOrdinal() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDINAL_ISSET_ID);
  }

  public void setOrdinalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDINAL_ISSET_ID, value);
  }

  public int getCreator() {
    return this.creator;
  }

  public void setCreator(int creator) {
    this.creator = creator;
    setCreatorIsSet(true);
  }

  public void unsetCreator() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATOR_ISSET_ID);
  }

  /** Returns true if field creator is set (has been assigned a value) and false otherwise */
  public boolean isSetCreator() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATOR_ISSET_ID);
  }

  public void setCreatorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATOR_ISSET_ID, value);
  }

  public long getCreatedTime() {
    return this.createdTime;
  }

  public void setCreatedTime(long createdTime) {
    this.createdTime = createdTime;
    setCreatedTimeIsSet(true);
  }

  public void unsetCreatedTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATEDTIME_ISSET_ID);
  }

  /** Returns true if field createdTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATEDTIME_ISSET_ID);
  }

  public void setCreatedTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATEDTIME_ISSET_ID, value);
  }

  public int getAuditDetailsSize() {
    return (this.auditDetails == null) ? 0 : this.auditDetails.size();
  }

  public java.util.Iterator<AuditDetail> getAuditDetailsIterator() {
    return (this.auditDetails == null) ? null : this.auditDetails.iterator();
  }

  public void addToAuditDetails(AuditDetail elem) {
    if (this.auditDetails == null) {
      this.auditDetails = new ArrayList<AuditDetail>();
    }
    this.auditDetails.add(elem);
  }

  public List<AuditDetail> getAuditDetails() {
    return this.auditDetails;
  }

  public void setAuditDetails(List<AuditDetail> auditDetails) {
    this.auditDetails = auditDetails;
  }

  public void unsetAuditDetails() {
    this.auditDetails = null;
  }

  /** Returns true if field auditDetails is set (has been assigned a value) and false otherwise */
  public boolean isSetAuditDetails() {
    return this.auditDetails != null;
  }

  public void setAuditDetailsIsSet(boolean value) {
    if (!value) {
      this.auditDetails = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case APPLICATION_ID:
      if (value == null) {
        unsetApplicationId();
      } else {
        setApplicationId((Long)value);
      }
      break;

    case TASK_ID:
      if (value == null) {
        unsetTaskId();
      } else {
        setTaskId((Long)value);
      }
      break;

    case EXAM_PAPER_ID:
      if (value == null) {
        unsetExamPaperId();
      } else {
        setExamPaperId((Long)value);
      }
      break;

    case STAGE:
      if (value == null) {
        unsetStage();
      } else {
        setStage((Integer)value);
      }
      break;

    case ORDINAL:
      if (value == null) {
        unsetOrdinal();
      } else {
        setOrdinal((Integer)value);
      }
      break;

    case CREATOR:
      if (value == null) {
        unsetCreator();
      } else {
        setCreator((Integer)value);
      }
      break;

    case CREATED_TIME:
      if (value == null) {
        unsetCreatedTime();
      } else {
        setCreatedTime((Long)value);
      }
      break;

    case AUDIT_DETAILS:
      if (value == null) {
        unsetAuditDetails();
      } else {
        setAuditDetails((List<AuditDetail>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case APPLICATION_ID:
      return getApplicationId();

    case TASK_ID:
      return getTaskId();

    case EXAM_PAPER_ID:
      return getExamPaperId();

    case STAGE:
      return getStage();

    case ORDINAL:
      return getOrdinal();

    case CREATOR:
      return getCreator();

    case CREATED_TIME:
      return getCreatedTime();

    case AUDIT_DETAILS:
      return getAuditDetails();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case APPLICATION_ID:
      return isSetApplicationId();
    case TASK_ID:
      return isSetTaskId();
    case EXAM_PAPER_ID:
      return isSetExamPaperId();
    case STAGE:
      return isSetStage();
    case ORDINAL:
      return isSetOrdinal();
    case CREATOR:
      return isSetCreator();
    case CREATED_TIME:
      return isSetCreatedTime();
    case AUDIT_DETAILS:
      return isSetAuditDetails();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExamPaperRecordingTask)
      return this.equals((ExamPaperRecordingTask)that);
    return false;
  }

  public boolean equals(ExamPaperRecordingTask that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_applicationId = true;
    boolean that_present_applicationId = true;
    if (this_present_applicationId || that_present_applicationId) {
      if (!(this_present_applicationId && that_present_applicationId))
        return false;
      if (this.applicationId != that.applicationId)
        return false;
    }

    boolean this_present_taskId = true;
    boolean that_present_taskId = true;
    if (this_present_taskId || that_present_taskId) {
      if (!(this_present_taskId && that_present_taskId))
        return false;
      if (this.taskId != that.taskId)
        return false;
    }

    boolean this_present_examPaperId = true;
    boolean that_present_examPaperId = true;
    if (this_present_examPaperId || that_present_examPaperId) {
      if (!(this_present_examPaperId && that_present_examPaperId))
        return false;
      if (this.examPaperId != that.examPaperId)
        return false;
    }

    boolean this_present_stage = true;
    boolean that_present_stage = true;
    if (this_present_stage || that_present_stage) {
      if (!(this_present_stage && that_present_stage))
        return false;
      if (this.stage != that.stage)
        return false;
    }

    boolean this_present_ordinal = true && this.isSetOrdinal();
    boolean that_present_ordinal = true && that.isSetOrdinal();
    if (this_present_ordinal || that_present_ordinal) {
      if (!(this_present_ordinal && that_present_ordinal))
        return false;
      if (this.ordinal != that.ordinal)
        return false;
    }

    boolean this_present_creator = true && this.isSetCreator();
    boolean that_present_creator = true && that.isSetCreator();
    if (this_present_creator || that_present_creator) {
      if (!(this_present_creator && that_present_creator))
        return false;
      if (this.creator != that.creator)
        return false;
    }

    boolean this_present_createdTime = true && this.isSetCreatedTime();
    boolean that_present_createdTime = true && that.isSetCreatedTime();
    if (this_present_createdTime || that_present_createdTime) {
      if (!(this_present_createdTime && that_present_createdTime))
        return false;
      if (this.createdTime != that.createdTime)
        return false;
    }

    boolean this_present_auditDetails = true && this.isSetAuditDetails();
    boolean that_present_auditDetails = true && that.isSetAuditDetails();
    if (this_present_auditDetails || that_present_auditDetails) {
      if (!(this_present_auditDetails && that_present_auditDetails))
        return false;
      if (!this.auditDetails.equals(that.auditDetails))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_applicationId = true;
    list.add(present_applicationId);
    if (present_applicationId)
      list.add(applicationId);

    boolean present_taskId = true;
    list.add(present_taskId);
    if (present_taskId)
      list.add(taskId);

    boolean present_examPaperId = true;
    list.add(present_examPaperId);
    if (present_examPaperId)
      list.add(examPaperId);

    boolean present_stage = true;
    list.add(present_stage);
    if (present_stage)
      list.add(stage);

    boolean present_ordinal = true && (isSetOrdinal());
    list.add(present_ordinal);
    if (present_ordinal)
      list.add(ordinal);

    boolean present_creator = true && (isSetCreator());
    list.add(present_creator);
    if (present_creator)
      list.add(creator);

    boolean present_createdTime = true && (isSetCreatedTime());
    list.add(present_createdTime);
    if (present_createdTime)
      list.add(createdTime);

    boolean present_auditDetails = true && (isSetAuditDetails());
    list.add(present_auditDetails);
    if (present_auditDetails)
      list.add(auditDetails);

    return list.hashCode();
  }

  @Override
  public int compareTo(ExamPaperRecordingTask other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExamPaperId()).compareTo(other.isSetExamPaperId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExamPaperId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.examPaperId, other.examPaperId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStage()).compareTo(other.isSetStage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stage, other.stage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrdinal()).compareTo(other.isSetOrdinal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrdinal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ordinal, other.ordinal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreator()).compareTo(other.isSetCreator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creator, other.creator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedTime()).compareTo(other.isSetCreatedTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdTime, other.createdTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuditDetails()).compareTo(other.isSetAuditDetails());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuditDetails()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditDetails, other.auditDetails);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ExamPaperRecordingTask(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("applicationId:");
    sb.append(this.applicationId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskId:");
    sb.append(this.taskId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("examPaperId:");
    sb.append(this.examPaperId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stage:");
    sb.append(this.stage);
    first = false;
    if (isSetOrdinal()) {
      if (!first) sb.append(", ");
      sb.append("ordinal:");
      sb.append(this.ordinal);
      first = false;
    }
    if (isSetCreator()) {
      if (!first) sb.append(", ");
      sb.append("creator:");
      sb.append(this.creator);
      first = false;
    }
    if (isSetCreatedTime()) {
      if (!first) sb.append(", ");
      sb.append("createdTime:");
      sb.append(this.createdTime);
      first = false;
    }
    if (isSetAuditDetails()) {
      if (!first) sb.append(", ");
      sb.append("auditDetails:");
      if (this.auditDetails == null) {
        sb.append("null");
      } else {
        sb.append(this.auditDetails);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' is unset! Struct:" + toString());
    }

    if (!isSetApplicationId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'applicationId' is unset! Struct:" + toString());
    }

    if (!isSetTaskId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'taskId' is unset! Struct:" + toString());
    }

    if (!isSetExamPaperId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'examPaperId' is unset! Struct:" + toString());
    }

    if (!isSetStage()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stage' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExamPaperRecordingTaskStandardSchemeFactory implements SchemeFactory {
    public ExamPaperRecordingTaskStandardScheme getScheme() {
      return new ExamPaperRecordingTaskStandardScheme();
    }
  }

  private static class ExamPaperRecordingTaskStandardScheme extends StandardScheme<ExamPaperRecordingTask> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExamPaperRecordingTask struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APPLICATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.applicationId = iprot.readI64();
              struct.setApplicationIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.taskId = iprot.readI64();
              struct.setTaskIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXAM_PAPER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.examPaperId = iprot.readI64();
              struct.setExamPaperIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stage = iprot.readI32();
              struct.setStageIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ORDINAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ordinal = iprot.readI32();
              struct.setOrdinalIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.creator = iprot.readI32();
              struct.setCreatorIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATED_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createdTime = iprot.readI64();
              struct.setCreatedTimeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // AUDIT_DETAILS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.auditDetails = new ArrayList<AuditDetail>(_list8.size);
                AuditDetail _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new AuditDetail();
                  _elem9.read(iprot);
                  struct.auditDetails.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setAuditDetailsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExamPaperRecordingTask struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
      oprot.writeI64(struct.applicationId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
      oprot.writeI64(struct.taskId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXAM_PAPER_ID_FIELD_DESC);
      oprot.writeI64(struct.examPaperId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STAGE_FIELD_DESC);
      oprot.writeI32(struct.stage);
      oprot.writeFieldEnd();
      if (struct.isSetOrdinal()) {
        oprot.writeFieldBegin(ORDINAL_FIELD_DESC);
        oprot.writeI32(struct.ordinal);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreator()) {
        oprot.writeFieldBegin(CREATOR_FIELD_DESC);
        oprot.writeI32(struct.creator);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreatedTime()) {
        oprot.writeFieldBegin(CREATED_TIME_FIELD_DESC);
        oprot.writeI64(struct.createdTime);
        oprot.writeFieldEnd();
      }
      if (struct.auditDetails != null) {
        if (struct.isSetAuditDetails()) {
          oprot.writeFieldBegin(AUDIT_DETAILS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.auditDetails.size()));
            for (AuditDetail _iter11 : struct.auditDetails)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExamPaperRecordingTaskTupleSchemeFactory implements SchemeFactory {
    public ExamPaperRecordingTaskTupleScheme getScheme() {
      return new ExamPaperRecordingTaskTupleScheme();
    }
  }

  private static class ExamPaperRecordingTaskTupleScheme extends TupleScheme<ExamPaperRecordingTask> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExamPaperRecordingTask struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.id);
      oprot.writeI64(struct.applicationId);
      oprot.writeI64(struct.taskId);
      oprot.writeI64(struct.examPaperId);
      oprot.writeI32(struct.stage);
      BitSet optionals = new BitSet();
      if (struct.isSetOrdinal()) {
        optionals.set(0);
      }
      if (struct.isSetCreator()) {
        optionals.set(1);
      }
      if (struct.isSetCreatedTime()) {
        optionals.set(2);
      }
      if (struct.isSetAuditDetails()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetOrdinal()) {
        oprot.writeI32(struct.ordinal);
      }
      if (struct.isSetCreator()) {
        oprot.writeI32(struct.creator);
      }
      if (struct.isSetCreatedTime()) {
        oprot.writeI64(struct.createdTime);
      }
      if (struct.isSetAuditDetails()) {
        {
          oprot.writeI32(struct.auditDetails.size());
          for (AuditDetail _iter12 : struct.auditDetails)
          {
            _iter12.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExamPaperRecordingTask struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readI64();
      struct.setIdIsSet(true);
      struct.applicationId = iprot.readI64();
      struct.setApplicationIdIsSet(true);
      struct.taskId = iprot.readI64();
      struct.setTaskIdIsSet(true);
      struct.examPaperId = iprot.readI64();
      struct.setExamPaperIdIsSet(true);
      struct.stage = iprot.readI32();
      struct.setStageIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.ordinal = iprot.readI32();
        struct.setOrdinalIsSet(true);
      }
      if (incoming.get(1)) {
        struct.creator = iprot.readI32();
        struct.setCreatorIsSet(true);
      }
      if (incoming.get(2)) {
        struct.createdTime = iprot.readI64();
        struct.setCreatedTimeIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.auditDetails = new ArrayList<AuditDetail>(_list13.size);
          AuditDetail _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new AuditDetail();
            _elem14.read(iprot);
            struct.auditDetails.add(_elem14);
          }
        }
        struct.setAuditDetailsIsSet(true);
      }
    }
  }

}

