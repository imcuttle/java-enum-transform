/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.imcuttle.foo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class BindBatchQuestionReq implements org.apache.thrift.TBase<BindBatchQuestionReq, BindBatchQuestionReq._Fields>, java.io.Serializable, Cloneable, Comparable<BindBatchQuestionReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BindBatchQuestionReq");

  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField QUESTION_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("questionIds", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField EXAM_PAPER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("examPaperId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField QUESTION_ORIGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("questionOrigin", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField QUESTION_ID2_SNAPSHOT_IMG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("questionId2SnapshotImgIds", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField OPERATOR_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorUserId", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BindBatchQuestionReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BindBatchQuestionReqTupleSchemeFactory());
  }

  private long taskId; // required
  private List<Integer> questionIds; // required
  private long examPaperId; // optional
  private int questionOrigin; // required
  private Map<Integer,List<String>> questionId2SnapshotImgIds; // optional
  private int operatorUserId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TASK_ID((short)1, "taskId"),
    QUESTION_IDS((short)2, "questionIds"),
    EXAM_PAPER_ID((short)3, "examPaperId"),
    QUESTION_ORIGIN((short)4, "questionOrigin"),
    QUESTION_ID2_SNAPSHOT_IMG_IDS((short)5, "questionId2SnapshotImgIds"),
    OPERATOR_USER_ID((short)6, "operatorUserId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_ID
          return TASK_ID;
        case 2: // QUESTION_IDS
          return QUESTION_IDS;
        case 3: // EXAM_PAPER_ID
          return EXAM_PAPER_ID;
        case 4: // QUESTION_ORIGIN
          return QUESTION_ORIGIN;
        case 5: // QUESTION_ID2_SNAPSHOT_IMG_IDS
          return QUESTION_ID2_SNAPSHOT_IMG_IDS;
        case 6: // OPERATOR_USER_ID
          return OPERATOR_USER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TASKID_ISSET_ID = 0;
  private static final int __EXAMPAPERID_ISSET_ID = 1;
  private static final int __QUESTIONORIGIN_ISSET_ID = 2;
  private static final int __OPERATORUSERID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.EXAM_PAPER_ID,_Fields.QUESTION_ID2_SNAPSHOT_IMG_IDS,_Fields.OPERATOR_USER_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.QUESTION_IDS, new org.apache.thrift.meta_data.FieldMetaData("questionIds", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.EXAM_PAPER_ID, new org.apache.thrift.meta_data.FieldMetaData("examPaperId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.QUESTION_ORIGIN, new org.apache.thrift.meta_data.FieldMetaData("questionOrigin", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUESTION_ID2_SNAPSHOT_IMG_IDS, new org.apache.thrift.meta_data.FieldMetaData("questionId2SnapshotImgIds", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32),
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.OPERATOR_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("operatorUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BindBatchQuestionReq.class, metaDataMap);
  }

  public BindBatchQuestionReq() {
  }

  public BindBatchQuestionReq(
    long taskId,
    List<Integer> questionIds,
    int questionOrigin)
  {
    this();
    this.taskId = taskId;
    setTaskIdIsSet(true);
    this.questionIds = questionIds;
    this.questionOrigin = questionOrigin;
    setQuestionOriginIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BindBatchQuestionReq(BindBatchQuestionReq other) {
    __isset_bitfield = other.__isset_bitfield;
    this.taskId = other.taskId;
    if (other.isSetQuestionIds()) {
      List<Integer> __this__questionIds = new ArrayList<Integer>(other.questionIds);
      this.questionIds = __this__questionIds;
    }
    this.examPaperId = other.examPaperId;
    this.questionOrigin = other.questionOrigin;
    if (other.isSetQuestionId2SnapshotImgIds()) {
      Map<Integer,List<String>> __this__questionId2SnapshotImgIds = new HashMap<Integer,List<String>>(other.questionId2SnapshotImgIds.size());
      for (Map.Entry<Integer, List<String>> other_element : other.questionId2SnapshotImgIds.entrySet()) {

        Integer other_element_key = other_element.getKey();
        List<String> other_element_value = other_element.getValue();

        Integer __this__questionId2SnapshotImgIds_copy_key = other_element_key;

        List<String> __this__questionId2SnapshotImgIds_copy_value = new ArrayList<String>(other_element_value);

        __this__questionId2SnapshotImgIds.put(__this__questionId2SnapshotImgIds_copy_key, __this__questionId2SnapshotImgIds_copy_value);
      }
      this.questionId2SnapshotImgIds = __this__questionId2SnapshotImgIds;
    }
    this.operatorUserId = other.operatorUserId;
  }

  public BindBatchQuestionReq deepCopy() {
    return new BindBatchQuestionReq(this);
  }

  @Override
  public void clear() {
    setTaskIdIsSet(false);
    this.taskId = 0;
    this.questionIds = null;
    setExamPaperIdIsSet(false);
    this.examPaperId = 0;
    setQuestionOriginIsSet(false);
    this.questionOrigin = 0;
    this.questionId2SnapshotImgIds = null;
    setOperatorUserIdIsSet(false);
    this.operatorUserId = 0;
  }

  public long getTaskId() {
    return this.taskId;
  }

  public void setTaskId(long taskId) {
    this.taskId = taskId;
    setTaskIdIsSet(true);
  }

  public void unsetTaskId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskId() {
    return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  public void setTaskIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
  }

  public int getQuestionIdsSize() {
    return (this.questionIds == null) ? 0 : this.questionIds.size();
  }

  public java.util.Iterator<Integer> getQuestionIdsIterator() {
    return (this.questionIds == null) ? null : this.questionIds.iterator();
  }

  public void addToQuestionIds(int elem) {
    if (this.questionIds == null) {
      this.questionIds = new ArrayList<Integer>();
    }
    this.questionIds.add(elem);
  }

  public List<Integer> getQuestionIds() {
    return this.questionIds;
  }

  public void setQuestionIds(List<Integer> questionIds) {
    this.questionIds = questionIds;
  }

  public void unsetQuestionIds() {
    this.questionIds = null;
  }

  /** Returns true if field questionIds is set (has been assigned a value) and false otherwise */
  public boolean isSetQuestionIds() {
    return this.questionIds != null;
  }

  public void setQuestionIdsIsSet(boolean value) {
    if (!value) {
      this.questionIds = null;
    }
  }

  public long getExamPaperId() {
    return this.examPaperId;
  }

  public void setExamPaperId(long examPaperId) {
    this.examPaperId = examPaperId;
    setExamPaperIdIsSet(true);
  }

  public void unsetExamPaperId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXAMPAPERID_ISSET_ID);
  }

  /** Returns true if field examPaperId is set (has been assigned a value) and false otherwise */
  public boolean isSetExamPaperId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXAMPAPERID_ISSET_ID);
  }

  public void setExamPaperIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXAMPAPERID_ISSET_ID, value);
  }

  public int getQuestionOrigin() {
    return this.questionOrigin;
  }

  public void setQuestionOrigin(int questionOrigin) {
    this.questionOrigin = questionOrigin;
    setQuestionOriginIsSet(true);
  }

  public void unsetQuestionOrigin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUESTIONORIGIN_ISSET_ID);
  }

  /** Returns true if field questionOrigin is set (has been assigned a value) and false otherwise */
  public boolean isSetQuestionOrigin() {
    return EncodingUtils.testBit(__isset_bitfield, __QUESTIONORIGIN_ISSET_ID);
  }

  public void setQuestionOriginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUESTIONORIGIN_ISSET_ID, value);
  }

  public int getQuestionId2SnapshotImgIdsSize() {
    return (this.questionId2SnapshotImgIds == null) ? 0 : this.questionId2SnapshotImgIds.size();
  }

  public void putToQuestionId2SnapshotImgIds(int key, List<String> val) {
    if (this.questionId2SnapshotImgIds == null) {
      this.questionId2SnapshotImgIds = new HashMap<Integer,List<String>>();
    }
    this.questionId2SnapshotImgIds.put(key, val);
  }

  public Map<Integer,List<String>> getQuestionId2SnapshotImgIds() {
    return this.questionId2SnapshotImgIds;
  }

  public void setQuestionId2SnapshotImgIds(Map<Integer,List<String>> questionId2SnapshotImgIds) {
    this.questionId2SnapshotImgIds = questionId2SnapshotImgIds;
  }

  public void unsetQuestionId2SnapshotImgIds() {
    this.questionId2SnapshotImgIds = null;
  }

  /** Returns true if field questionId2SnapshotImgIds is set (has been assigned a value) and false otherwise */
  public boolean isSetQuestionId2SnapshotImgIds() {
    return this.questionId2SnapshotImgIds != null;
  }

  public void setQuestionId2SnapshotImgIdsIsSet(boolean value) {
    if (!value) {
      this.questionId2SnapshotImgIds = null;
    }
  }

  public int getOperatorUserId() {
    return this.operatorUserId;
  }

  public void setOperatorUserId(int operatorUserId) {
    this.operatorUserId = operatorUserId;
    setOperatorUserIdIsSet(true);
  }

  public void unsetOperatorUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERATORUSERID_ISSET_ID);
  }

  /** Returns true if field operatorUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatorUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERATORUSERID_ISSET_ID);
  }

  public void setOperatorUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERATORUSERID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TASK_ID:
      if (value == null) {
        unsetTaskId();
      } else {
        setTaskId((Long)value);
      }
      break;

    case QUESTION_IDS:
      if (value == null) {
        unsetQuestionIds();
      } else {
        setQuestionIds((List<Integer>)value);
      }
      break;

    case EXAM_PAPER_ID:
      if (value == null) {
        unsetExamPaperId();
      } else {
        setExamPaperId((Long)value);
      }
      break;

    case QUESTION_ORIGIN:
      if (value == null) {
        unsetQuestionOrigin();
      } else {
        setQuestionOrigin((Integer)value);
      }
      break;

    case QUESTION_ID2_SNAPSHOT_IMG_IDS:
      if (value == null) {
        unsetQuestionId2SnapshotImgIds();
      } else {
        setQuestionId2SnapshotImgIds((Map<Integer,List<String>>)value);
      }
      break;

    case OPERATOR_USER_ID:
      if (value == null) {
        unsetOperatorUserId();
      } else {
        setOperatorUserId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_ID:
      return getTaskId();

    case QUESTION_IDS:
      return getQuestionIds();

    case EXAM_PAPER_ID:
      return getExamPaperId();

    case QUESTION_ORIGIN:
      return getQuestionOrigin();

    case QUESTION_ID2_SNAPSHOT_IMG_IDS:
      return getQuestionId2SnapshotImgIds();

    case OPERATOR_USER_ID:
      return getOperatorUserId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TASK_ID:
      return isSetTaskId();
    case QUESTION_IDS:
      return isSetQuestionIds();
    case EXAM_PAPER_ID:
      return isSetExamPaperId();
    case QUESTION_ORIGIN:
      return isSetQuestionOrigin();
    case QUESTION_ID2_SNAPSHOT_IMG_IDS:
      return isSetQuestionId2SnapshotImgIds();
    case OPERATOR_USER_ID:
      return isSetOperatorUserId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BindBatchQuestionReq)
      return this.equals((BindBatchQuestionReq)that);
    return false;
  }

  public boolean equals(BindBatchQuestionReq that) {
    if (that == null)
      return false;

    boolean this_present_taskId = true;
    boolean that_present_taskId = true;
    if (this_present_taskId || that_present_taskId) {
      if (!(this_present_taskId && that_present_taskId))
        return false;
      if (this.taskId != that.taskId)
        return false;
    }

    boolean this_present_questionIds = true && this.isSetQuestionIds();
    boolean that_present_questionIds = true && that.isSetQuestionIds();
    if (this_present_questionIds || that_present_questionIds) {
      if (!(this_present_questionIds && that_present_questionIds))
        return false;
      if (!this.questionIds.equals(that.questionIds))
        return false;
    }

    boolean this_present_examPaperId = true && this.isSetExamPaperId();
    boolean that_present_examPaperId = true && that.isSetExamPaperId();
    if (this_present_examPaperId || that_present_examPaperId) {
      if (!(this_present_examPaperId && that_present_examPaperId))
        return false;
      if (this.examPaperId != that.examPaperId)
        return false;
    }

    boolean this_present_questionOrigin = true;
    boolean that_present_questionOrigin = true;
    if (this_present_questionOrigin || that_present_questionOrigin) {
      if (!(this_present_questionOrigin && that_present_questionOrigin))
        return false;
      if (this.questionOrigin != that.questionOrigin)
        return false;
    }

    boolean this_present_questionId2SnapshotImgIds = true && this.isSetQuestionId2SnapshotImgIds();
    boolean that_present_questionId2SnapshotImgIds = true && that.isSetQuestionId2SnapshotImgIds();
    if (this_present_questionId2SnapshotImgIds || that_present_questionId2SnapshotImgIds) {
      if (!(this_present_questionId2SnapshotImgIds && that_present_questionId2SnapshotImgIds))
        return false;
      if (!this.questionId2SnapshotImgIds.equals(that.questionId2SnapshotImgIds))
        return false;
    }

    boolean this_present_operatorUserId = true && this.isSetOperatorUserId();
    boolean that_present_operatorUserId = true && that.isSetOperatorUserId();
    if (this_present_operatorUserId || that_present_operatorUserId) {
      if (!(this_present_operatorUserId && that_present_operatorUserId))
        return false;
      if (this.operatorUserId != that.operatorUserId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_taskId = true;
    list.add(present_taskId);
    if (present_taskId)
      list.add(taskId);

    boolean present_questionIds = true && (isSetQuestionIds());
    list.add(present_questionIds);
    if (present_questionIds)
      list.add(questionIds);

    boolean present_examPaperId = true && (isSetExamPaperId());
    list.add(present_examPaperId);
    if (present_examPaperId)
      list.add(examPaperId);

    boolean present_questionOrigin = true;
    list.add(present_questionOrigin);
    if (present_questionOrigin)
      list.add(questionOrigin);

    boolean present_questionId2SnapshotImgIds = true && (isSetQuestionId2SnapshotImgIds());
    list.add(present_questionId2SnapshotImgIds);
    if (present_questionId2SnapshotImgIds)
      list.add(questionId2SnapshotImgIds);

    boolean present_operatorUserId = true && (isSetOperatorUserId());
    list.add(present_operatorUserId);
    if (present_operatorUserId)
      list.add(operatorUserId);

    return list.hashCode();
  }

  @Override
  public int compareTo(BindBatchQuestionReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuestionIds()).compareTo(other.isSetQuestionIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestionIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionIds, other.questionIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExamPaperId()).compareTo(other.isSetExamPaperId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExamPaperId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.examPaperId, other.examPaperId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuestionOrigin()).compareTo(other.isSetQuestionOrigin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestionOrigin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionOrigin, other.questionOrigin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuestionId2SnapshotImgIds()).compareTo(other.isSetQuestionId2SnapshotImgIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestionId2SnapshotImgIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionId2SnapshotImgIds, other.questionId2SnapshotImgIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperatorUserId()).compareTo(other.isSetOperatorUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorUserId, other.operatorUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BindBatchQuestionReq(");
    boolean first = true;

    sb.append("taskId:");
    sb.append(this.taskId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("questionIds:");
    if (this.questionIds == null) {
      sb.append("null");
    } else {
      sb.append(this.questionIds);
    }
    first = false;
    if (isSetExamPaperId()) {
      if (!first) sb.append(", ");
      sb.append("examPaperId:");
      sb.append(this.examPaperId);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("questionOrigin:");
    sb.append(this.questionOrigin);
    first = false;
    if (isSetQuestionId2SnapshotImgIds()) {
      if (!first) sb.append(", ");
      sb.append("questionId2SnapshotImgIds:");
      if (this.questionId2SnapshotImgIds == null) {
        sb.append("null");
      } else {
        sb.append(this.questionId2SnapshotImgIds);
      }
      first = false;
    }
    if (isSetOperatorUserId()) {
      if (!first) sb.append(", ");
      sb.append("operatorUserId:");
      sb.append(this.operatorUserId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetTaskId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'taskId' is unset! Struct:" + toString());
    }

    if (!isSetQuestionIds()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'questionIds' is unset! Struct:" + toString());
    }

    if (!isSetQuestionOrigin()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'questionOrigin' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BindBatchQuestionReqStandardSchemeFactory implements SchemeFactory {
    public BindBatchQuestionReqStandardScheme getScheme() {
      return new BindBatchQuestionReqStandardScheme();
    }
  }

  private static class BindBatchQuestionReqStandardScheme extends StandardScheme<BindBatchQuestionReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BindBatchQuestionReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.taskId = iprot.readI64();
              struct.setTaskIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUESTION_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                struct.questionIds = new ArrayList<Integer>(_list88.size);
                int _elem89;
                for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                {
                  _elem89 = iprot.readI32();
                  struct.questionIds.add(_elem89);
                }
                iprot.readListEnd();
              }
              struct.setQuestionIdsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXAM_PAPER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.examPaperId = iprot.readI64();
              struct.setExamPaperIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // QUESTION_ORIGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.questionOrigin = iprot.readI32();
              struct.setQuestionOriginIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // QUESTION_ID2_SNAPSHOT_IMG_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map91 = iprot.readMapBegin();
                struct.questionId2SnapshotImgIds = new HashMap<Integer,List<String>>(2*_map91.size);
                int _key92;
                List<String> _val93;
                for (int _i94 = 0; _i94 < _map91.size; ++_i94)
                {
                  _key92 = iprot.readI32();
                  {
                    org.apache.thrift.protocol.TList _list95 = iprot.readListBegin();
                    _val93 = new ArrayList<String>(_list95.size);
                    String _elem96;
                    for (int _i97 = 0; _i97 < _list95.size; ++_i97)
                    {
                      _elem96 = iprot.readString();
                      _val93.add(_elem96);
                    }
                    iprot.readListEnd();
                  }
                  struct.questionId2SnapshotImgIds.put(_key92, _val93);
                }
                iprot.readMapEnd();
              }
              struct.setQuestionId2SnapshotImgIdsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OPERATOR_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operatorUserId = iprot.readI32();
              struct.setOperatorUserIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BindBatchQuestionReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
      oprot.writeI64(struct.taskId);
      oprot.writeFieldEnd();
      if (struct.questionIds != null) {
        oprot.writeFieldBegin(QUESTION_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.questionIds.size()));
          for (int _iter98 : struct.questionIds)
          {
            oprot.writeI32(_iter98);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetExamPaperId()) {
        oprot.writeFieldBegin(EXAM_PAPER_ID_FIELD_DESC);
        oprot.writeI64(struct.examPaperId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(QUESTION_ORIGIN_FIELD_DESC);
      oprot.writeI32(struct.questionOrigin);
      oprot.writeFieldEnd();
      if (struct.questionId2SnapshotImgIds != null) {
        if (struct.isSetQuestionId2SnapshotImgIds()) {
          oprot.writeFieldBegin(QUESTION_ID2_SNAPSHOT_IMG_IDS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, struct.questionId2SnapshotImgIds.size()));
            for (Map.Entry<Integer, List<String>> _iter99 : struct.questionId2SnapshotImgIds.entrySet())
            {
              oprot.writeI32(_iter99.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter99.getValue().size()));
                for (String _iter100 : _iter99.getValue())
                {
                  oprot.writeString(_iter100);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOperatorUserId()) {
        oprot.writeFieldBegin(OPERATOR_USER_ID_FIELD_DESC);
        oprot.writeI32(struct.operatorUserId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BindBatchQuestionReqTupleSchemeFactory implements SchemeFactory {
    public BindBatchQuestionReqTupleScheme getScheme() {
      return new BindBatchQuestionReqTupleScheme();
    }
  }

  private static class BindBatchQuestionReqTupleScheme extends TupleScheme<BindBatchQuestionReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BindBatchQuestionReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.taskId);
      {
        oprot.writeI32(struct.questionIds.size());
        for (int _iter101 : struct.questionIds)
        {
          oprot.writeI32(_iter101);
        }
      }
      oprot.writeI32(struct.questionOrigin);
      BitSet optionals = new BitSet();
      if (struct.isSetExamPaperId()) {
        optionals.set(0);
      }
      if (struct.isSetQuestionId2SnapshotImgIds()) {
        optionals.set(1);
      }
      if (struct.isSetOperatorUserId()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetExamPaperId()) {
        oprot.writeI64(struct.examPaperId);
      }
      if (struct.isSetQuestionId2SnapshotImgIds()) {
        {
          oprot.writeI32(struct.questionId2SnapshotImgIds.size());
          for (Map.Entry<Integer, List<String>> _iter102 : struct.questionId2SnapshotImgIds.entrySet())
          {
            oprot.writeI32(_iter102.getKey());
            {
              oprot.writeI32(_iter102.getValue().size());
              for (String _iter103 : _iter102.getValue())
              {
                oprot.writeString(_iter103);
              }
            }
          }
        }
      }
      if (struct.isSetOperatorUserId()) {
        oprot.writeI32(struct.operatorUserId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BindBatchQuestionReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.taskId = iprot.readI64();
      struct.setTaskIdIsSet(true);
      {
        org.apache.thrift.protocol.TList _list104 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.questionIds = new ArrayList<Integer>(_list104.size);
        int _elem105;
        for (int _i106 = 0; _i106 < _list104.size; ++_i106)
        {
          _elem105 = iprot.readI32();
          struct.questionIds.add(_elem105);
        }
      }
      struct.setQuestionIdsIsSet(true);
      struct.questionOrigin = iprot.readI32();
      struct.setQuestionOriginIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.examPaperId = iprot.readI64();
        struct.setExamPaperIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map107 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.questionId2SnapshotImgIds = new HashMap<Integer,List<String>>(2*_map107.size);
          int _key108;
          List<String> _val109;
          for (int _i110 = 0; _i110 < _map107.size; ++_i110)
          {
            _key108 = iprot.readI32();
            {
              org.apache.thrift.protocol.TList _list111 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _val109 = new ArrayList<String>(_list111.size);
              String _elem112;
              for (int _i113 = 0; _i113 < _list111.size; ++_i113)
              {
                _elem112 = iprot.readString();
                _val109.add(_elem112);
              }
            }
            struct.questionId2SnapshotImgIds.put(_key108, _val109);
          }
        }
        struct.setQuestionId2SnapshotImgIdsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.operatorUserId = iprot.readI32();
        struct.setOperatorUserIdIsSet(true);
      }
    }
  }

}

